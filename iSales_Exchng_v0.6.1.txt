//@ 2016-09-07 14:36:45
//
// общие реквизиты доков
	// ЗагруженИзiSales		число 1
	// ВыгруженВiSales		число 1
	// ДатаИзменения		дата
	// is_Код               строка 10
	
// Заявка "ЗаявкаiSales" отдельный док

// спр.Контрагенты is_Код			строка 10
// спр.Номенклатура is_Код			строка 15
// спр.Номенклатура is_Неактивный	число 1 (1-Неактивный, 0-Активный)
// спр.Склады is_Код				строка 100
// спр.Агенты is_Код				строка
// спр.Агенты уровни:2

 //+Пашков К.В.@РегионПродОптТорг, 2016-09-01 16:32:57
Перем тзПрайсы, тзКонтрПрайс, тзДинамика,ТабЗначДинамика;
Перем тзТестПрайс,тзТестПрайсРозница,КонтрСети,КонтрСетиРозница,ОтделПепси,ВыбСкладПепсиКод;

Перем глОрганизацияiSales,СписокЕдиниц;  

 //-Пашков К.В.@РегионПродОптТорг, 2016-09-01 16:32:57

Перем АдресБиблиотекиSOAP;
Перем сИмяПользователя;
Перем сПароль;
Перем _Контекст;

Перем ПотокВывода_ТаблоФайл;
Перем ПотокВывода_Табло;
Перем ПотокВывода_Файл;

Перем тзКонтрагенты; // - таблица с получеными контрагентами
Перем тзНоменклатура;// - таблица с полученой номенклатурой

Перем тзНомСертификаты; // CERTS
Перем тзНомЕдиницы;     // UOMS
Перем тзНомКонвертация; // CONVS

// Для интерфейса UpdateTransferStatus
Перем _объект_Заявки;
Перем _объект_Документы;
// Для интерфейса UpdateTransferStatus

Перем сИдЕдИзмШт;
Перем сИдЕдИзмУп;
Перем сИдЕдИзмРк;

Перем _ЛогФайл;
Перем _ИмяЛогФайла;

Перем КешироватьСервисы;
 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 10:38:48
Перем  ВключитьЛогирование;
Процедура ПоказатьТЗ(Значение,Отступ) Далее
Процедура СообщитьОбычное(Сообщение, Комментарий = "", ПотокВывода = 0)  Далее

 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 15:54:49
 
 Функция ВернутьЗначениеПеречисленияПоПредаставлению(текПредставление);
 	
 	кол = Перечисление.ФормыРасчета.КоличествоЗначений();
 	Для х = 1 По кол  Цикл
 		
 		Если текПредставление = "Накладная/факт" Тогда
 			Возврат Перечисление.ФормыРасчета.Нал;
 		ИначеЕсли текПредставление = "Счет-фактура/отсрочка" Тогда	
 			Возврат Перечисление.ФормыРасчета.ОтсрБезнал;
 		//ИначеЕсли текПредставление = "Счет-фактура/факт" Тогда	
 		//	Возврат Перечисление.ФормыРасчета.ПредпБезнал;	
 		ИначеЕсли текПредставление = "Накладная/отсрочка" Тогда	
 			Возврат Перечисление.ФормыРасчета.ОтсрНал;		
 		ИначеЕсли текПредставление = "Предоплата" Тогда	
 			Возврат Перечисление.ФормыРасчета.ПредпБезнал;			
 		Иначе
 			Возврат Перечисление.ФормыРасчета.ПустаяСтрока;
 		КонецЕсли;
 		
 	КонецЦикла; 	
 	
 КонецФункции
 
 
Функция ПолучитьСтавкуНДС(ВеличинаСтавкиНДС)
	

	//*Пашков К.В.@РегионПродОптТорг, 2016-09-15 10:44:20
	//	Если ВеличинаСтавкиНДС=Перечисление.СтавкиНДС.БезНДС Тогда
	//		Возврат 0;
	//	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.СтавкиНДС.НДС10 Тогда
	//		Возврат 10;
	//	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.СтавкиНДС.НДС18 Тогда
	//		Возврат 18;
	//	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.СтавкиНДС.НДС20 Тогда
	//		Возврат 20;
	//	Иначе
	//		Возврат 0;
	//	КонецЕсли;
	// -------- заменено на:
	Если ВеличинаСтавкиНДС=Перечисление.ЗначенияНДС.безНДС Тогда
		Возврат 0;
	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
		Возврат 10;
	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС18 Тогда
		Возврат 18;
	ИначеЕсли ВеличинаСтавкиНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
		Возврат 20;
	Иначе
		Возврат 0;
	КонецЕсли;
	///Пашков К.В.@РегионПродОптТорг, 2016-09-15 10:44:20

	
КонецФункции // ОпределитьСтавкуНДС(ВеличинаСтавкиНДС) 

 Функция НайтиАкциюПоКодуiSales(КодiSales);
 	
 	 
 	СпрАкции = СоздатьОбъект("Справочник.Акции");
	ВозвратитьА = СоздатьОбъект("Справочник.Акции");
	тКод =  СокрЛП(КодiSales);
	
	Если СпрАкции.НайтиПоРеквизиту("КодАкциивМТ",КодiSales,1) = 1 Тогда
		Возврат СпрАкции.ТекущийЭлемент();
	Иначе
		Возврат ВозвратитьА;
	КонецЕсли;
 	
 КонецФункции
 
 Функция СформитроватьТестовыйПрайсХМЛ()
	
	Перем ИмяФайла,ПутьФайла, ЗаголовокФайла;
	
	СтрокаХмл = "";
	оснПрайс = "Розница";
	
	прайсИмя = оснПрайс;
	
	ИмяФайла  = "test_pr.xml";
	ПутьФайла = "E:\iSales\";
	ЗаголовокФайла = "<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://tempuri.org/""><s:Header /><s:Body>";
	Процедура_Логин = "<CustomerPricesTransfer xmlns=""http://tempuri.org/""><username>1c_zeon_test</username><password>36075</password><customerPrices>";
	Процедура_Логин_1 = "<customerPrices>";
	НачалоДанных = "<PL>";
	//НачалоДанных = "<customerPrices><PL>";
	ПрайсНачало = "<PRICES>";
//	Финал = "</PL></customerPrices></CustomerPricesTransfer></s:Body></s:Envelope>";
Финал = "</PL></customerPrices>";
	ФиналПрайса = "</PRICES>";
	ЗакрытьТэг = "</PL>";
	НачалоКонтрагентов = "<CUSTS>";
	ФиналКонтрагентов = "</CUSTS><VALID>0</VALID>";
	
	
	текКонтрагент = "<CUST>";
	текКонтрагентФ = "</CUST>";
	
	
	ИмяФайла = ПутьФайла + ИмяФайла;
	
	
	Файл = СоздатьОбъект("Текст");
	Файл.ДобавитьСтроку(ЗаголовокФайла);
	Файл.ДобавитьСтроку(Процедура_Логин);
	Файл.ДобавитьСтроку(НачалоДанных);
	
	//СтрокаХмл = СтрокаХмл + ЗаголовокФайла + Процедура_Логин + НачалоДанных;
	СтрокаХмл = СтрокаХмл +  Процедура_Логин_1 +НачалоДанных;
	
	ИмяПрайса = "Сети";
		оснПрайс = "1";
		ОсновнойПрайс = "<PL_ID>" + ИмяПрайса +"</PL_ID><ISDEF>"+ оснПрайс + "</ISDEF>";	
		Файл.ДобавитьСтроку(ОсновнойПрайс);
		Файл.ДобавитьСтроку(ПрайсНачало);
				СтрокаХмл = СтрокаХмл + ОсновнойПрайс + ПрайсНачало;
	
		// Заполняем прайс кодами твара и ценой
		тзТестПрайс.ВыбратьСтроки();
		Пока тзТестПрайс.ПолучитьСтроку() = 1 Цикл
			текНом  = тзТестПрайс.Номенклатура;
			тЦена = тзТестПрайс.ИмяПрайса;
			текЦена = тЦена;
			БлокПрайс = "<PRC><PRD_ID>" + СокрЛП(текНом) + "</PRD_ID><NET>" + СокрЛП(текЦена) + "</NET></PRC>";					
			Файл.ДобавитьСтроку(БлокПрайс);
			СтрокаХмл = СтрокаХмл + БлокПрайс;
		КонецЦикла;
	
		Файл.ДобавитьСтроку(ФиналПрайса);
		Файл.ДобавитьСтроку(НачалоКонтрагентов);
		
		СтрокаХмл = СтрокаХмл + ФиналПрайса + НачалоКонтрагентов;
		//Запоняем контрагентов привязанных к этому прайсу
		КодФилиала = "3"; //Затычка
		КонтрСети.ВыбратьСтроки();
			Пока КонтрСети.ПолучитьСтроку() = 1 Цикл
				БлокКонтрагент = "<CUST_ID>" + КодФилиала + СокрЛП(КонтрСети.Код) + "</CUST_ID>" ;						
				Файл.ДобавитьСтроку(текКонтрагент);
				Файл.ДобавитьСтроку(БлокКонтрагент);
				Файл.ДобавитьСтроку(текКонтрагентФ);
				СтрокаХмл = СтрокаХмл + текКонтрагент;
				СтрокаХмл = СтрокаХмл + БлокКонтрагент;
				СтрокаХмл = СтрокаХмл + текКонтрагентФ;

		КонецЦикла;
		Файл.ДобавитьСтроку(ФиналКонтрагентов);
		СтрокаХмл = СтрокаХмл + ФиналКонтрагентов;
		Файл.ДобавитьСтроку(ЗакрытьТэг);
		СтрокаХмл = СтрокаХмл + ЗакрытьТэг;
	 
		
	ИмяПрайса = "Розница";
		оснПрайс = "0";
		
		ОсновнойПрайс = НачалоДанных +"<PL_ID>" + ИмяПрайса +"</PL_ID><ISDEF>"+ оснПрайс + "</ISDEF>";	
		Файл.ДобавитьСтроку(ОсновнойПрайс);
		Файл.ДобавитьСтроку(ПрайсНачало);
		СтрокаХмл = СтрокаХмл + ОсновнойПрайс + ПрайсНачало;
	
		
		// Заполняем прайс кодами твара и ценой
		тзТестПрайсРозница.ВыбратьСтроки();
		Пока тзТестПрайсРозница.ПолучитьСтроку() = 1 Цикл
			текНом  = тзТестПрайсРозница.Номенклатура;
			тЦена = тзТестПрайсРозница.ИмяПрайса;
			текЦена = тЦена;
			БлокПрайс = "<PRC><PRD_ID>" + СокрЛП(текНом) + "</PRD_ID><NET>" + СокрЛП(текЦена) + "</NET></PRC>";					
			Файл.ДобавитьСтроку(БлокПрайс);
			СтрокаХмл = СтрокаХмл + БлокПрайс;
		КонецЦикла;
	
		Файл.ДобавитьСтроку(ФиналПрайса);
		Файл.ДобавитьСтроку(НачалоКонтрагентов);
		СтрокаХмл = СтрокаХмл + ФиналПрайса + НачалоКонтрагентов;
		//Запоняем контрагентов привязанных к этому прайсу
		КодФилиала = "3"; //Затычка
		КонтрСетиРозница.ВыбратьСтроки();
		Пока КонтрСетиРозница.ПолучитьСтроку() = 1 Цикл
				БлокКонтрагент = "<CUST_ID>" + КодФилиала + СокрЛП(КонтрСетиРозница.Код) + "</CUST_ID>" ;						
				Файл.ДобавитьСтроку(текКонтрагент);
				Файл.ДобавитьСтроку(БлокКонтрагент);
				Файл.ДобавитьСтроку(текКонтрагентФ);
				СтрокаХмл = СтрокаХмл + текКонтрагент;
				СтрокаХмл = СтрокаХмл + БлокКонтрагент;
				СтрокаХмл = СтрокаХмл + текКонтрагентФ;
				
		КонецЦикла;
		Файл.ДобавитьСтроку(ФиналКонтрагентов);
		СтрокаХмл = СтрокаХмл + ФиналКонтрагентов;
		//Файл.ДобавитьСтроку(ЗакрытьТэг);
		//СтрокаХмл = СтрокаХмл + ЗакрытьТэг;
	
	Файл.ДобавитьСтроку(Финал);   	
	СтрокаХмл = СтрокаХмл + Финал;
	Попытка
		Файл.Записать(ИмяФайла); 
	Исключение
		Сообщить("Невозможно записать временный файл на диск!");
	КонецПопытки;	
	
	//Возврат Файл;
	Возврат СтрокаХмл;
КонецФункции

 
 
 
 Функция Выполнить()
	Перем sEndPoint;
	Перем sNameSpace;
	Перем sProcedure;
	Перем oHTTP ;
	Перем Ошибка;
	Перем fso;
	Перем Результат;
	Результат="";       
	
	
	
	login    = "1c_server_region"; 
    password             = "90043";
	
	Процедура_ = "ProductsTransfer";
	
	sEndPoint="https://www.isales.pepsico.com/isales/ws/accountingtransfer.asmx?wsdl";
	sNameSpace = "http://tempuri.org/";
	//sProcedure="SetAsync";
	sProcedure="ProductsTransfer";
	
	oHTTP = CreateObject("WinHttp.WinHttpRequest.5.1");
	oHTTP.Open ("POST", sEndPoint, 0); 
	oHTTP.SetTimeouts (10000,1500000, 3000000, 3000000);


sRequest = "<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns=""http://tempuri.org/""><s:Header/><s:Body><ProductsTransfer xmlns=""http://tempuri.org/"">";
sRequest = sRequest + "<username>"+login+"</username><password>"+password+"</password><dtFrom>20160801</dtFrom><dtTo>20160810</dtTo></ProductsTransfer></s:Body></s:Envelope>";
	//"
	Сообщить(sRequest);

	oHTTP.SetRequestHeader ("User-Agent", "1C Soap toolkit");
	oHTTP.SetRequestHeader ("Content-Type", "text/xml;charset=UTF-8");
	oHTTP.SetRequestHeader ("SOAPAction", sNameSpace + sProcedure);
	oHTTP.SetRequestHeader ("Content-Length", СтрДлина(sRequest));   
	oHTTP.SetRequestHeader ("Accept-Encoding", "deflate");
	//oHTTP.SetTimeouts(0,0,0,0);
	//oHTTP.Option(4,13056);
	Сообщить(sRequest);
	Ошибка="";
	Попытка
		oHTTP.Send (sRequest);
	Исключение
		Ошибка=ОписаниеОшибки();
		Сообщить(Ошибка);
	КонецПопытки;

	Если Ошибка <> "" Тогда
		ФормРезультат="<err><Status>1000</Status><Text>"+ Ошибка + "</Text></err>";
    	Возврат Результат;
	КонецЕсли;

	Execute=oHTTP.ResponseText;

	Если oHTTP.status = 200 Тогда
  		Если oHTTP.ResponseText = "" Тогда
      		Результат = "Empty Response from Server" ;
  		Иначе
      		Результат = oHTTP.ResponseText;
  		КонецЕсли;
	Иначе
  		Результат = "<err><Status>" + oHTTP.status + "</Status><Text>http err  " + oHTTP.status + " : " + oHTTP.StatusText + "</Text></err>";
КонецЕсли;

	ПоказатьТЗ(Результат,"| ");
	СообщитьОбычное("Данные ProductsTransfer получены",,ПотокВывода_Табло);
  	Возврат Результат;
КонецФункции                      

Функция СформитроватьХМЛ()
	
	Перем ИмяФайла,ПутьФайла, ЗаголовокФайла;
	
	СтрокаХмл = "";
	оснПрайс = "Розница";
	
	прайсИмя = оснПрайс;
	
	ИмяФайла  = "test_pr.xml";
	ПутьФайла = "E:\iSales\";
	ЗаголовокФайла = "<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://tempuri.org/""><s:Header /><s:Body>";
	Процедура_Логин = "<CustomerPricesTransfer xmlns=""http://tempuri.org/""><username>1c_zeon_test</username><password>36075</password><customerPrices>";
	НачалоДанных = "<customerPrices><PL>";
	ПрайсНачало = "<PRICES>";
//	Финал = "</PL></customerPrices></CustomerPricesTransfer></s:Body></s:Envelope>";
	Финал = "</PL></customerPrices>";
	ФиналПрайса = "</PRICES>";
	НачалоКонтрагентов = "<CUSTS>";
	текКонтрагент = "<CUST>";
	текКонтрагентФ = "</CUST>";
	
	ФиналКонтрагентов = "</CUSTS><VALID>0</VALID>";
	
	ИмяФайла = ПутьФайла + ИмяФайла;
	
	
	Файл = СоздатьОбъект("Текст");
	Файл.ДобавитьСтроку(ЗаголовокФайла);
	Файл.ДобавитьСтроку(Процедура_Логин);
	Файл.ДобавитьСтроку(НачалоДанных);
	
	//СтрокаХмл = СтрокаХмл + ЗаголовокФайла;
	//СтрокаХмл = СтрокаХмл + Процедура_Логин;
	СтрокаХмл = СтрокаХмл + НачалоДанных;
	
	
	Для х = 2 По тзДинамика.КоличествоКолонок() Цикл
		ИмяПрайса = тзДинамика.ПолучитьПараметрыКолонки(х);
	//	Сообщить(ИмяПрайса);
		Если ИмяПрайса = "к_Розница" Тогда
			оснПрайс = "0";
		Иначе
			оснПрайс = "1";
		КонецЕсли;
		ОсновнойПрайс = "<PL_ID>" + ИмяПрайса +"</PL_ID><ISDEF>"+ оснПрайс + "</ISDEF>";	
		Файл.ДобавитьСтроку(ОсновнойПрайс);
		Файл.ДобавитьСтроку(ПрайсНачало);
		СтрокаХмл = СтрокаХмл + ОсновнойПрайс;
		СтрокаХмл = СтрокаХмл + ПрайсНачало;
		// Заполняем прайс кодами твара и ценой
		тзДинамика.ВыбратьСтроки();
		Пока тзДинамика.ПолучитьСтроку() = 1 Цикл
			текНом  = тзДинамика.Номенклатура.КодАсумт;
			тЦена = тзДинамика.ПолучитьЗначение(тзДинамика.НомерСтроки,ИмяПрайса);
			текЦена = СтрЗаменить(тЦена,".",",");
			БлокПрайс = "<PRC><PRD_ID>" + СокрЛП(текНом) + "</PRD_ID><NET>" + СокрЛП(текЦена) + "</NET></PRC>";					
			Файл.ДобавитьСтроку(БлокПрайс);
			СтрокаХмл = СтрокаХмл + БлокПрайс;
		КонецЦикла;
		Файл.ДобавитьСтроку(ФиналПрайса);
		СтрокаХмл = СтрокаХмл + ФиналПрайса;
		
		Файл.ДобавитьСтроку(НачалоКонтрагентов);
		СтрокаХмл = СтрокаХмл + НачалоКонтрагентов;
		//Запоняем контрагентов привязанных к этому прайсу
		КодФилиала = "3"; //Затычка
		тзКонтрПрайс.ВыбратьСтроки();
		

		Пока тзКонтрПрайс.ПолучитьСтроку() = 1 Цикл
			Если Строка(тзКонтрПрайс.Прайс) = Прав(ИмяПрайса,СтрДлина(ИмяПрайса)-2) Тогда
				БлокКонтрагент = "<CUST_ID>" + КодФилиала + СокрЛП(тзКонтрПрайс.Контрагент.Код) + "</CUST_ID>" ;						
				Файл.ДобавитьСтроку(текКонтрагент);
				Файл.ДобавитьСтроку(БлокКонтрагент);
				Файл.ДобавитьСтроку(текКонтрагентФ);
				СтрокаХмл = СтрокаХмл + текКонтрагент;
				СтрокаХмл = СтрокаХмл + БлокКонтрагент;
				СтрокаХмл = СтрокаХмл + текКонтрагентФ;
			КонецЕсли;
		КонецЦикла;
		Файл.ДобавитьСтроку(ФиналКонтрагентов);
		СтрокаХмл = СтрокаХмл + ФиналКонтрагентов;
		
	КонецЦикла; //Для х = 2 По тзДинамика.КоличествоКолонок() Цикл
	
	Файл.ДобавитьСтроку(Финал);   	
	СтрокаХмл = СтрокаХмл + Финал;
	Попытка
		Файл.Записать(ИмяФайла); 
	Исключение
		Сообщить("Невозможно записать временный файл на диск!");
	КонецПопытки;	
	
	//Возврат Файл;
	Возврат СтрокаХмл;
	
КонецФункции


Процедура ПривязатьПрайсыККлиентам()
	
	Перем спрСкидка, ЕстьСкидка;
	
	спрСкидка = СоздатьОбъект("Справочник.Скидки");
	ЕстьСкидка = 0;
	
	
	тзКонтрПрайс.ВыбратьСтроки();
	Пока тзКонтрПрайс.ПолучитьСтроку() = 1 Цикл
		
		спрСкидка.ИспользоватьВладельца(тзКонтрПрайс.Контрагент.ТекущийЭлемент());
		спрСкидка.ВыбратьЭлементы();
		Пока спрСкидка.ПолучитьЭлемент() = 1 Цикл
			Если спрСкидка.ПометкаУдаления()= 0 Тогда
				ЗначениеСкидки = спрСкидка.СкидкаПоГруппе.Получить(ТекущаяДата());
				Если ЗначениеСкидки <> 0  Тогда
				//	Сообщить(Строка(тзКонтрПрайс.Контрагент) + "  -  " + Строка(ЗначениеСкидки));
					тзКонтрПрайс.УстановитьЗначение(тзКонтрПрайс.НомерСтроки,2,ЗначениеСкидки);
					ЕстьСкидка = 1;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСкидка = 0 Тогда
			Если (тзКонтрПрайс.Контрагент.ТипЦен = (Перечисление.ТипыРасхЦен.Розничные)) ИЛИ ((ПустоеЗначение(тзКонтрПрайс.Контрагент.ТипЦен) = 1)) Тогда
				тзКонтрПрайс.УстановитьЗначение(тзКонтрПрайс.НомерСтроки,2,"Розница");
			ИначеЕсли тзКонтрПрайс.Контрагент.ТипЦен = Перечисление.ТипыРасхЦен.Оптовые Тогда				
				тзКонтрПрайс.УстановитьЗначение(тзКонтрПрайс.НомерСтроки,2,"Опт");
			КонецЕсли;
		КонецЕсли;

		ЕстьСкидка = 0;
	КонецЦикла;
	
КонецПроцедуры


Процедура   ЗаполнитьПрайсЛисты()
	
	Перем Запрос, ТекстЗапроса;
	
	
	//текСкидка = СоздатьОбъект("Справочник.Скидки");
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ЗапросНоменклатура)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Номенклатура = Справочник.Номенклатура.ТекущийЭлемент;
	|РозничнаяЦена = Справочник.Номенклатура.РозничнаяЦена;
	|ОптоваяЦена = Справочник.Номенклатура.ОптоваяЦена;
	|БазоваяЕдиницаИзмерения = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|СтавкаНДС = Справочник.Номенклатура.СтавкаНДС;
	|КодАсумт = Справочник.Номенклатура.КодАсумт;
	|Условие (ПустоеЗначение(КодАсумт) = 0);
	|Условие(Номенклатура.ПринадлежитГруппе(ВыбГруппаНоменклатуры) = 1);
	|Группировка Номенклатура Без Групп;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Пока Запрос.Группировка(1) = 1 Цикл
		тзДинамика.НоваяСтрока();
		тзДинамика.Номенклатура = Запрос.Номенклатура;
		тзДинамика.к_Розница    = Запрос.РозничнаяЦена;
		тзДинамика.к_Опт        = Запрос.ОптоваяЦена;
		//			 Заполняем поля со скидками
		тзПрайсы.ВыбратьСтроки();
		Пока (тзПрайсы.ПолучитьСтроку() = 1)  Цикл
			Если тзПрайсы.Прайс <>  "Розница"Тогда
			
			//ЦенаСкидкаПоТовару=Окр(Запрос.РозничнаяЦена+Запрос.РозничнаяЦена*(тзПрайсы.ПолучитьЗначение(тзПрайсы.ТекущаяСтрока(тзПрайсы.НомерСтроки+1),2)/100),2);
			ЦенаСкидкаПоТовару=Окр(Запрос.РозничнаяЦена+Запрос.РозничнаяЦена*(тзПрайсы.ПолучитьЗначение(тзПрайсы.НомерСтроки,2)/100),2);
			тзДинамика.УстановитьЗначение(тзДинамика.НомерСтроки,тзПрайсы.НомерСтроки+1,ЦенаСкидкаПоТовару);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры


Функция ВыгрузитьПрайсЛистыИз1С()

	Перем Запрос, ТекстЗапроса, Таб;
	
	ТабЗначПрайсы = СоздатьОбъект("ТаблицаЗначений");
	ТабЗначПрайсы.НоваяКолонка("Прайс");
	ТабЗначПрайсы.НоваяКолонка("СкидкаПоПрайсу","Число",,,,,"ЧН=0",);
	ТабЗначПрайсы.НоваяКолонка("Вес","Число",,,,,,);
	
	
	
	ТабЗначКонтрагенты = СоздатьОбъект("ТаблицаЗначений");
	ТабЗначКонтрагенты.НоваяКолонка("Контрагент","Справочник.Контрагенты");
	ТабЗначКонтрагенты.НоваяКолонка("Прайс");
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Контрагенты = Справочник.Контрагенты.ТекущийЭлемент, Справочник.Скидки.Владелец;
	|ТипЦен = Справочник.Контрагенты.ТипЦен;
	|ОсновнойПрайсЛист = Справочник.Контрагенты.ОсновнойПрайсЛист;
	|Скидка = Справочник.Скидки.ТекущийЭлемент;
	|Группировка Контрагенты без групп;
	|Группировка Скидка;
	|Условие(Контрагенты.ПринадлежитГруппе(группаПокупатели) = 1);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Пока Запрос.Группировка(2) = 1 Цикл
			СкидкаПоГруппе = Запрос.Скидка.СкидкаПоГруппе.Получить(ТекущаяДата());
			Группа = Запрос.Скидка.ГруппаТовара;
			Если СкидкаПоГруппе <> 0 Тогда
				ТабЗначПрайсы.НоваяСтрока();
				ТабЗначПрайсы.СкидкаПоПрайсу = Число(СкидкаПоГруппе);
				ТабЗначПрайсы.Прайс = СкидкаПоГруппе;
				ТабЗначПрайсы.Вес = -1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	ТабЗначПрайсы.НоваяСтрока();
	ТабЗначПрайсы.СкидкаПоПрайсу = 0;
	ТабЗначПрайсы.Прайс = "Розница";
	ТабЗначПрайсы.Вес = 1;
	ТабЗначПрайсы.НоваяСтрока();
	ТабЗначПрайсы.СкидкаПоПрайсу = 0;
	ТабЗначПрайсы.Прайс = "Опт";
	ТабЗначПрайсы.Вес = -1;
	ТабЗначПрайсы.Свернуть("Прайс,СкидкаПоПрайсу,Вес","");
	ТабЗначПрайсы.Сортировать("Вес -,Прайс,СкидкаПоПрайсу ");
	ТабЗначПрайсы.Выгрузить(тзПрайсы);
	
	а ="";
	тзПрайсы.ВыбратьСтроки();
	Пока тзПрайсы.ПолучитьСтроку() = 1 Цикл
		а = СокрЛП(Строка(тзПрайсы.Прайс));
		а = СтрЗаменить(а,"-","минус");
		ТабЗначДинамика.НоваяКолонка("к_"+Строка(а));
	КонецЦикла;
	
	ТабЗначДинамика.Выгрузить(тзДинамика);
	
	ЗаполнитьПрайсЛисты();
	
	НаДату = ТекущаяДата();
	// Добавить принадлежность к группе!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Контраг)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Контрагент = Справочник.Контрагенты.ТекущийЭлемент;
	|Условие(Контрагент.ПринадлежитГруппе(группаПокупатели) = 1);
	|Условие (Контрагент.ПометкаУдаления() = 0);
	
	//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:48:08
	//	|КонтрагентВнешКод = Справочник.Контрагенты.is_Код;
	|КонтрагентВнешКод = Справочник.Контрагенты.Код;
	///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:48:08
	|Группировка Контрагент Без групп;
	|Группировка Контрагент без упорядочивания;
	|Условие(ПроверкаПустойРеквизит(КонтрагентВнешКод)=0);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		
		Контрагент = Запрос.Контрагент;
			//+Временная тестировочная заглушка		
			Если Контрагент<>0 Тогда // передан контрагент - грузим его прайс
				ТабЗначКонтрагенты.НоваяСтрока();
				ТабЗначКонтрагенты.Контрагент = Контрагент;
				ТабЗначКонтрагенты.Прайс = 0;
			КонецЕсли;
			ТабЗначКонтрагенты.Свернуть("Контрагент,Прайс","");
			ТабЗначКонтрагенты.Выгрузить(тзКонтрПрайс);
	КонецЦикла;
	
	ПривязатьПрайсыККлиентам();
	//ИтогХМЛ = СформитроватьХМЛ();
	ИтогХМЛ = СформитроватьТестовыйПрайсХМЛ();
	Возврат  ИтогХМЛ;
	
КонецФункции


//================================================================================================
Функция ПолучитьЧислоИзСтроки(Параметр)

	Возврат Число(стрЗаменить(Параметр,",",".")); 
	
КонецФункции

//================================================================================================
Функция ПроверкаПустойРеквизит(Код)

	//Если ТипЗначенияСтр(Код)="Строка" Тогда
		Возврат	ПустоеЗначение(Код);
	//Иначе
	//	Возврат -1;
	//КонецЕсли;	
	
КонецФункции //ПроверкаПустойРеквизит  

//================================================================================================
Функция ЕстьErrorMessage(Объект)
	
	Если ТипЗначенияСтр(Объект)="ТаблицаЗначений" Тогда
		Для СчПолей = 1 По Объект.КоличествоКолонок() Цикл            
			ИмяУзла = Объект.ПолучитьПараметрыКолонки(СчПолей);
			
			Если Врег(СокрЛП(ИмяУзла)) = "ERRORMESSAGE" Тогда
				Возврат 1;
			КонецЕсли;
		КонецЦикла;
		Возврат 0;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//СообщениеОбОшибке = СокрЛП(SOAP.SOAP_ПолучитьПараметр(Объект, "ErrorMessage"));
	//Если ПустаяСтрока(СообщениеОбОшибке) Тогда
	//	Возврат Ложь;
	//Иначе
	//	SOAP.СообщитьОшибка("ErrorMessage", СообщениеОбОшибке);
	//	Возврат Истина;
	//КонецЕсли;
КонецФункции

//================================================================================================
Функция ДатаВСтрокуПараметр(перемДата)
	Возврат Формат(перемДата,"Д ГГГГММДД");	
КонецФункции

//================================================================================================
Процедура ПриНачалеВыборазначения()
	Если Форма.АктивныйЭлемент() = "ИмяФайла" Тогда
		ИК = КаталогИБ();
		ИФ = "";
		ФС.ВыбратьФайл(0,ИФ,ИК,"Выберите файл...",,,100);
		ИмяФайла = ИК + ИФ;
	ИначеЕсли Форма.АктивныйЭлемент() = "ИмяФайла_Остатки" Тогда
		ИК = КаталогИБ();
		ИФ = "";
		ФС.ВыбратьФайл(0,ИФ,ИК,"Выберите файл...",,,100);
		ИмяФайла_Остатки = ИК + ИФ;
	КонецЕсли;
КонецПроцедуры

//================================================================================================
Процедура ДобавитьСтрокуВЛогФайл(СтрокаСообщения)
	_ЛогФайл.ДобавитьСтроку(СтрокаСообщения);
	Попытка
		_ЛогФайл.Записать(_ИмяЛогФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

//================================================================================================
Процедура ВывестиСообщение(ТекстСообщения, МаркерСообщения, ПотокВывода)
	ИнфоПрефикс = Строка(ТекущаяДата())+"      " +Строка(ТекущееВремя())+ "      " + Строка(ИмяКомпьютера()) + "  " + 	Строка(ИмяПользователя()) + " >>> ";
	СтрокаСообщения = ИнфоПрефикс + ТекстСообщения;
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Табло) Тогда
		Сообщить(СтрокаСообщения, МаркерСообщения);
	КонецЕсли;
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Файл) Тогда
		ДобавитьСтрокуВЛогФайл(СтрокаСообщения);
	КонецЕсли;
КонецПроцедуры

//================================================================================================
Процедура СообщитьОшибка(Ошибка, Комментарий = "", ПотокВывода = 0) 
	ТекстСообщения = Ошибка + "  " + Комментарий;
	ВывестиСообщение(ТекстСообщения, "!!!", ПотокВывода);
КонецПроцедуры

//================================================================================================
Процедура СообщитьОбычное(Сообщение, Комментарий = "", ПотокВывода = 0) 
	ТекстСообщения = Сообщение + "    " + Комментарий;
	ВывестиСообщение(ТекстСообщения, "Обычное", ПотокВывода);
КонецПроцедуры

//================================================================================================
Процедура СообщитьБезПрефикса(ТекстСообщения,МаркерСообщения,ПотокВывода = 0) 
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Табло) Тогда
		Сообщить(ТекстСообщения, МаркерСообщения);
	КонецЕсли;
	//Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Файл) Тогда
	//	ДобавитьСтрокуВЛогФайл(ТекстСообщения);
	//КонецЕсли;
КонецПроцедуры

//================================================================================================
Процедура ОткрытьЛогФайл()
	_ЛогФайл = СоздатьОбъект("Текст");
	Попытка
		_ЛогФайл.Открыть(_ИмяЛогФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

//================================================================================================
Процедура ПоказатьТЗ(Значение,Отступ)
	Если ТипЗначенияСтр(Значение)="ТаблицаЗначений" Тогда
        Для А = 1 По Значение.КоличествоСтрок() Цикл
            Для Т=1 по Значение.КоличествоКолонок() Цикл
                наим = Значение.ПолучитьПараметрыКолонки(Т);
                рез=Значение.ПолучитьЗначение(А,Т);
                Если ТипЗначенияСтр(рез)="ТаблицаЗначений" Тогда
                    Сообщить(Отступ+" "+наим+" >>> ");
                    ПоказатьТЗ(рез,Отступ+"     ");     
                Иначе               
                    Сообщить(Отступ+" "+наим+"="+Строка(рез));

                КонецЕсли;
            КонецЦикла;
        КонецЦикла;
	Иначе
		Сообщить(Значение);	
	КонецЕсли;
КонецПроцедуры

//================================================================================================
Функция SOAP(_Контекст)
	
	АдресФайлаБиблиотекиSOAP = АдресБиблиотекиSOAP+"SoapToolsV7.ert";
	Если ФС.СуществуетФайл(АдресФайлаБиблиотекиSOAP) = 1 Тогда
		ОткрытьФормуМодально("Отчет",_Контекст,АдресФайлаБиблиотекиSOAP);
		Возврат _Контекст;
	Иначе
		Сообщить("Библиотека SOAP не найдена!");
		Возврат "";
	КонецЕсли;	
	
КонецФункции 


//================================================================================================
//Контрагенты
//================================================================================================
Функция НайтиКонтрагентаПоКоду1С(Код1С)
    СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	ВыборкаКонтрагентов = СоздатьОбъект("ТаблицаЗначений");
	ВыборкаКонтрагентов.НоваяКолонка("Контрагент");
	Если СпрКонтрагенты.НайтиПоКоду(Код1С,0) = 1 Тогда
		Возврат СпрКонтрагенты.ТекущийЭлемент();
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции	

//================================================================================================
Функция НайтиКонтрагентаПоКодуiSales_(КодiSales)
	СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	ВозвратитьК = СоздатьОбъект("Справочник.Контрагенты");
	
	НайденоКонтрагентов = 0;

	//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 15:10:33
	//	СпрКонтрагенты.ВыбратьЭлементыПоРеквизиту("is_Код",КодiSales,0,0);
	СпрКонтрагенты.ВыбратьЭлементыПоРеквизиту("Код", прав(КодiSales,СтрДлина(КодiSales)-1));
	///Пашков К.В.@РегионПродОптТорг, 2016-09-07 15:10:33

	Пока СпрКонтрагенты.ПолучитьЭлемент() = 1 Цикл
		НайденоКонтрагентов = НайденоКонтрагентов + 1;
		//ВыборкаТоваров.НоваяСтрока();
		//ВыборкаТоваров.Товар = СпрНом.ТекущийЭлемент();
		ВозвратитьК = СпрКонтрагенты.ТекущийЭлемент();
	КонецЦикла;
	
	Если НайденоКонтрагентов = 1 Тогда
		Возврат ВозвратитьК;
	Иначе
		Возврат НайденоКонтрагентов;
	КонецЕсли;
КонецФункции	


Функция НайтиКонтрагентаПоКодуiSales(КодiSales)
	СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	ВозвратитьК = СоздатьОбъект("Справочник.Контрагенты");
	
	НайденоКонтрагентов = 0;

	тКод = прав(КодiSales,СтрДлина(КодiSales)-1);

	
	Если СпрКонтрагенты.НайтиПоКоду(тКод) = 1 Тогда
		Возврат  СпрКонтрагенты.ТекущийЭлемент();
	Иначе
		Сообщить("Не найден контрагент с кодом - " + СокрЛП(тКод));
		Возврат ВозвратитьК;
	КонецЕсли; 
	
	
	
	//Запрос = СоздатьОбъект("Запрос");
	//ТекстЗапроса = 
	//"//{{ЗАПРОС(Сформировать)
	//|ТекущийЭлемент = Справочник.Контрагенты.ТекущийЭлемент;
	//|Код = Справочник.Контрагенты.Код;
	//|Группировка ТекущийЭлемент без групп;
	//|Условие(Код = тКод);
	//|"//}}ЗАПРОС
	//;
	//// Если ошибка в запросе, то выход из процедуры
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	Возврат ВозвратитьК;
	//КонецЕсли;
	//
	//Пока Запрос.Группировка(1) = 1 Цикл
	//	Возврат Запрос.ТекущийЭлемент;
	//КонецЦикла;
		
	
КонецФункции	


//================================================================================================
Функция ОбновитьКонтрагента(ТЗКонтрагент,КонтрагентВнешнийКод,КонтрагентКод)
	
	Возврат 1;
	
КонецФункции	

//================================================================================================
// ЗаписьОснДоговора()
//
// Параметры:
//
// Возвращаемое значение:
//  1 - запись произведена.
//  0 - запись не произведена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет запись основного договора.
//
Функция ЗаписьОснДоговора(ДляКонтрагента)
	
	// Объект для записи основного счета.
	Объект = СоздатьОбъект("Справочник.Договоры");
	
	//Если Объект.НайтиЭлемент(ОсновнойДоговор) = 0 Тогда
		Объект.Новый();
		Объект.Владелец = ДляКонтрагента;
	//КонецЕсли;
		
	// Заполнение реквизитов слоя "ОсновнойДоговор".
	Объект.Наименование           = "Основной договор";
	Объект.ВалютаВзаиморасчетов   = "";//глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");
	Объект.ТипЦен                 = ТипЦенДистриб;
	
	// faa!
	//Объект.Скидка               = Скидка;
	Объект.ГлубинаКредита         = 0;
	Объект.СуммаКредита           = 0;
	Объект.НеКонтролироватьКредит = 0; 
	//---КТ-2000-(095)789-3070----------Алексей--------------947
	//Объект.ФиксироватьКурсЗадолжностей = ФиксироватьКурсЗадолжностей;
	//---КТ-2000-(095)789-3070----------Алексей--------------947
	// faa!
	
	Объект.Записать();
	
	// Установка основного договора.
	ДляКонтрагента.ОсновнойДоговор = Объект.ТекущийЭлемент();
	
	Возврат 1;
	
КонецФункции // ЗаписьОснДоговора()

//================================================================================================
Функция СоздатьКонтрагента(ТЗКонтрагент,КонтрагентВнешнийКод,КонтрагентКод,ЮрФизЛицо)
	
	НовыйКонтрагент = СоздатьОбъект("Справочник.Контрагенты");
	
	КонтрагентНаименование = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"NAME")); 
	КонтрагентКраткоеНаименование = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"SNAME")); 
	
	КонтрагентПочта = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"EMAIL")); 
	КонтрагентКомментарий = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"COMMS")); 
	
	// запись элемента ========================
	НовыйКонтрагент.Новый();
	
	Если ПустоеЗначение(ВыбГруппаКонтрагентов) = 0 Тогда
		НовыйКонтрагент.Родитель = ВыбГруппаКонтрагентов;
	КонецЕсли;	
	
	//Если ЗагрузитьКонтрагентовСКодами = 1 Тогда
	//	НовыйКонтрагент.Код = КонтрагентКод;
	//КонецЕсли;	
	
	//{{ Агент+, 2005г.
//	НовыйКонтрагент.Идентификатор = глАПСоздатьИдентификатор();
	//}} Агент+, 2005г.
	
	НовыйКонтрагент.is_Код			= КонтрагентВнешнийКод;
	НовыйКонтрагент.Наименование	= КонтрагентКраткоеНаименование;
	
	НовыйКонтрагент.ЮрФизЛицо   	= ЮрФизЛицо.ТекущийЭлемент();

	НовыйКонтрагент.ЭлПочта     	= КонтрагентПочта;
	НовыйКонтрагент.Комментарий 	= КонтрагентКомментарий;
	
	НовыйКонтрагент.Записать();
	// ======================== запись элемента
	
	// TODO: создать основной договор с привязкой к агенту офис
	ЗаписьОснДоговора(НовыйКонтрагент);	
	
	Возврат НовыйКонтрагент;

КонецФункции

//================================================================================================
Функция СоздатьНовоеФизЛицо(Наименование,ИНН,Телефоны,ДокументУдостоверяющийЛичность,Комментарий)
	
	НовоеФизЛицо = СоздатьОбъект("Справочник.ФизЛица");
	НовоеФизЛицо.Новый();
	НовоеФизЛицо.Наименование		= Наименование; 
	НовоеФизЛицо.ПолнНаименование	= Наименование;
	НовоеФизЛицо.ИНН				= ИНН;
	НовоеФизЛицо.Телефоны			= Телефоны;
	НовоеФизЛицо.ДокументУдЛичность	= ДокументУдостоверяющийЛичность;
	НовоеФизЛицо.Комментарий		= Комментарий;
	
	//НовоеФизЛицо.ЮрАдрес			= ЮрАдрес;
	//НовоеФизЛицо.ФактАдрес		= ФактАдрес;  

	НовоеФизЛицо.Записать();
	
	Возврат НовоеФизЛицо;
	
КонецФункции

//================================================================================================
Функция СоздатьНовоеЮрЛицо(Наименование,ИНН,Телефоны,ОКПО,Комментарий)
	
	НовоеЮрЛицо = СоздатьОбъект("Справочник.ЮрЛица");
	НовоеЮрЛицо.Новый();
	НовоеЮрЛицо.Наименование	  = Наименование; 
	НовоеЮрЛицо.ПолнНаименование  = Наименование;
	НовоеЮрЛицо.ИНН               = ИНН;
	НовоеЮрЛицо.Телефоны          = Телефоны;
	НовоеЮрЛицо.ОКПО              = ОКПО;
	НовоеЮрЛицо.Комментарий       = Комментарий;
	
	//НовоеЮрЛицо.ЮрАдрес		  = ЮрАдрес;
	//НовоеЮрЛицо.ФактАдрес		  = ФактАдрес;  
	
	НовоеЮрЛицо.Записать();
	
	Возврат НовоеЮрЛицо;
	
КонецФункции

//================================================================================================
Процедура ПолучитьКонтрагентов()
			
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	Значения.ДобавитьЗначение("1");
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "AccountsTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	
	ОтветОтСервера = _Контекст;
	
	СообщитьОбычное("Данные AccountsTransfer получены",,ПотокВывода_Табло);
	
	тзКонтрагенты = СоздатьОбъект("ТаблицаЗначений");
	
	тзКонтрагенты.НоваяКолонка("ТипКонтрагента");
	тзКонтрагенты.НоваяКолонка("Код");
	тзКонтрагенты.НоваяКолонка("ВнешнийКод");
	тзКонтрагенты.НоваяКолонка("Наименование");
	тзКонтрагенты.НоваяКолонка("Вывеска");
	тзКонтрагенты.НоваяКолонка("НаименованиеПолное");
	тзКонтрагенты.НоваяКолонка("КодГП");
	тзКонтрагенты.НоваяКолонка("КодГПВнешний");
	тзКонтрагенты.НоваяКолонка("ИНН");
	тзКонтрагенты.НоваяКолонка("КПП");
	тзКонтрагенты.НоваяКолонка("ЮрФизЛицо");
	тзКонтрагенты.НоваяКолонка("ДокументУдостоверяющийЛичность");
	тзКонтрагенты.НоваяКолонка("Комментарий");
	тзКонтрагенты.НоваяКолонка("ОКОНХ");
	тзКонтрагенты.НоваяКолонка("ОКВЭД");
	тзКонтрагенты.НоваяКолонка("ОКПО");
	тзКонтрагенты.НоваяКолонка("ОГРН");
	тзКонтрагенты.НоваяКолонка("EMAIL");
	тзКонтрагенты.НоваяКолонка("Адреса");
	тзКонтрагенты.НоваяКолонка("Телефоны");

	ПоказатьТЗ(ОтветОтСервера,"");
    
	// проверка на ошибки: есть данные/нет
	// Проверка ЕстьErrorMessage(ОтветОтСервера)
	//Если ОтветОтСервера Тогда
	//	Сообщить("Нет данных");
	//	Возврат;
	//КонецЕсли;
	
	Для СчетчикКонтрагентов = 1 По ОтветОтСервера.КоличествоСтрок() Цикл
		
		// ТЗ с данными текущего контрагента
		ТЗКонтрагент = ОтветОтСервера.ПолучитьЗначение(СчетчикКонтрагентов,"ACCOUNT");
		
		// Коды контрагента
	    КонтрагентВнешнийКод = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"SFA_ID"));
		КонтрагентКод = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"ACC_ID")); 
		
		КонтрагентНаименование = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"NAME"));
		КонтрагентКомментарии = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"COMMS"));
		КонтрагентПаспорт = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"PASSPORT"));
		КонтрагентОКПО = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"OKPO"));
		
		//ИНН для определения типа контрагента
		КонтрагентИНН = СокрЛП(ТЗКонтрагент.ПолучитьЗначение(1,"INN")); 
		Если СтрДлина(КонтрагентИНН) = 12 Тогда
	        флКонтрагентФизЛицо = 1;	
		Иначе
            флКонтрагентФизЛицо = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////
		// TODO: вернуть код как было, с разными кодами 1с и is 
		
	    // Проверяем заполнен ли код 1С у контраг 
		Если ПустоеЗначение(КонтрагентКод) = 1 Тогда  // Код 1с НЕ заполнен
			
			//Проверяем есть ли контрагент с таким кодом iSales
			Контраг = НайтиКонтрагентаПоКодуiSales(КонтрагентВнешнийКод);
			
			Если ТипЗначенияСтр(Контраг)="Число" Тогда
				//Если не нашли контрагента с таким кодом iSales,
				Если Контраг = 0 Тогда
					//Если флагСоздаватьНовыхКонтрагентов = 1 Тогда
						НачатьТранзакцию();
						// Создаем нового контрагента в отдельной папке ""
						Если флКонтрагентФизЛицо = 1 Тогда
						    ЮрФизЛицо = СоздатьНовоеФизЛицо(КонтрагентНаименование, КонтрагентИНН, "", КонтрагентПаспорт, КонтрагентКомментарии);
						Иначе
						    ЮрФизЛицо = СоздатьНовоеЮрЛицо(КонтрагентНаименование, КонтрагентИНН, "", КонтрагентОКПО, КонтрагентКомментарии);
						КонецЕсли;
						
						Контраг = СоздатьКонтрагента(ТЗКонтрагент,КонтрагентВнешнийКод,КонтрагентКод,ЮрФизЛицо);
					    ЗафиксироватьТранзакцию();
						СообщитьОбычное("Создан новый контрагент "+ Контраг.Наименование,,ПотокВывода_ТаблоФайл);
					//КонецЕсли;
				Иначе
					СообщитьОшибка("Существует несколько контрагентов с кодом iSales '"+КонтрагентВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;
			//Если нашли 1 элемент с таким кодом iSales, пишем в ошибку, пропускаем	
			Иначе
				СообщитьОшибка("Контрагент с кодом iSales '"+КонтрагентВнешнийКод+"' -- не проставлено соответствие!" ,,ПотокВывода_ТаблоФайл);
				Продолжить;
			КонецЕсли;
		
		ИначеЕсли (КонтрагентКод)<>(КонтрагентВнешнийКод) Тогда
		
			СообщитьОшибка("ОШИБКА! Элемент спр.Контрагенты: Код 1с'"+КонтрагентКод+"' и Код iSales'"+КонтрагентВнешнийКод+"' не совпадают!!!" ,,ПотокВывода_ТаблоФайл);
			Продолжить;
			
		Иначе // код 1с ЗАПОЛНЕН
			
			//Проверяем есть ли контрагент с таким кодом
			Контраг = НайтиКонтрагентаПоКодуiSales(КонтрагентКод);
			
			Если ТипЗначенияСтр(Контраг)="Число" Тогда
				
				//Если не нашли ни одного - ищем соответствие по коду iSales, пишем в ошибку, пропускаем.
				Если Контраг = 0 Тогда
					
					//Ищем по коду iSales для выяснения причины ошибки
					Контраг2 = НайтиКонтрагентаПоКодуiSales(КонтрагентВнешнийКод);
					Если ТипЗначенияСтр(Контраг2)="Число" Тогда
						//Если не нашли контрагента с таким кодом iSales,
						Если Контраг2 = 0 Тогда
							СообщитьОшибка("ОШИБКА! Для элемента спр.'Контрагенты' с кодом 1С: [" + КонтрагентКод + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
						Иначе // нашли > 1 элементов Контраг2
							СообщитьОшибка("Существует несколько контрагентов с кодом iSales '"+КонтрагентВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
							Продолжить;
					    КонецЕсли;
					Иначе // нашли 1 элемент Контраг2
						СообщитьОшибка("ОШИБКА! Для элемента спр.'Контрагенты' с кодом iSales: [" + КонтрагентВнешнийКод + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
					КонецЕсли;
					
				Иначе // нашли > 1
					СообщитьОшибка("ОШИБКА! В спр.'Контрагенты' найдено более одной записи с кодом 1C: [" + КонтрагентКод + "]!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;

			Иначе //Если нашли 1 элемент с таким кодом КонтрагентКод
                
				// доп проверка закоммент. - т.к. проверялось условие (КонтрагентКод)<>(КонтрагентВнешнийКод)
				ОбновитьКонтрагента(ТЗКонтрагент,КонтрагентВнешнийКод,КонтрагентКод);
				
			КонецЕсли;

		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры


//================================================================================================
//Номенклатура
//================================================================================================
Процедура ПолучитьТаблицуНоменклатуры(ТаблицаСДанными,НомСтроки=0)
	
	Перем Б;
	
	Для Б = 1 По ТаблицаСДанными.КоличествоСтрок() Цикл	
		Для Н = 1 по ТаблицаСДанными.КоличествоКолонок() Цикл
	
			ИмяУзла = ТаблицаСДанными.ПолучитьПараметрыКолонки(Н);
			СодержимоеУзла = ТаблицаСДанными.ПолучитьЗначение(Б,Н);
			//Смотрим что содержится в узле
			Если ТипЗначенияСтр(СодержимоеУзла) = "ТаблицаЗначений" Тогда
			    
				//Спускаемся на уровень ниже	
				
				// Новый продукт
				Если Врег(СокрЛП(ИмяУзла)) = "PRODUCT" Тогда
				    ТзНоменклатура.НоваяСтрока();
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла,Б);
				КонецЕсли;
				
				// Сертификаты
				Если Врег(СокрЛП(ИмяУзла)) = "CERTS" Тогда
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла,НомСтроки);
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "CERT" Тогда
					тзНомСертификаты.НоваяСтрока();
					тзНомСертификаты.НомСсылка = НомСтроки;
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла);
				КонецЕсли;
				
				// Ед.изм.
				Если Врег(СокрЛП(ИмяУзла)) = "UOMS" Тогда
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла,НомСтроки);
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "UOM" Тогда
					тзНомЕдиницы.НоваяСтрока();
					тзНомЕдиницы.НомСсылка = НомСтроки;
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла);
				КонецЕсли;
				
				// Конв.
				Если Врег(СокрЛП(ИмяУзла)) = "CONVS" Тогда
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла,НомСтроки);
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "CONV" Тогда
					тзНомКонвертация.НоваяСтрока();
					тзНомКонвертация.НомСсылка = НомСтроки;
					ПолучитьТаблицуНоменклатуры(СодержимоеУзла);
				КонецЕсли;
				
				
			Иначе
				
				// убираем лишние пробелы
				СодержимоеУзла = СокрЛП(Строка(СодержимоеУзла));
				
				// Конв.
				Если Врег(СокрЛП(ИмяУзла)) = "FROM" Тогда // Код ЕИ в 1С. Из какой конвертируем. строка(100)
					тзНомКонвертация.КодИз = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "TO_" Тогда // Код ЕИ в 1С. В какую конвертируем. строка(100)
					тзНомКонвертация.КодВ = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "FACTOR" Тогда // Коэффициент строка(9)
					тзНомКонвертация.Коэффициент = СодержимоеУзла; 
				КонецЕсли;
				/// Конв.   
				
				
				// Для серт.
				Если Врег(СокрЛП(ИмяУзла)) = "ID" Тогда // Наименование сертификата  строка(30)
					тзНомСертификаты.НазваниеСерт = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "DT_FR" Тогда // Дата от. Формат - ДД.ММ.ГГГГ    строка(10)
					тзНомСертификаты.Дата1 = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "DT_TO" Тогда // Дата до. Формат - ДД.ММ.ГГГГ    строка(10)
					тзНомСертификаты.Дата2 = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "GIVEN" Тогда // Кто выдал сертификат     строка(200)
					тзНомСертификаты.КтоВыдал = СодержимоеУзла;
				КонецЕсли;
				/// Для серт.
					
	
				// Для ед.изм.
				Если Врег(СокрЛП(ИмяУзла)) = "UOM_ID" Тогда // Код ЕИ из 1С  строка(100)
					тзНомЕдиницы.КодЕИ = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "WI" Тогда // Ширина,см    строка(5)
					тзНомЕдиницы.ШиринаСм = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "HE" Тогда // Высота,см    строка(5)
					тзНомЕдиницы.ВысотаСм = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "LE" Тогда // Длина,см     строка(5)
					тзНомЕдиницы.ДлинаСм = СодержимоеУзла; 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "WE" Тогда // Вес нетто,кг     строка(8)
					тзНомЕдиницы.ВесНетто = ПолучитьЧислоИзСтроки(СодержимоеУзла); 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "WEB" Тогда // Вес брутто,кг     строка(8)
					тзНомЕдиницы.ВесБрутто = ПолучитьЧислоИзСтроки(СодержимоеУзла); 
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "BAR" Тогда // Штрих-код     строка(13)
					тзНомЕдиницы.ШтрихКод = СодержимоеУзла; 
				КонецЕсли;
				/// Для ед.изм.
				
				
				//Если нашли узел ErrorMessage, - во время выполнения запроса произошла ошибка
				Если Нрег(СокрЛП(ИмяУзла)) = "errormessage" Тогда
					СообщитьОшибка(Строка(СодержимоеУзла),,ПотокВывода_ТаблоФайл);
					ТзНоменклатура.Очистить();
					Прервать;
			    //Записываем значение в таблицу
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "PROD_TYPE" Тогда // Тип продукта (СКЮ, холодильник, стойка…)
					ТзНоменклатура.ТипПродукта = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "SFA_PRD_ID" Тогда // Код продукта в iSales
					ТзНоменклатура.ВнешнийКод = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "ACC_PRD_ID" Тогда // Код продукта 1С
					ТзНоменклатура.Код = СодержимоеУзла;	
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "FL_NM" Тогда // Полное название строка(100)
					ТзНоменклатура.ПолнНаименование  = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "BF_NM" Тогда // Краткое название строка(40)
					ТзНоменклатура.КПКНаименование  = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "VAT" Тогда // Ставка НДС (в %)   строка(4)
					ТзНоменклатура.СтавкаНДС  = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "MIN_UOM" Тогда // Минимальная ЕИ - код 1С
					ТзНоменклатура.МинимальнаяЕИ  = СодержимоеУзла;
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "COUNTRY_PRODUCER" Тогда // Страна-производитель
					ТзНоменклатура.СтранаПроизводитель  = СодержимоеУзла; // строка(25)
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "CUSTOMS_DECLARATION" Тогда // № таможенной декларации
					ТзНоменклатура.НомерТаможеннойДекларации  = СодержимоеУзла; // строка(25)
				ИначеЕсли Врег(СокрЛП(ИмяУзла)) = "VALID" Тогда // Активный (производится и продается) или нет. Значение - одинаково для всех дистров.
					// Активный = 0, Неактивный = 1
					ТзНоменклатура.Активный  = СодержимоеУзла; // 1 или 0
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
			
	
КонецПроцедуры	

//================================================================================================
Функция НайтиТоварПоКоду(КодТовара)
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	Если СпрНом.НайтиПоКоду(КодТовара,0) = 1 Тогда
		Возврат СпрНом.ТекущийЭлемент();
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции
//================================================================================================
Функция НайтиТоварПоКодуiSales_(КодiSales)
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	
	ВозвратитьТовар = СоздатьОбъект("Справочник.Номенклатура");
	
	//ВыборкаТоваров = СоздатьОбъект("ТаблицаЗначений");
	//ВыборкаТоваров.НоваяКолонка("Товар");
	НайденоТоваров = 0;
	СпрНом.ВыбратьЭлементыПоРеквизиту("is_Код",КодiSales,0,0);
	Пока СпрНом.ПолучитьЭлемент() = 1 Цикл
		НайденоТоваров = НайденоТоваров + 1;
		//ВыборкаТоваров.НоваяСтрока();
		//ВыборкаТоваров.Товар = СпрНом.ТекущийЭлемент();
		ВозвратитьТовар = СпрНом.ТекущийЭлемент();
	КонецЦикла;
	
	Если НайденоТоваров = 1 Тогда
		Возврат ВозвратитьТовар;
	Иначе
		Возврат НайденоТоваров;
	КонецЕсли;
	
КонецФункции

Функция НайтиТоварПоКодуiSales(КодiSales)
	// Создаем объект - базу данных
Попытка
    база = СоздатьОбъект("SQLiteBase");
Исключение
    ЗагрузитьВнешнююКомпоненту("1sqlite.dll");
    база = СоздатьОбъект("SQLiteBase");
КонецПопытки;
тз = СоздатьОбъект("ТаблицаЗначений");
спрНом = СоздатьОбъект("Справочник.Номенклатура");
тКод = КодiSales;

// Откроем пустую базу данных в памяти
база.Открыть(":memory:");
// Создадим выполнитель запросов.
запрос = база.НовыйЗапрос();
// Так как база в памяти, то журналирование нам ни к чему, только зря будет отнимать время
запрос.ВыполнитьЗапрос("PRAGMA journal_mode = OFF");
// Подключим таблицу справочника товаров к SQLite
запрос.ВыполнитьЗапрос("create virtual table Товары using dbeng(Справочник.Номенклатура)");
// А выбор номенклатуры с нужным кодом КодiSales
запрос.Подставлять("тКод", тКод);
тз = запрос.ВыполнитьЗапрос("select CODE from Товары where Товары.КодАсумт = :тКод");
Если тз.КоличествоСтрок()> 0 Тогда

спрНомКод = тз.ПолучитьЗначение(1, 1);

Если спрНом.НайтиПоКоду(спрНомКод) = 1 Тогда
	Возврат спрНом.ТекущийЭлемент();
Иначе
	Возврат  спрНом;
КонецЕсли;
КонецЕсли;
	Возврат  спрНом;
		
	
КонецФункции



//================================================================================================
Функция УстановитьЕдИзмТовара(Товар,тзЕд,тзКонв)
	
	тзЕд.ВыбратьСтроки();
	Пока тзЕд.ПолучитьСтроку()=1 Цикл
	
		ИдентификаторЕдИзм = СокрЛП(тзЕд.КодЕИ);
		ШиринаЕдИзм        = Число(тзЕд.ШиринаСм);
		ВысотаЕдИзм        = Число(тзЕд.ВысотаСм);
		ДлинаЕдИзм         = Число(тзЕд.ДлинаСм);
		ОбъемЕдИзм         = ШиринаЕдИзм * ВысотаЕдИзм * ДлинаЕдИзм / 1000.0;
		ВесЕдИзм           = Число(тзЕд.ВесБрутто);
		ВесНеттоЕдИзм      = Число(тзЕд.ВесНетто);
		ШтрихКодЕдИзм      = СокрЛП(тзЕд.ШтрихКод);
		КоэффициентЕдИзм   = 1;
		
		тзКонв.ВыбратьСтроки();
		Пока тзКонв.ПолучитьСтроку()=1 Цикл
			Откуда      = СокрЛП(тзКонв.КодИз);
			Куда        = СокрЛП(тзКонв.КодВ);
			Коэффициент = Число(тзКонв.Коэффициент);
			Если (Откуда = ИдентификаторЕдИзм) И (Куда = сИдЕдИзмШт) Тогда
				КоэффициентЕдИзм = Коэффициент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		//сИдЕдИзмШт
		//сИдЕдИзмУп
		//сИдЕдИзмРк
		
		СпрЕдиницы   = СоздатьОбъект("Справочник.Единицы");
		СпрОКЕИ   = СоздатьОбъект("Справочник.ОКЕИ");
		Если СпрОКЕИ.НайтиПоКоду(ИдентификаторЕдИзм, 0) = 1 Тогда
			//Если СпрОКЕИ.Выбран() = 1 Тогда
				СпрЕдиницы.ИспользоватьВладельца(Товар);
				СпрЕдиницы.Новый();
				//СпрЕдиницы.Наименование = "";
				СпрЕдиницы.ОКЕИ = СпрОКЕИ.ТекущийЭлемент();
				СпрЕдиницы.Вес = ВесЕдИзм;
				СпрЕдиницы.Коэффициент = КоэффициентЕдИзм;
				СпрЕдиницы.Штрихкод = ШтрихКодЕдИзм;
				
				СпрЕдиницы.Записать();
				//Если СпрЕдиницы.Выбран() = 1 Тогда
				Если ИдентификаторЕдИзм = сИдЕдИзмШт Тогда
					Товар.БазоваяЕдиница = СпрЕдиницы.ТекущийЭлемент();
				КонецЕсли;
				Если ИдентификаторЕдИзм = сИдЕдИзмУп Тогда
					Товар.ОсновнаяЕдиница = СпрЕдиницы.ТекущийЭлемент();
				КонецЕсли;
				//КонецЕсли;
			//КонецЕсли;
		Иначе
			Сообщить("Идентификатор единицы измерения "+ИдентификаторЕдИзм+" у "+СокрЛП(Товар.Наименование)+" не найден!");	
		КонецЕсли;
		
	КонецЦикла;
	
	Товар.Записать();
	
	Возврат 1;
	
КонецФункции // УстановитьЕдИзмТовара(Товар) 

//================================================================================================
Функция ОпределитьСтавкуНДС(ВеличинаСтавкиНДС)
	
	Если ВеличинаСтавкиНДС="0" Тогда
		Возврат Перечисление.СтавкиНДС.БезНДС;
	ИначеЕсли ВеличинаСтавкиНДС="10" Тогда
		Возврат Перечисление.СтавкиНДС.НДС10;
	ИначеЕсли ВеличинаСтавкиНДС="18" Тогда
		Возврат Перечисление.СтавкиНДС.НДС18;
	ИначеЕсли ВеличинаСтавкиНДС="20" Тогда
		Возврат Перечисление.СтавкиНДС.НДС20;
	Иначе
		Возврат Перечисление.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецФункции // ОпределитьСтавкуНДС(ВеличинаСтавкиНДС) 

//================================================================================================
Функция ОбновитьТовар (_ЭлементНоменклатура,Код,ВнешнийКод,ТипПродукта,ПолнНаименование,КПКНаименование,
	СтавкаНДС,МинимальнаяЕИ,СтранаПроизводитель,НомерТаможеннойДекларации,Активный,НомСтрокиНом)
    
	ЭлементНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
	ЭлементНоменклатура.НайтиЭлемент(_ЭлементНоменклатура);
	
	БылиИзменения = 0;
    
	_ПолнНаименование = ПолнНаименование;
	Если СокрЛП(ЭлементНоменклатура.ПолнНаименование) <> _ПолнНаименование Тогда
		ЭлементНоменклатура.ПолнНаименование = _ПолнНаименование;
		БылиИзменения = 1;
		СообщитьОбычное("Изменено 'Полное наименование' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	КонецЕсли;
	
	//_ПолнНаименование = ПолнНаименование;
	//Если СокрЛП(ЭлементНоменклатура.Наименование) <> _ПолнНаименование Тогда
	//	ЭлементНоменклатура.Наименование = _ПолнНаименование;
	//	БылиИзменения = 1;
	//	СообщитьОбычное("Изменено 'Наименование' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	//КонецЕсли;
	
	_КПКНаименование = КПКНаименование;
	Если СокрЛП(ЭлементНоменклатура.КПКНаименование) <> _КПКНаименование Тогда
		ЭлементНоменклатура.КПКНаименование = _КПКНаименование;
		БылиИзменения = 1;
		СообщитьОбычное("Изменено 'КПКНаименование' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	КонецЕсли;
	
	_СтавкаНДС = ОпределитьСтавкуНДС(СтавкаНДС);
	Если ЭлементНоменклатура.СтавкаНДС <> _СтавкаНДС Тогда
		ЭлементНоменклатура.СтавкаНДС = _СтавкаНДС;
		БылиИзменения = 1;
		СообщитьОбычное("Изменено 'СтавкаНДС' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	КонецЕсли;
	
	_ВнешнийКод = ВнешнийКод;
	Если СокрЛП(ЭлементНоменклатура.is_Код) <> _ВнешнийКод Тогда
		ЭлементНоменклатура.is_Код = _ВнешнийКод;
		БылиИзменения = 1;
		СообщитьОбычное("Изменено 'is_Код' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	КонецЕсли;
	
	_Активный = Число(Активный);
	Если ЭлементНоменклатура.is_Неактивный <> _Активный Тогда
		ЭлементНоменклатура.is_Неактивный = _Активный;
		БылиИзменения = 1;
		СообщитьОбычное("Изменено 'is_Неактивный' для элемента справочника 'Номенклатура'. Код [" + ЭлементНоменклатура.Код + "];",,ПотокВывода_ТаблоФайл);
	КонецЕсли;
	
	Если БылиИзменения = 1 Тогда
		ЭлементНоменклатура.Записать();
	КонецЕсли;
	
КонецФункции // ОбновитьТовар()

//================================================================================================
Функция СоздатьТовар (Код,ВнешнийКод,ТипПродукта,ПолнНаименование,КПКНаименование,
	СтавкаНДС,МинимальнаяЕИ,СтранаПроизводитель,НомерТаможеннойДекларации,Активный,НомСтрокиНом)
    
	тзВыборкаНомЕдиницы = "";
	тзВыборкаНомЕдиницы = СоздатьОбъект("ТаблицаЗначений");
	тзВыборкаНомЕдиницы.НоваяКолонка("КодЕИ");//,"Строка",100);
	тзВыборкаНомЕдиницы.НоваяКолонка("ШиринаСм");//,"Строка",5);
	тзВыборкаНомЕдиницы.НоваяКолонка("ВысотаСм");//,"Строка",5);
	тзВыборкаНомЕдиницы.НоваяКолонка("ДлинаСм");//,"Строка",5);
	тзВыборкаНомЕдиницы.НоваяКолонка("ВесНетто");//,"Строка",8);
	тзВыборкаНомЕдиницы.НоваяКолонка("ВесБрутто");//,"Строка",8);
	тзВыборкаНомЕдиницы.НоваяКолонка("ШтрихКод");//,"Строка",13);
	
	тзНомЕдиницы.ВыбратьСтроки();
	Пока тзНомЕдиницы.ПолучитьСтроку()=1 Цикл
		Если тзНомЕдиницы.НомСсылка=НомСтрокиНом Тогда
			тзВыборкаНомЕдиницы.НоваяСтрока();
			тзВыборкаНомЕдиницы.КодЕИ = тзНомЕдиницы.КодЕИ;
			тзВыборкаНомЕдиницы.ШиринаСм = тзНомЕдиницы.ШиринаСм;
			тзВыборкаНомЕдиницы.ВысотаСм = тзНомЕдиницы.ВысотаСм;
			тзВыборкаНомЕдиницы.ДлинаСм = тзНомЕдиницы.ДлинаСм;
			тзВыборкаНомЕдиницы.ВесНетто = тзНомЕдиницы.ВесНетто;
			тзВыборкаНомЕдиницы.ВесБрутто = тзНомЕдиницы.ВесБрутто;
			тзВыборкаНомЕдиницы.ШтрихКод = тзНомЕдиницы.ШтрихКод;
		ИначеЕсли тзНомЕдиницы.НомСсылка > НомСтрокиНом Тогда
		    Прервать;
		КонецЕсли;
	КонецЦикла;
	
	тзВыборкаКонв = "";
	тзВыборкаКонв = СоздатьОбъект("ТаблицаЗначений");
	тзВыборкаКонв.НоваяКолонка("КодИз");//,"Строка",100);
	тзВыборкаКонв.НоваяКолонка("КодВ");//,"Строка",100);
	тзВыборкаКонв.НоваяКолонка("Коэффициент");//,"Строка",9);
	
	тзНомКонвертация.ВыбратьСтроки();
	Пока тзНомКонвертация.ПолучитьСтроку()=1 Цикл
		Если тзНомКонвертация.НомСсылка=НомСтрокиНом Тогда
			тзВыборкаКонв.НоваяСтрока();
			тзВыборкаКонв.КодИз = тзНомКонвертация.КодИз;
			тзВыборкаКонв.КодВ = тзНомКонвертация.КодВ;
			тзВыборкаКонв.Коэффициент = тзНомКонвертация.Коэффициент;
		ИначеЕсли тзНомКонвертация.НомСсылка > НомСтрокиНом Тогда
		    Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	спрНовыйТовар = СоздатьОбъект("Справочник.Номенклатура");
	
	спрНовыйТовар.Новый();
	
	//{{ Агент+, 2005г.
//	спрНовыйТовар.Идентификатор = глАПСоздатьИдентификатор();
	//}} Агент+, 2005г.	
	
	//спрНомАйСэйлз.Код = <АВТО>;
	
	спрНовыйТовар.Родитель=ВыбГруппаНоменклатуры;
	
	спрНовыйТовар.is_Код=ВнешнийКод;
	
	спрНовыйТовар.Наименование = ПолнНаименование;
	спрНовыйТовар.ПолнНаименование = ПолнНаименование;
	спрНовыйТовар.КПКНаименование = КПКНаименование;
	
	Если ТипПродукта="0" Тогда
		спрНовыйТовар.is_ТипПродукта = Перечисление.isТипыПродуктов.Продукт;
		спрНовыйТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Прочее;
	ИначеЕсли ТипПродукта="3" Тогда
		спрНовыйТовар.is_ТипПродукта = Перечисление.isТипыПродуктов.Тара;
		спрНовыйТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Тара;
	ИначеЕсли (ТипПродукта="1") ИЛИ (ТипПродукта="2") Тогда
		Если (ТипПродукта="1") Тогда
			спрНовыйТовар.is_ТипПродукта = Перечисление.isТипыПродуктов.УслугаПолученная;
		ИначеЕсли(ТипПродукта="2") Тогда
			спрНовыйТовар.is_ТипПродукта = Перечисление.isТипыПродуктов.УслугаОказанная;
		КонецЕсли;
		спрНовыйТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга;
	КонецЕсли;
	
	спрНовыйТовар.СтавкаНДС = ОпределитьСтавкуНДС(СтавкаНДС);
	
	спрНовыйТовар.is_Неактивный = Число(Активный);
	
	// TODO:
	// СтранаПроисхождения	(Спр.ОКСМ)
	
	спрНовыйТовар.Записать();
    
	УстановитьЕдИзмТовара(спрНовыйТовар,тзВыборкаНомЕдиницы,тзВыборкаКонв);
	
	Возврат спрНовыйТовар;
	
КонецФункции           


Процедура ПолучитьМаршруты()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	Параметры.ДобавитьЗначение("OnlyActive");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(ТекущаяДата()));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(ТекущаяДата()));
	Значения.ДобавитьЗначение("1");
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "RoutesTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	
	ОтветОтСервера = _Контекст;  

КонецПроцедуры


Процедура ПолучитьНоменклатуру()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	//Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	//Значения.ДобавитьЗначение("1");
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "ProductsTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	
	ОтветОтСервера = _Контекст;
	
	//ПоказатьТЗ(ОтветОтСервера,"| ");
	
	СообщитьОбычное("Данные ProductsTransfer получены",,ПотокВывода_Табло);
	
	тзНомСертификаты = СоздатьОбъект("ТаблицаЗначений");
	тзНомСертификаты.НоваяКолонка("НомСсылка","Число",10);
	тзНомСертификаты.НоваяКолонка("НазваниеСерт");//,"Строка",30);
	тзНомСертификаты.НоваяКолонка("Дата1");//,"Строка",10);
	тзНомСертификаты.НоваяКолонка("Дата2");//,"Строка",10);
	тзНомСертификаты.НоваяКолонка("КтоВыдал");//,"Строка",200);
	
	тзНомЕдиницы = СоздатьОбъект("ТаблицаЗначений");
	тзНомЕдиницы.НоваяКолонка("НомСсылка","Число",10);
	тзНомЕдиницы.НоваяКолонка("КодЕИ");//,"Строка",100);
	тзНомЕдиницы.НоваяКолонка("ШиринаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ВысотаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ДлинаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ВесНетто");//,"Строка",8);
	тзНомЕдиницы.НоваяКолонка("ВесБрутто");//,"Строка",8);
	тзНомЕдиницы.НоваяКолонка("ШтрихКод");//,"Строка",13);
	
	тзНомКонвертация = СоздатьОбъект("ТаблицаЗначений");
	тзНомКонвертация.НоваяКолонка("НомСсылка","Число",10);
	тзНомКонвертация.НоваяКолонка("КодИз");//,"Строка",100);
	тзНомКонвертация.НоваяКолонка("КодВ");//,"Строка",100);
	тзНомКонвертация.НоваяКолонка("Коэффициент");//,"Строка",9);
	
	ТзНоменклатура = СоздатьОбъект("ТаблицаЗначений");
	ТзНоменклатура.НоваяКолонка("ТипПродукта");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("ВнешнийКод");//,"Строка",15);
	ТзНоменклатура.НоваяКолонка("Код");//,"Строка",15);
	ТзНоменклатура.НоваяКолонка("ПолнНаименование");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("КПКНаименование");//,"Строка",40);
	ТзНоменклатура.НоваяКолонка("СтавкаНДС");//,"Строка",4);
	ТзНоменклатура.НоваяКолонка("МинимальнаяЕИ");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("СтранаПроизводитель");//,"Строка",25);
	ТзНоменклатура.НоваяКолонка("НомерТаможеннойДекларации");//,"Строка",25);
	ТзНоменклатура.НоваяКолонка("Активный");//,"Число",1);
	
	ПолучитьТаблицуНоменклатуры(ОтветОтСервера);
	
	Если ТзНоменклатура.КоличествоСтрок() = 0 Тогда
		Сообщить("Нет данных");
		Возврат;
	КонецЕсли;
	
	//ТзНоменклатура.ВыбратьСтроку();
	//тзНомЕдиницы.ВыбратьСтроку();
	//тзНомСертификаты.ВыбратьСтроку();
	//тзНомКонвертация.ВыбратьСтроку();
	
	//Возврат;
	
	//ТзНоменклатура.Сортировать("");
	
	НомерСтрокиНом = 0;
    ТзНоменклатура.ВыбратьСтроки();
	Пока ТзНоменклатура.ПолучитьСтроку() = 1 Цикл
		
		НомерСтрокиНом = НомерСтрокиНом + 1;
		
	    // Проверяем заполнен ли код 1С у товара 
		Если ПустоеЗначение(ТзНоменклатура.Код) = 1 Тогда  // Код 1с НЕ заполнен
			
			//Проверяем есть ли товар с таким кодом iSales
			Товар = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
			
			Если ТипЗначенияСтр(Товар)="Число" Тогда
				//Если не нашли товар с таким кодом iSales,
				Если Товар = 0 Тогда
					НачатьТранзакцию();
					// Создаем новый товар в отдельной папке "ВыбГруппаНоменклатуры"
					Товар =   СоздатьТовар(	ТзНоменклатура.Код,
											ТзНоменклатура.ВнешнийКод,
											ТзНоменклатура.ТипПродукта,
											ТзНоменклатура.ПолнНаименование,
											ТзНоменклатура.КПКНаименование,
											ТзНоменклатура.СтавкаНДС,
											ТзНоменклатура.МинимальнаяЕИ,
											ТзНоменклатура.СтранаПроизводитель,
											ТзНоменклатура.НомерТаможеннойДекларации,
											ТзНоменклатура.Активный,
											НомерСтрокиНом);
				    ЗафиксироватьТранзакцию();
					СообщитьОбычное("Создан новый товар "+ Товар.Наименование,,ПотокВывода_ТаблоФайл);
				Иначе
					СообщитьОшибка("Существует несколько товаров с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;
			//Если нашли 1 элемент с таким кодом iSales, пишем в ошибку, пропускаем	
			Иначе
				СообщитьОшибка("Товар с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"' -- не проставлено соответствие!" ,,ПотокВывода_ТаблоФайл);
				Продолжить;
			КонецЕсли;
		
		ИначеЕсли (СокрЛП(ТзНоменклатура.Код)<>СокрЛП(ТзНоменклатура.ВнешнийКод)) Тогда
		
			СообщитьОшибка("ОШИБКА! Элемент спр.Номенклатура: Код 1с'"+ТзНоменклатура.Код+"' и Код iSales'"+ТзНоменклатура.ВнешнийКод+"' не совпадают!!!" ,,ПотокВывода_ТаблоФайл);
			Продолжить;
			
		Иначе // код 1с ЗАПОЛНЕН
			
			//Проверяем есть ли товар с таким кодом
			Товар = НайтиТоварПоКодуiSales(ТзНоменклатура.Код);
			
			Если ТипЗначенияСтр(Товар)="Число" Тогда
				
				//Если не нашли ни одного - ищем соответствие по коду iSales, пишем в ошибку, пропускаем.
				Если Товар = 0 Тогда
					
					//Ищем по коду iSales для выяснения причины ошибки
					Товар2 = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
					Если ТипЗначенияСтр(Товар2)="Число" Тогда
						//Если не нашли товар с таким кодом iSales,
						Если Товар2 = 0 Тогда
							СообщитьОшибка("ОШИБКА! Для элемента 'Номенклатура' с кодом 1С: [" + ТзНоменклатура.Код + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
						Иначе // нашли > 1 элементов Товар2
							СообщитьОшибка("Существует несколько товаров с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
							Продолжить;
					    КонецЕсли;
					Иначе // нашли 1 элемент Товар2
						СообщитьОшибка("ОШИБКА! Для элемента справочника 'Номенклатура' с кодом iSales: [" + ТзНоменклатура.ВнешнийКод + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
					КонецЕсли;
					
				Иначе // нашли > 1
					СообщитьОшибка("ОШИБКА! В справочнике 'Номенклатура' найдено более одной записи с кодом 1C: [" + ТзНоменклатура.Код + "]!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;

			Иначе //Если нашли 1 элемент с таким кодом ТзНоменклатура.Код
                
				// доп проверка закоммент. - т.к. проверялось условие (СокрЛП(ТзНоменклатура.Код)<>СокрЛП(ТзНоменклатура.ВнешнийКод))
				// !!!
				// доп. проверка по внешнему коду
				//Товар2 = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
				//Если Товар = Товар2 Тогда
					ОбновитьТовар (	Товар.ТекущийЭлемент(),
									ТзНоменклатура.Код,
									ТзНоменклатура.ВнешнийКод,
									ТзНоменклатура.ТипПродукта,
									ТзНоменклатура.ПолнНаименование,
									ТзНоменклатура.КПКНаименование,
									ТзНоменклатура.СтавкаНДС,
									ТзНоменклатура.МинимальнаяЕИ,
									ТзНоменклатура.СтранаПроизводитель,
									ТзНоменклатура.НомерТаможеннойДекларации,
									ТзНоменклатура.Активный,
									НомерСтрокиНом);
				//Иначе
				//	СообщитьОшибка("ОШИБКА!" ,,ПотокВывода_ТаблоФайл);
				//	Продолжить;
				//КонецЕсли;
				
			КонецЕсли;

		КонецЕсли; 
	КонецЦикла;
	
	
КонецПроцедуры	
//================================================================================================
Процедура ПолучитьНоменклатуру_()
	
	

//*Пашков К.В.@РегионПродОптТорг, 2016-08-22 16:08:21
//	
	Корень = "";
    Корень = Корень + "<AccountsTransferResult>";
	Корень = Корень + "<ACCOUNT>";
	Корень = Корень + "<ISALES_ID>";
    Корень = Корень + "</ACCOUNT>";
	Корень = Корень + "</ISALES_ID>";
     
	//Для Н = 1 По СписокКонтрагентов.РазмерСписка() Цикл
	// //   К                                     =  СписокКонтрагентов.ПолучитьЗначение(Н);
	// //   Контрагент                    =  Данные.СоздатьПодчиненныйЭлемент("ACCOUNT");
	// //   НомерIsales                   =  Контрагент.СоздатьПодчиненныйЭлемент("ISALES_ID");
	// //   НомерIsales.Значение  =  К.Номер;
	// //   НазваниеIsales              =  Контрагент.СоздатьПодчиненныйЭлемент("NAME");
	// //   НомерIsales.Значение  =  К.Наименование;
	//	//
	// //// выгружаем все нужные реквизиты контрагента
	// //
	// //  Адреса                        = Контрагент.СоздатьПодчиненныйЭлемент("ADDRS");
	// //  Адрес                          = Адреса. СоздатьПодчиненныйЭлемент("ADDR");
	// //  ТипАдреса                  = Адрес. СоздатьПодчиненныйЭлемент("ADDR_TYPE");
	// //  ТипАдреса.Значение = К.ТипАдреса;
	//   
	//   // и так далее по всем необходимым реквизитам, в соответствии с разработанной схемой обмена с сервером.
    //        КонецЦикла;

///Пашков К.В.@РегионПродОптТорг, 2016-08-22 16:08:21

	
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	//Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	//Значения.ДобавитьЗначение("1");
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 10:10:43
 	_Контекст.НоваяКолонка("ВключитьЛогирование");
 	_Контекст.НоваяКолонка("ПутьДоЛогФайла");
 	_Контекст.НоваяКолонка("ПолучатьСтатусыВТЗ");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "ProductsTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
//	_Контекст.ДанныеОтправки        = Корень;
	//_Контекст.БезГзип			= 0;
	
	
	
 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 10:34:42
 
 
               

 
 	_Контекст.ВключитьЛогирование = ВключитьЛогирование;
 	_Контекст.ПутьДоЛогФайла	  = _ИмяЛогФайла;
 	//_Контекст.ПолучатьСтатусыВТЗ = 1;
	//Результат = Выполнить("ProductsTransfer",СтрокаЗапроса);   
 	
 	
	SOAP(_Контекст);
	
	ОтветОтСервера = _Контекст;
	
	ПоказатьТЗ(ОтветОтСервера,"| ");
	
	СообщитьОбычное("Данные ProductsTransfer получены",,ПотокВывода_Табло);
	
	тзНомСертификаты = СоздатьОбъект("ТаблицаЗначений");
	тзНомСертификаты.НоваяКолонка("НомСсылка","Число",10);
	тзНомСертификаты.НоваяКолонка("НазваниеСерт");//,"Строка",30);
	тзНомСертификаты.НоваяКолонка("Дата1");//,"Строка",10);
	тзНомСертификаты.НоваяКолонка("Дата2");//,"Строка",10);
	тзНомСертификаты.НоваяКолонка("КтоВыдал");//,"Строка",200);
	
	тзНомЕдиницы = СоздатьОбъект("ТаблицаЗначений");
	тзНомЕдиницы.НоваяКолонка("НомСсылка","Число",10);
	тзНомЕдиницы.НоваяКолонка("КодЕИ");//,"Строка",100);
	тзНомЕдиницы.НоваяКолонка("ШиринаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ВысотаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ДлинаСм");//,"Строка",5);
	тзНомЕдиницы.НоваяКолонка("ВесНетто");//,"Строка",8);
	тзНомЕдиницы.НоваяКолонка("ВесБрутто");//,"Строка",8);
	тзНомЕдиницы.НоваяКолонка("ШтрихКод");//,"Строка",13);
	
	тзНомКонвертация = СоздатьОбъект("ТаблицаЗначений");
	тзНомКонвертация.НоваяКолонка("НомСсылка","Число",10);
	тзНомКонвертация.НоваяКолонка("КодИз");//,"Строка",100);
	тзНомКонвертация.НоваяКолонка("КодВ");//,"Строка",100);
	тзНомКонвертация.НоваяКолонка("Коэффициент");//,"Строка",9);
	
	ТзНоменклатура = СоздатьОбъект("ТаблицаЗначений");
	ТзНоменклатура.НоваяКолонка("ТипПродукта");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("ВнешнийКод");//,"Строка",15);
	ТзНоменклатура.НоваяКолонка("Код");//,"Строка",15);
	ТзНоменклатура.НоваяКолонка("ПолнНаименование");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("КПКНаименование");//,"Строка",40);
	ТзНоменклатура.НоваяКолонка("СтавкаНДС");//,"Строка",4);
	ТзНоменклатура.НоваяКолонка("МинимальнаяЕИ");//,"Строка",100);
	ТзНоменклатура.НоваяКолонка("СтранаПроизводитель");//,"Строка",25);
	ТзНоменклатура.НоваяКолонка("НомерТаможеннойДекларации");//,"Строка",25);
	ТзНоменклатура.НоваяКолонка("Активный");//,"Число",1);
	
	ПолучитьТаблицуНоменклатуры(ОтветОтСервера);
	
	Если ТзНоменклатура.КоличествоСтрок() = 0 Тогда
		Сообщить("Нет данных");
		Возврат;
	КонецЕсли;
	
	//ТзНоменклатура.ВыбратьСтроку();
	//тзНомЕдиницы.ВыбратьСтроку();
	//тзНомСертификаты.ВыбратьСтроку();
	//тзНомКонвертация.ВыбратьСтроку();
	
	//Возврат;
	
	//ТзНоменклатура.Сортировать("");
	
	НомерСтрокиНом = 0;
    ТзНоменклатура.ВыбратьСтроки();
	Пока ТзНоменклатура.ПолучитьСтроку() = 1 Цикл
		
		НомерСтрокиНом = НомерСтрокиНом + 1;
		
	    // Проверяем заполнен ли код 1С у товара 
		Если ПустоеЗначение(ТзНоменклатура.Код) = 1 Тогда  // Код 1с НЕ заполнен
			
			//Проверяем есть ли товар с таким кодом iSales
			Товар = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
			
			Если ТипЗначенияСтр(Товар)="Число" Тогда
				//Если не нашли товар с таким кодом iSales,
				Если Товар = 0 Тогда
					НачатьТранзакцию();
					// Создаем новый товар в отдельной папке "ВыбГруппаНоменклатуры"
					Товар =   СоздатьТовар(	ТзНоменклатура.Код,
											ТзНоменклатура.ВнешнийКод,
											ТзНоменклатура.ТипПродукта,
											ТзНоменклатура.ПолнНаименование,
											ТзНоменклатура.КПКНаименование,
											ТзНоменклатура.СтавкаНДС,
											ТзНоменклатура.МинимальнаяЕИ,
											ТзНоменклатура.СтранаПроизводитель,
											ТзНоменклатура.НомерТаможеннойДекларации,
											ТзНоменклатура.Активный,
											НомерСтрокиНом);
				    ЗафиксироватьТранзакцию();
					СообщитьОбычное("Создан новый товар "+ Товар.Наименование,,ПотокВывода_ТаблоФайл);
				Иначе
					СообщитьОшибка("Существует несколько товаров с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;
			//Если нашли 1 элемент с таким кодом iSales, пишем в ошибку, пропускаем	
			Иначе
				СообщитьОшибка("Товар с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"' -- не проставлено соответствие!" ,,ПотокВывода_ТаблоФайл);
				Продолжить;
			КонецЕсли;
		
		ИначеЕсли (СокрЛП(ТзНоменклатура.Код)<>СокрЛП(ТзНоменклатура.ВнешнийКод)) Тогда
		
			СообщитьОшибка("ОШИБКА! Элемент спр.Номенклатура: Код 1с'"+ТзНоменклатура.Код+"' и Код iSales'"+ТзНоменклатура.ВнешнийКод+"' не совпадают!!!" ,,ПотокВывода_ТаблоФайл);
			Продолжить;
			
		Иначе // код 1с ЗАПОЛНЕН
			
			//Проверяем есть ли товар с таким кодом
			Товар = НайтиТоварПоКодуiSales(ТзНоменклатура.Код);
			
			Если ТипЗначенияСтр(Товар)="Число" Тогда
				
				//Если не нашли ни одного - ищем соответствие по коду iSales, пишем в ошибку, пропускаем.
				Если Товар = 0 Тогда
					
					//Ищем по коду iSales для выяснения причины ошибки
					Товар2 = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
					Если ТипЗначенияСтр(Товар2)="Число" Тогда
						//Если не нашли товар с таким кодом iSales,
						Если Товар2 = 0 Тогда
							СообщитьОшибка("ОШИБКА! Для элемента 'Номенклатура' с кодом 1С: [" + ТзНоменклатура.Код + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
						Иначе // нашли > 1 элементов Товар2
							СообщитьОшибка("Существует несколько товаров с кодом iSales '"+ТзНоменклатура.ВнешнийКод+"'!" ,,ПотокВывода_ТаблоФайл);
							Продолжить;
					    КонецЕсли;
					Иначе // нашли 1 элемент Товар2
						СообщитьОшибка("ОШИБКА! Для элемента справочника 'Номенклатура' с кодом iSales: [" + ТзНоменклатура.ВнешнийКод + "] неверно установлено соответствие!" ,,ПотокВывода_ТаблоФайл);
					КонецЕсли;
					
				Иначе // нашли > 1
					СообщитьОшибка("ОШИБКА! В справочнике 'Номенклатура' найдено более одной записи с кодом 1C: [" + ТзНоменклатура.Код + "]!" ,,ПотокВывода_ТаблоФайл);
					Продолжить;
				КонецЕсли;

			Иначе //Если нашли 1 элемент с таким кодом ТзНоменклатура.Код
                
				// доп проверка закоммент. - т.к. проверялось условие (СокрЛП(ТзНоменклатура.Код)<>СокрЛП(ТзНоменклатура.ВнешнийКод))
				// !!!
				// доп. проверка по внешнему коду
				//Товар2 = НайтиТоварПоКодуiSales(ТзНоменклатура.ВнешнийКод);
				//Если Товар = Товар2 Тогда
					ОбновитьТовар (	Товар.ТекущийЭлемент(),
									ТзНоменклатура.Код,
									ТзНоменклатура.ВнешнийКод,
									ТзНоменклатура.ТипПродукта,
									ТзНоменклатура.ПолнНаименование,
									ТзНоменклатура.КПКНаименование,
									ТзНоменклатура.СтавкаНДС,
									ТзНоменклатура.МинимальнаяЕИ,
									ТзНоменклатура.СтранаПроизводитель,
									ТзНоменклатура.НомерТаможеннойДекларации,
									ТзНоменклатура.Активный,
									НомерСтрокиНом);
				//Иначе
				//	СообщитьОшибка("ОШИБКА!" ,,ПотокВывода_ТаблоФайл);
				//	Продолжить;
				//КонецЕсли;
				
			КонецЕсли;

		КонецЕсли; 
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры	


//================================================================================================
//Прайс-Листы
//================================================================================================

//================================================================================================
// ПолучитьЦену
Функция ПолучитьЦену(ТМЦ,ТипЦен,НаДату,БазоваяЕдИзм,Контрагент = 0)  
	
	ТЦ = "";
	Если Контрагент = 0 Тогда
	    ТЦ = ТипЦен;
	Иначе

	    //*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:13:14
	    //	    СпрСкидки=СоздатьОбъект("Справочник.СкидкиПокупателям");
	    СпрСкидки=СоздатьОбъект("Справочник.Скидки");
	    ///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:13:14

		СпрСкидки.ИспользоватьВладельца(СпрСкидки); 
		СпрСкидки.ВыбратьЭлементы();  
		Если СпрСкидки.НайтиПоРеквизиту("Номенклатура",ТМЦ,0) = 1 Тогда
			Скидка = СпрСкидки.ТекущийЭлемент();
			ТЦ = Скидка.ТипЦены;
		КонецЕсли; 
	    Если ПустоеЗначение(ТЦ)=1 Тогда
			Если СпрСкидки.НайтиПоРеквизиту("Номенклатура",ТМЦ.Родитель,0) = 1 Тогда 
				Скидка = СпрСкидки.ТекущийЭлемент();
				ТЦ = Скидка.ТипЦены;
			КонецЕсли;
	    КонецЕсли;
	    Если ПустоеЗначение(ТЦ)=1 Тогда
	        ТЦ = ТипЦен;
		КонецЕсли;
	КонецЕсли;
			
	ЕдЦены = "";
	ВалютаЦены = "";
	ЦенаЦены = 0;
//	Если глВернутьЦену(ТМЦ, ТЦ, НаДату, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
//		Возврат 0; // для товара цены нет
//	КонецЕсли;
	
	Если ЕдЦены<>БазоваяЕдИзм Тогда
		Сообщить("Товар:"+ТМЦ+", тип цен:"+ТЦ+" -- цена не в базовой ед.изм.!");
		Возврат 0; 
	КонецЕсли;
	
	Возврат ЦенаЦены;

КонецФункции //ПолучитьЦену	             

//================================================================================================
// ВыгрузитьПрайсЛист
Функция ВыгрузитьПрайсЛист(Данные,ТипЦен=0,Контрагент=0)  
	
	НаДату = ТекущаяДата();
	
	Если Контрагент<>0 Тогда // передан контрагент - грузим его прайс

		//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:53:10
		//		ТипЦен = Контрагент.ОсновнойДоговор.ТипЦен;
		ТипЦен = Контрагент.ТипЦен;
		///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:53:10

		
		ЗначениеБазовыйПрайс = "1"; // контрагентский прайс

		//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:50:01
		//		ИдентПрайса = СокрЛП(Контрагент.is_Код);
		ИдентПрайса = Строка(Константа.КодФилиала) +СокрЛП(Контрагент.Код);
		///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:50:01

		
		Если ИдентПрайса="" Тогда
			Возврат 0;    
		КонецЕсли;
		
	Иначе
		Если ТипЦен = 0 Тогда
			// ни контрагента, ни типа цен - выходим
			Возврат 0;   
		КонецЕсли;
		
		ЗначениеБазовыйПрайс = "0";
		ИдентПрайса = "basic";
	КонецЕсли;
	
	// >
	ДанныеПрайс = Данные.СоздатьПодчиненныйЭлемент("PL");
	
		// >>
		ДанныеКодПрайса = ДанныеПрайс.СоздатьПодчиненныйЭлемент("PL_ID");
    	ДанныеКодПрайса.Значение = ИдентПрайса;
		
		ДанныеКодПрайса = ДанныеПрайс.СоздатьПодчиненныйЭлемент("ISDEF");
    	ДанныеКодПрайса.Значение = ЗначениеБазовыйПрайс;

		
	СпрТМЦ = СоздатьОбъект("Справочник.Номенклатура");
	СпрТМЦ.ИспользоватьРодителя(ВыбГруппаНоменклатуры);
	СпрТМЦ.ВыбратьЭлементы();
	Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
		Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
			Если СпрТМЦ.ПометкаУдаления() = 0 Тогда

				//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 14:49:58
				//				КодiSalesТМЦ = СокрЛП(СпрТМЦ.is_Код);
				КодiSalesТМЦ = СокрЛП(СпрТМЦ.КодАсумт);
				///Пашков К.В.@РегионПродОптТорг, 2016-08-25 14:49:58

				Если ПустоеЗначение(КодiSalesТМЦ) = 0 Тогда

					//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:46:04
					//					Если СпрТМЦ.is_Неактивный = 0 Тогда // выгружаем только активные
					Если СпрТМЦ.ИспользуетсяКПК = 1 Тогда // выгружаем только активные
					///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:46:04


						//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:49:06
						//						БазоваяЕдИзм = СпрТМЦ.БазоваяЕдиница;
						БазоваяЕдИзм = СпрТМЦ.БазоваяЕдиницаИзмерения;
						///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:49:06

						Цена = 0;
						
						Цена = ПолучитьЦену(СпрТМЦ.ТекущийЭлемент(),ТипЦен,НаДату,БазоваяЕдИзм,Контрагент);
						//Цена = глПолучитьЦену(СпрТМЦ.ТекущийЭлемент(),ТипЦен,НаДату,БазоваяЕдИзм,,);
						
						Цена = СокрЛП(Формат(Цена,"Ч15.2,")); // разделитель дробной части: ","
						
						////ТЗ.НоваяСтрока();
						//Если Контрагент = 0 Тогда
						//	//ТЗ.Базовый = "0"; // базовый прайс
						//	//ТЗ.Идент = "basic";
						//Иначе
						//	//ТЗ.Базовый = "1"; // контрагентский прайс
						//	//ТЗ.Идент = СокрЛП(Контрагент.is_Код);
						//КонецЕсли;
						////ТЗ.НеАктивный="0"; // активный

						ДанныеЦены = ДанныеПрайс.СоздатьПодчиненныйЭлемент("PRICES");
					
						// >>>
						ДанныеЦенаПродукта = ДанныеЦены.СоздатьПодчиненныйЭлемент("PRC");
					    
						ДанныеКодПродуктаПрайсы = ДанныеЦенаПродукта.СоздатьПодчиненныйЭлемент("PRD_ID");
						ДанныеКодПродуктаПрайсы.Значение = КодiSalesТМЦ;
						ДанныеЦенаПродуктаПрайсы = ДанныеЦенаПродукта.СоздатьПодчиненныйЭлемент("NET");
						ДанныеЦенаПродуктаПрайсы.Значение = Цена;
						
						//ТЗ.КодТМЦ = КодiSalesТМЦ;
						//ТЗ.ЦенаТМЦ = Цена;
					КонецЕсли;
				Иначе
					Сообщить("У ТМЦ "+СпрТМЦ.Наименование+" отсутствует код iSales! (Позиция прайса не выгружена)","!");
				КонецЕсли;
			КонецЕсли; // СпрТМЦ.ПометкаУдаления()
		КонецЕсли; // СпрТМЦ.ЭтоГруппа
			
	КонецЦикла;
	
	Если ЗначениеБазовыйПрайс="0" Тогда
		ДанныеКонтрагентыПрайсы = ДанныеПрайс.СоздатьПодчиненныйЭлемент("CUSTS");
	Иначе	
		ДанныеКонтрагентыПрайсы = ДанныеПрайс.СоздатьПодчиненныйЭлемент("CUSTS");
		ДанныеКонтрагентыПрайсы.Значение = ИдентПрайса;
	КонецЕсли;
	
	ДанныеВалидностьПрайса = ДанныеПрайс.СоздатьПодчиненныйЭлемент("VALID");
	ДанныеВалидностьПрайса.Значение = "0"; // активный("0")/НеАктивный("1")
	
	Возврат 1;
КонецФункции //ВыгрузитьПрайсЛист	             

//================================================================================================
// ВыгрузитьОбновитьПрайсЛисты
Функция ВыгрузитьОбновитьПрайсЛисты()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
		
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "CustomerPricesTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	
	//Анализатор = СоздатьОбъект("AddIn.XMLParser");
	//xml_ДанныеОтправки	= Анализатор.СоздатьДокумент();
    //Данные = xml_ДанныеОтправки.СоздатьПодчиненныйЭлемент("customerPrices");
    
	ТипЦен = ТипЦенДистриб;
	
	//======================================================================

	//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 14:06:54
	//	ВыгрузитьПрайсЛист(Данные,ТипЦен); // базовый прайс
		Данные = ВыгрузитьПрайсЛистыИз1С();
	///Пашков К.В.@РегионПродОптТорг, 2016-08-25 14:06:54

	
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Контраг)
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|Контрагент = Справочник.Контрагенты.ТекущийЭлемент;
//	//|Код = Справочник.Контрагенты.Код;
//
//	//*Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:48:08
//	//	|КонтрагентВнешКод = Справочник.Контрагенты.is_Код;
//	|КонтрагентВнешКод = Справочник.Контрагенты.Код;
//	///Пашков К.В.@РегионПродОптТорг, 2016-08-25 15:48:08
//
//	//|КонтрагОснТипЦен = Справочник.Контрагент.ОсновнойДоговор.ТипЦен;
//	|Группировка Контрагент без упорядочивания;
//	|Условие(ПроверкаПустойРеквизит(КонтрагентВнешКод)=0);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат 0;
//	КонецЕсли;
//
//	Пока Запрос.Группировка(1) = 1 Цикл
//		ВыгрузитьПрайсЛист(Данные,,Запрос.Контрагент);
//	КонецЦикла;
	//======================================================================
	
	//_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
	_Контекст.ДанныеОтправки = Данные;
		 
	SOAP(_Контекст);
		 
	Результат = _Контекст;
	
	Если ТипЗначения(Результат) = 2 Тогда
		Сообщить("Обнаружено ошибок  - " + СтрЧислоВхождений(Результат,"ERR"));
		СообщитьОбычное(Результат,,ПотокВывода_Файл);
	Иначе
	    ПоказатьТЗ(Результат," "); 
	КонецЕсли;	
		
	
	Сообщить("Готово!");
	
	Возврат 1;
КонецФункции //ВыгрузитьОбновитьПрайсЛисты  

//================================================================================================
//Остатки
//================================================================================================

Функция ПолучитьОстаткиТМЦ_(Данные)

	//ТЗОстатки = СоздатьОбъект("ТаблицаЗначений");
	//ТЗОстатки.НоваяКолонка("Склад");
	//ТЗОстатки.НоваяКолонка("ТМЦ");
	//ТЗОстатки.НоваяКолонка("Качество");
	//ТЗОстатки.НоваяКолонка("ЕдИзм");
	//ТЗОстатки.НоваяКолонка("Количество");
	
//	глНачатьЗамер(); // отладка
	
	СписСкладов = СоздатьОбъект("СписокЗначений");
	СписСкладов.ДобавитьЗначение(ВыбСкладПепси);
	СписСкладов.ДобавитьЗначение(ВыбСкладБракаПепси);
	
////Создание объекта типа Запрос
//Запрос = СоздатьОбъект("Запрос");
//ТекстЗапроса = 
//"//{{ЗАПРОС(ЗапросПоСкладам)
//|Обрабатывать НеПомеченныеНаУдаление;
//|Номенклатура = Регистр.ОстаткиТМЦ.Номенклатура;
//|НоменклатураВнешнийКод = Регистр.ОстаткиТМЦ.Номенклатура.is_Код;
//|Склад = Регистр.ОстаткиТМЦ.Склад;
//|СкладКод = Регистр.ОстаткиТМЦ.Склад.Код;
//|СкладВнешнийКод = Регистр.ОстаткиТМЦ.Склад.is_Код;
//|Количество = Регистр.ОстаткиТМЦ.Количество;
//|Функция КонОст = КонОст(Количество);
//
//|Группировка Склад;
//|Группировка Номенклатура без групп;
//
//// только ТМЦ с кодом iSales	
//|Условие(ПроверкаПустойРеквизит(НоменклатураВнешнийКод)=0);
//// только склады Пепси и ПепсиБрак	
//|Условие(Склад в СписСкладов);
//|"//}}ЗАПРОС
	;
	//КодАсумт
//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ЗапросПоСкладам)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Номенклатура = Регистр.ОстаткиТоваров.Номенклатура;
	|НоменклатураВнешнийКод = Регистр.ОстаткиТоваров.Номенклатура.is_Код;
	|Склад = Регистр.ОстаткиТоваров.Склад;
	|СкладКод = Регистр.ОстаткиТоваров.Склад.Код;
	|СкладВнешнийКод = Регистр.ОстаткиТоваров.Склад.is_Код;
	|Количество = Регистр.ОстаткиТоваров.Количество;
	|Функция КонОст = КонОст(Количество);
	
	|Группировка Склад;
	|Группировка Номенклатура без групп;

	// только ТМЦ с кодом iSales	
	|Условие(ПроверкаПустойРеквизит(НоменклатураВнешнийКод)=0);
	// только склады Пепси и ПепсиБрак	
	|Условие(Склад в СписСкладов);
	|"//}}ЗАПРОС	
;	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;

//	Сообщить("Время выгрузки остатков: "+глЗакончитьЗамер(),"i"); // отладка
	
	ТЗОстатки = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗОстатки);
	ТЗОстатки.ВыбратьСтроку();
	
	Пока Запрос.Группировка(1) = 1 Цикл
		
		ДанныеСклад = Данные.СоздатьПодчиненныйЭлемент("WAR");
	
		ДанныеКодСклада = ДанныеСклад.СоздатьПодчиненныйЭлемент("WAR_ID");
    	ДанныеКодСклада.Значение = СокрЛП(Запрос.СкладКод);
	
		ДанныеПродукты = ДанныеСклад.СоздатьПодчиненныйЭлемент("PRODS");
		
		Если (СокрЛП(Запрос.СкладКод) = СокрЛП(ВыбСкладПепси.Код)) Тогда // ОсновнойСклад
			ПеремКачество = "0"; // годные
		Иначе // Пепси Брак
			ПеремКачество = "1"; // брак
		КонецЕсли;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			ДанныеПродукт = ДанныеПродукты.СоздатьПодчиненныйЭлемент("PROD");
			
			ДанныеКодПродукта = ДанныеПродукт.СоздатьПодчиненныйЭлемент("PROD_ID");
			ДанныеКодПродукта.Значение = СокрЛП(Запрос.НоменклатураВнешнийКод);
			
			ДанныеТипОстатков = ДанныеПродукт.СоздатьПодчиненныйЭлемент("STOCK_TP");
			ДанныеТипОстатков.Значение = ПеремКачество;
			
			Данные1сЕИ = ДанныеПродукт.СоздатьПодчиненныйЭлемент("UOM");
			Данные1сЕИ.Значение = сИдЕдИзмШт;
			
			ДанныеКоличество = ДанныеПродукт.СоздатьПодчиненныйЭлемент("AMOUNT");
			ДанныеКоличество.Значение = Запрос.КонОст;
		КонецЦикла;
		
	КонецЦикла;
	
	//КодСклада = СокрЛП(ВыбСкладПепси.Код);
	//
	//// Будем выгружать только по складу "ВыбСкладПепси"
	//РегОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
	//
	//СпрТМЦ = СоздатьОбъект("Справочник.Номенклатура");
	//СпрТМЦ.ИспользоватьРодителя(ВыбГруппаНоменклатуры);
	//
	////СпрСклады = СоздатьОбъект("Справочник.Склады");
	////
	////СпрСклады.ВыбратьЭлементыПоРеквизиту("",1,0,0);
	////Пока СпрСклады.ПолучитьЭлемент() = 1 Цикл
	////	Если СпрСклады.ПометкаУдаления() = 0 Тогда
	//		СпрТМЦ.ВыбратьЭлементы();
	//		Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
	//			Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
	//				Если СпрТМЦ.ПометкаУдаления() = 0 Тогда
	//					КодiSalesТМЦ = СокрЛП(СпрТМЦ.is_Код);
	//					Если ПустоеЗначение(КодiSalesТМЦ) = 0 Тогда
	//						Если СпрТМЦ.is_Неактивный = 0 Тогда // выгружаем только активные
	//							Остаток = Макс(РегОстатки.СводныйИтог(,СпрТМЦ.ТекущийЭлемент(),ВыбСкладПепси,,"Количество"),0);
	//							
	//							ТЗОстатки.НоваяСтрока();
	//							ТЗОстатки.Склад			= КодСклада;
	//							ТЗОстатки.ТМЦ			= КодiSalesТМЦ;
	//							ТЗОстатки.Качество      = "0"; // годные
	//							ТЗОстатки.ЕдИзм			= сИдЕдИзмШт;
	//							ТЗОстатки.Количество	= Остаток;
	//						КонецЕсли;
	//					Иначе
	//						Сообщить("У ТМЦ "+СпрТМЦ.Наименование+" отсутствует код iSales! (Остаток не выгружен)","!");
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	////	КонецЕсли;
	////КонецЦикла; 
	
	//ТЗОстатки.ВыбратьСтроку();
	
    Возврат 1;
	
КонецФункции // ПолучитьОстаткиТМЦ()

Функция ПолучитьОстаткиТМЦ(Данные)

	
	
	СписСкладов = СоздатьОбъект("СписокЗначений");
	СписСкладов.ДобавитьЗначение(ВыбСкладПепси);
	СписСкладов.ДобавитьЗначение(ВыбСкладБракаПепси);
	
////Создание объекта типа Запрос
//Запрос = СоздатьОбъект("Запрос");
//ТекстЗапроса = 
//"//{{ЗАПРОС(ЗапросПоСкладам)
//|Обрабатывать НеПомеченныеНаУдаление;
//|Номенклатура = Регистр.ОстаткиТМЦ.Номенклатура;
//|НоменклатураВнешнийКод = Регистр.ОстаткиТМЦ.Номенклатура.is_Код;
//|Склад = Регистр.ОстаткиТМЦ.Склад;
//|СкладКод = Регистр.ОстаткиТМЦ.Склад.Код;
//|СкладВнешнийКод = Регистр.ОстаткиТМЦ.Склад.is_Код;
//|Количество = Регистр.ОстаткиТМЦ.Количество;
//|Функция КонОст = КонОст(Количество);
//
//|Группировка Склад;
//|Группировка Номенклатура без групп;
//
//// только ТМЦ с кодом iSales	
//|Условие(ПроверкаПустойРеквизит(НоменклатураВнешнийКод)=0);
//// только склады Пепси и ПепсиБрак	
//|Условие(Склад в СписСкладов);
//|"//}}ЗАПРОС
	;
	//КодАсумт
	
	//СписНом  = СоздатьОбъект("СписокЗначений");
	//СписНом.ДобавитьЗначение("11003");
	//СписНом.ДобавитьЗначение("10211");
	//СписНом.ДобавитьЗначение("10413");
	//СписНом.ДобавитьЗначение("10064");
	//СписНом.ДобавитьЗначение("11914");
	//СписНом.ДобавитьЗначение("10977");
	//СписНом.ДобавитьЗначение("11058");
	//СписНом.ДобавитьЗначение("10845");
	
	
//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ЗапросПоСкладам)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Номенклатура = Регистр.ОстаткиТоваров.Товар;
	|НоменклатураВнешнийКод = Регистр.ОстаткиТоваров.Товар.КодАсумт;
	|Склад = Регистр.ОстаткиТоваров.Склад;
//	|СкладКод = Регистр.ОстаткиТоваров.Склад.Код;
  //|СкладВнешнийКод = Регистр.ОстаткиТоваров.Склад.Код;
	|Количество = Регистр.ОстаткиТоваров.ОстатокТовара;
	|Функция КонОст = КонОст(Количество);
	
	|Группировка Склад;
	|Группировка Номенклатура без групп;

	// только ТМЦ с кодом iSales	
	//|Условие(ПроверкаПустойРеквизит(НоменклатураВнешнийКод)=0);
	// только склады Пепси и ПепсиБрак	
	|Условие(Склад в СписСкладов);
	//|Условие(СокрЛП(Номенклатура.КодАсумт) в СписНом);
	|Условие(ПроверкаПустойРеквизит(НоменклатураВнешнийКод)=0);
	|"//}}ЗАПРОС	
;	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;

//	Сообщить("Время выгрузки остатков: "+глЗакончитьЗамер(),"i"); // отладка
	
	ТЗОстатки = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗОстатки);
	ТЗОстатки.ВыбратьСтроку();
	//Здесь условие  зависимость от филиала
	КодСклада = СокрЛП(Константа.КодФилиала);
	
	Пока Запрос.Группировка(1) = 1 Цикл
		
		ДанныеСклад = Данные.СоздатьПодчиненныйЭлемент("WAR");
	
		ДанныеКодСклада = ДанныеСклад.СоздатьПодчиненныйЭлемент("WAR_ID");

    	//*Пашков К.В.@РегионПродОптТорг, 2016-09-06 16:02:04
    	//    	ДанныеКодСклада.Значение = СокрЛП(Запрос.СкладКод);
    	ДанныеКодСклада.Значение = КодСклада;
    	///Пашков К.В.@РегионПродОптТорг, 2016-09-06 16:02:04

	
		ДанныеПродукты = ДанныеСклад.СоздатьПодчиненныйЭлемент("PRODS");
		
//**001
		//*Пашков К.В.@РегионПродОптТорг, 2016-09-06 16:45:04
		//		Если (СокрЛП(Запрос.СкладКод) = СокрЛП(ВыбСкладПепси.Код)) Тогда // ОсновнойСклад
		Если (СокрЛП(КодСклада) = СокрЛП(ВыбСкладПепси.Код)) Тогда // ОсновнойСклад
		///Пашков К.В.@РегионПродОптТорг, 2016-09-06 16:45:04
			ПеремКачество = "0"; // годные
		Иначе // Пепси Брак
			ПеремКачество = "0"; // брак //временно проверка упразднена, до решения вопроса с браком
		КонецЕсли;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			ДанныеПродукт = ДанныеПродукты.СоздатьПодчиненныйЭлемент("PROD");
			
			ДанныеКодПродукта = ДанныеПродукт.СоздатьПодчиненныйЭлемент("PROD_ID");
			ДанныеКодПродукта.Значение = СокрЛП(Запрос.НоменклатураВнешнийКод);
			
			ДанныеТипОстатков = ДанныеПродукт.СоздатьПодчиненныйЭлемент("STOCK_TP");
			ДанныеТипОстатков.Значение = ПеремКачество;
			
			Данные1сЕИ = ДанныеПродукт.СоздатьПодчиненныйЭлемент("UOM");
			Данные1сЕИ.Значение = сИдЕдИзмШт;
			
			ДанныеКоличество = ДанныеПродукт.СоздатьПодчиненныйЭлемент("AMOUNT");
			ДанныеКоличество.Значение = СокрЛП(Запрос.КонОст);
		КонецЦикла;
		
	КонецЦикла;
	
	//КодСклада = СокрЛП(ВыбСкладПепси.Код);
	//
	//// Будем выгружать только по складу "ВыбСкладПепси"
	//РегОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
	//
	//СпрТМЦ = СоздатьОбъект("Справочник.Номенклатура");
	//СпрТМЦ.ИспользоватьРодителя(ВыбГруппаНоменклатуры);
	//
	////СпрСклады = СоздатьОбъект("Справочник.Склады");
	////
	////СпрСклады.ВыбратьЭлементыПоРеквизиту("",1,0,0);
	////Пока СпрСклады.ПолучитьЭлемент() = 1 Цикл
	////	Если СпрСклады.ПометкаУдаления() = 0 Тогда
	//		СпрТМЦ.ВыбратьЭлементы();
	//		Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
	//			Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
	//				Если СпрТМЦ.ПометкаУдаления() = 0 Тогда
	//					КодiSalesТМЦ = СокрЛП(СпрТМЦ.is_Код);
	//					Если ПустоеЗначение(КодiSalesТМЦ) = 0 Тогда
	//						Если СпрТМЦ.is_Неактивный = 0 Тогда // выгружаем только активные
	//							Остаток = Макс(РегОстатки.СводныйИтог(,СпрТМЦ.ТекущийЭлемент(),ВыбСкладПепси,,"Количество"),0);
	//							
	//							ТЗОстатки.НоваяСтрока();
	//							ТЗОстатки.Склад			= КодСклада;
	//							ТЗОстатки.ТМЦ			= КодiSalesТМЦ;
	//							ТЗОстатки.Качество      = "0"; // годные
	//							ТЗОстатки.ЕдИзм			= сИдЕдИзмШт;
	//							ТЗОстатки.Количество	= Остаток;
	//						КонецЕсли;
	//					Иначе
	//						Сообщить("У ТМЦ "+СпрТМЦ.Наименование+" отсутствует код iSales! (Остаток не выгружен)","!");
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	////	КонецЕсли;
	////КонецЦикла; 
	
	//ТЗОстатки.ВыбратьСтроку();
	
    Возврат 1;
	
КонецФункции // ПолучитьОстаткиТМЦ()



//================================================================================================
Процедура ОтправитьОстатки()
	
	Перем xml_ДанныеОтправки;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
		
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "StockCountingTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	xml_ДанныеОтправки	= Анализатор.СоздатьДокумент();
    Данные = xml_ДанныеОтправки.СоздатьПодчиненныйЭлемент("stockCountingList");
	
	Если ПолучитьОстаткиТМЦ(Данные)=1 Тогда
		_Контекст.ДанныеОтправки	= xml_ДанныеОтправки;
		SOAP(_Контекст);
		Результат = _Контекст;
		 
		Сообщить("Готово!");
			 
		ПоказатьТЗ(Результат," ");
	Иначе
		Сообщить("Ошибка при получении остатков! выгрузка отменена!");
	КонецЕсли;
	
	//ТЗОстатки.НоваяКолонка("Склад");
	//ТЗОстатки.НоваяКолонка("ТМЦ");
	//ТЗОстатки.НоваяКолонка("Качество");
	//ТЗОстатки.НоваяКолонка("ЕдИзм");
	//ТЗОстатки.НоваяКолонка("Количество");
	
	//ТЗОстатки.Сортировать("Склад");
	//
	//ДанныеСклад = Данные.СоздатьПодчиненныйЭлемент("WAR");
	//
	//	ДанныеКодСклада = ДанныеСклад.СоздатьПодчиненныйЭлемент("WAR_ID");
    //	ДанныеКодСклада.Значение = ТЗОстатки.ПолучитьЗначение(1,"Склад");
	//
	//	ДанныеПродукты = ДанныеСклад.СоздатьПодчиненныйЭлемент("PRODS");
	//	ДанныеПродукт = ДанныеПродукты.СоздатьПодчиненныйЭлемент("PROD");
	//
	//Для СчСтрок = 1 По ТЗОстатки.КоличествоСтрок() Цикл
	//		ДанныеКодПродукта = ДанныеПродукт.СоздатьПодчиненныйЭлемент("PROD_ID");
	//		ДанныеКодПродукта.Значение = ТЗОстатки.ПолучитьЗначение(СчСтрок,"ТМЦ");
	//		ДанныеТипОстатков = ДанныеПродукт.СоздатьПодчиненныйЭлемент("STOCK_TP");
	//		ДанныеТипОстатков.Значение = ТЗОстатки.ПолучитьЗначение(СчСтрок,"Качество");
	//		Данные1сЕИ = ДанныеПродукт.СоздатьПодчиненныйЭлемент("UOM");
	//		Данные1сЕИ.Значение = ТЗОстатки.ПолучитьЗначение(СчСтрок,"ЕдИзм");
	//		ДанныеКоличество = ДанныеПродукт.СоздатьПодчиненныйЭлемент("AMOUNT");
	//		ДанныеКоличество.Значение = ТЗОстатки.ПолучитьЗначение(СчСтрок,"Количество");
	//КонецЦикла;	
	
КонецПроцедуры


//================================================================================================
// ДОКУМЕНТЫ
//================================================================================================

Функция СформироватьКод1сДокумента(НомерДок,ДатаДок,ТипДок)
	Возврат ""+СокрЛП(НомерДок)+" "+Формат(ДатаДок,"ДДДММГГГГ")+" "+СокрЛП(ТипДок);	
КонецФункции

//================================================================================================
Функция ПодготовитьДанныеПоТЗДок_(Данные,ТЗДок)
	
	Для СчСтрок = 1 По ТЗДок.КоличествоСтрок() Цикл
		
		ТекДок = ТЗДок.ПолучитьЗначение(СчСтрок,1);
		СтатусДок = ?(ТекДок.Проведен()=1,"0","1");
		
		// TODO:
		//
		////Status = ?(ТекДок.Проведен,"0","1");
		////ДатаДок = ТекДок.Дата;
		////Если (ЗначениеЗаполнено(ТекДок.ДатаИзменения)) и (ТекДок.ДатаИзменения <> ТекДок.Дата) Тогда
		////Status = "1";
		////ДатаДок = ТекДок.ДатаИзменения;
		////КонецЕсли;		
		
		ДанныеДок = Данные.СоздатьПодчиненныйЭлемент("DOC");
		
		ДанныеДокСтатус = ДанныеДок.СоздатьПодчиненныйЭлемент("STATUS");
		ДанныеДокСтатус.Значение = СтатусДок;
		
		Если ТекДок.Вид() = "ПоступлениеТМЦ" Тогда
			
			//Накладная доставки - приход		код документа:		6
			ТипДокументаКод = "6";
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("ISALES_ID");  // "DOC_NO DOC_DT (без времени) DOC_TP". Пример: "ДОК1 31.12.2010 1"
			ДанныеДокВнешКод.Значение = СформироватьКод1сДокумента(ТекДок.НомерДок,ТекДок.ДатаДок,ТипДокументаКод);
			
			ДанныеДокТип = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_TP");
			ДанныеДокТип.Значение = ТипДокументаКод;
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_NO");
			ДанныеДокВнешКод.Значение = СокрЛП(ТекДок.НомерДок);
			
			ДанныеДокДатаВремя = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_DT"); //Дата и время документа: ДД.ММ.ГГГГ ЧЧ:ММ:СС
			ВремяЧ = "";
			ВремяМ = "";
			ВремяС = "";
			ТекДок.ПолучитьВремя(ВремяЧ,ВремяМ,ВремяС);
			ДанныеДокДатаВремя.Значение = СокрЛП(ТекДок.ДатаДок)+" "+ВремяЧ+":"+ВремяМ+":"+ВремяС;
			
			
			// Важно: обратная выгрузка (из ERP в iSales) должна идти с теми же номером и датой документа + номер заказа из SAP.
			ДанныеДокСвязи = ДанныеДок.СоздатьПодчиненныйЭлемент("REFS"); // Связанные документы (зарегистрированные в iSales)
			ДанныеДокСвязь = ДанныеДокСвязи.СоздатьПодчиненныйЭлемент("REF");
			
			ДанныеДокСвязьТип = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_TP");
			ДанныеДокСвязьТип.Значение = "";
			ДанныеДокСвязьНомер = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_NO");
			ДанныеДокСвязьНомер.Значение = "";
			ДанныеДокСвязьДата = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_DT");
			ДанныеДокСвязьДата.Значение = "";
			//
			
			//EXT_NO  Номер внешнего документа
			//EXT_DT  Дата внешнего документа
			
			//SHIP_FROM
			//SHIP_TO
			//SELLER
			//PAYER
		
			// ТЗ   SUM_SETS
				//HSET	         3 строки
					//SET_TYPE                    0/1/2
					//NET
					//DISC_SUM
					//DISC_GR_SUM
					//VAT
					//GROSS
	
			//ITEMS_AMOUNT  колво строк
			//DUE_DATE     Последняя дата платежа
			//COMMS      коментарии
			
			// ТЗ  DOC_ITEMS
			
				//DOC_ITEM			
				//	LINE_NO		
				//	SFA_ID		
				//	ACC_ID		
				//	QUANTITY		
				//	UOM_ID		
				//	DESC		
				//	SETS		
				//		DSET	
				//			SET_TYPE
				//			NET_PR
				//			GROSS_PR
				//			NET_SUM
				//			DISCOUNT_AMOUNT
				//			DISC_NET_SUM
				//			VAT_SUM
				//			GROSS_SUM
				//			DISC_GR_AMOUNT
				//	COUNTRY		
				//	CUSTOMS		
				//	RET_RSN		
			
				
	        //WHS_SRC		
			//WHS_DST		
			//ATTRS		
			//	ATTR	
			//		ATTR_NAME
			//		ATTR_VALUE
			//SR_ID		
			//AUTH_ID		
			//CREATE_DT		
			//EDIT_ID		
			//EDIT_DT
	
		ИначеЕсли ТекДок.Вид() = "Реализация" Тогда
		
//			Реализация		код документа:		
			ТипДокументаКод = "1";//ДОКТП = 1   если реализация      и 5 если возврат
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("ISALES_ID");  // "DOC_NO DOC_DT (без времени) DOC_TP". Пример: "ДОК1 31.12.2010 1"
			ДанныеДокВнешКод.Значение = СформироватьКод1сДокумента(ТекДок.НомерДок,ТекДок.ДатаДок,ТипДокументаКод);
			
			ДанныеДокТип = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_TP");
			ДанныеДокТип.Значение = ТипДокументаКод;
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_NO");
			ДанныеДокВнешКод.Значение = СокрЛП(ТекДок.НомерДок);
			
			ДанныеДокДатаВремя = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_DT"); //Дата и время документа: ДД.ММ.ГГГГ ЧЧ:ММ:СС
			ВремяЧ = "";
			ВремяМ = "";
			ВремяС = "";
			ТекДок.ПолучитьВремя(ВремяЧ,ВремяМ,ВремяС);
			ДанныеДокДатаВремя.Значение = СокрЛП(ТекДок.ДатаДок)+" "+ВремяЧ+":"+ВремяМ+":"+ВремяС;
			
			
			
		
						// Важно: обратная выгрузка (из ERP в iSales) должна идти с теми же номером и датой документа + номер заказа из SAP.
			ДанныеДокСвязи 				 = ДанныеДок.СоздатьПодчиненныйЭлемент("REFS"); // Связанные документы (зарегистрированные в iSales)
			ДанныеДокСвязь 				 = ДанныеДокСвязи.СоздатьПодчиненныйЭлемент("REF");
			
			ДанныеДокСвязьТип 			 = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_TP");
			ДанныеДокСвязьТип.Значение 	 = "";
			ДанныеДокСвязьНомер 		 = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_NO");
			ДанныеДокСвязьНомер.Значение = "";
			ДанныеДокСвязьДата 			 = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_DT");
			ДанныеДокСвязьДата.Значение  = "";
			//
			
			//EXT_NO  Номер внешнего документа
			//EXT_DT  Дата внешнего документа
			
			//SHIP_FROM
			//SHIP_TO
			//SELLER
			//PAYER
		
			// ТЗ   SUM_SETS
				//HSET	         3 строки
					//SET_TYPE                    0/1/2
					//NET
					//DISC_SUM
					//DISC_GR_SUM
					//VAT
					//GROSS
	
			//ITEMS_AMOUNT  колво строк
			//DUE_DATE     Последняя дата платежа
			//COMMS      коментарии
			
			// ТЗ  DOC_ITEMS
			
				//DOC_ITEM			
				//	LINE_NO		
				//	SFA_ID		
				//	ACC_ID		
				//	QUANTITY		
				//	UOM_ID		
				//	DESC		
				//	SETS		
				//		DSET	
				//			SET_TYPE
				//			NET_PR
				//			GROSS_PR
				//			NET_SUM
				//			DISCOUNT_AMOUNT
				//			DISC_NET_SUM
				//			VAT_SUM
				//			GROSS_SUM
				//			DISC_GR_AMOUNT
				//	COUNTRY		
				//	CUSTOMS		
				//	RET_RSN		
			
				
	        //WHS_SRC		
			//WHS_DST		
			//ATTRS		
			//	ATTR	
			//		ATTR_NAME
			//		ATTR_VALUE
			//SR_ID		
			//AUTH_ID		
			//CREATE_DT		
			//EDIT_ID		
			//EDIT_DT
		
		
		
		Иначе // возвраты
		
		
		
		
		
		КонецЕсли;
	
		
	КонецЦикла;	
		
		
	Возврат 1;	
КонецФункции

Функция ПодготовитьДанныеПоТЗДок(Данные,ТЗДок)
	
	Для СчСтрок = 1 По ТЗДок.КоличествоСтрок() Цикл
		

		//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 11:29:12
		//		ТекДок = ТЗДок.ПолучитьЗначение(СчСтрок,5);
		ТекДок = ТЗДок.ПолучитьЗначение(СчСтрок,1);
		///Пашков К.В.@РегионПродОптТорг, 2016-09-13 11:29:12

		//СтатусДок = ?(ТекДок.Проведен()=1,"0","1");
		
		// TODO:
		//
		////Status = ?(ТекДок.Проведен,"0","1");
		////ДатаДок = ТекДок.Дата;
		////Если (ЗначениеЗаполнено(ТекДок.ДатаИзменения)) и (ТекДок.ДатаИзменения <> ТекДок.Дата) Тогда
		////Status = "1";
		////ДатаДок = ТекДок.ДатаИзменения;
		////КонецЕсли;		
		
		ДанныеДок = Данные.СоздатьПодчиненныйЭлемент("DOC");
		
		ДанныеДокСтатус = ДанныеДок.СоздатьПодчиненныйЭлемент("STATUS");
		ДанныеДокСтатус.Значение = "0";
		
		Если ТекДок.Вид() = "ПоступлениеТМЦ" Тогда
			//И (ТекДок.ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратПоставщику)
			
//			//Накладная доставки - приход		код документа:		6
//			ТипДокументаКод = "6";
//			
//			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("ISALES_ID");  // "DOC_NO DOC_DT (без времени) DOC_TP". Пример: "ДОК1 31.12.2010 1"
//			ДанныеДокВнешКод.Значение = СформироватьКод1сДокумента(ТекДок.НомерДок,ТекДок.ДатаДок,ТипДокументаКод);
//			
//			ДанныеДокТип = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_TP");
//			ДанныеДокТип.Значение = ТипДокументаКод;
//			
//			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_NO");
//			ДанныеДокВнешКод.Значение = СокрЛП(ТекДок.НомерДок);
//			
//			ДанныеДокДатаВремя = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_DT"); //Дата и время документа: ДД.ММ.ГГГГ ЧЧ:ММ:СС
//			ВремяЧ = "";
//			ВремяМ = "";
//			ВремяС = "";
//			ТекДок.ПолучитьВремя(ВремяЧ,ВремяМ,ВремяС);
//			ДанныеДокДатаВремя.Значение = Формат(ТекДок.ДатаДок,"ДДДММГГГГ");//+" "+ВремяЧ+":"+ВремяМ+":"+ВремяС;
//			
//			
//			// Важно: обратная выгрузка (из ERP в iSales) должна идти с теми же номером и датой документа + номер заказа из SAP.
//			ДанныеДокСвязи = ДанныеДок.СоздатьПодчиненныйЭлемент("REFS"); // Связанные документы (зарегистрированные в iSales)
//			ДанныеДокСвязь = ДанныеДокСвязи.СоздатьПодчиненныйЭлемент("REF");
//			
//			ДанныеДокСвязьТип = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_TP");
//			ДанныеДокСвязьТип.Значение = "";
//			ДанныеДокСвязьНомер = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_NO");
//			ДанныеДокСвязьНомер.Значение = "";
//			ДанныеДокСвязьДата = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_DT");
//			ДанныеДокСвязьДата.Значение = "";
//			//
//			
//			//EXT_NO  Номер внешнего документа
//			//EXT_DT  Дата внешнего документа
//			
//			ДанныеДокОрганизация           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_FROM");
//			ДанныеДокОрганизация.Значение  = ТекДок.Контрагент.Код;
//			
//			ДанныеДокГрузополучатель           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_TO");
//			ДанныеДокГрузополучатель.Значение  = глОрганизацияiSales; 
//			
//			ДанныеДокПродавец           = ДанныеДок.СоздатьПодчиненныйЭлемент("SELLER");
//			ДанныеДокПродавец.Значение  = ТекДок.Контрагент.Код; 
//			
//			ДанныеДокКонтрагент           = ДанныеДок.СоздатьПодчиненныйЭлемент("PAYER");
//			ДанныеДокКонтрагент.Значение  = глОрганизацияiSales; 			
//			
//			       
//			ДанныеДокКоличествоСтрок      = ДанныеДок.СоздатьПодчиненныйЭлемент("ITEMS_AMOUNT");
//			ДанныеДокКоличествоСтрок.Значение  = ""+ТекДок.КоличествоСтрок(); 
//			
//			ДанныеДокКомментариц      = ДанныеДок.СоздатьПодчиненныйЭлемент("COMMS");
//			ДанныеДокКомментариц.Значение  = ТекДок.Комментарий; 
//			
//			   
//         	ДанныеДокITEMS = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_ITEMS"); 	
//		 	
//			GrossSumSet1         = 0;
//			СуммаСкидкисНДС      = 0;
//			СуммаСкидкиБезНДС    = 0;
//			СуммаБезНДСБезСкидки = 0;
//			
//			СтавкаНДС     = 0;
//			ПроцентСкидки = 0;
//			СуммаСкидки   = 0;
//			GrossSum      = 0;
//			GrossPR       = 0;
//			
//			NET_Set0         = 0;
//			DISC_SUM_Set0    = 0;
//			DISC_GR_SUM_Set0 = 0;
//			VAT_Set0         = 0;
//			GROSS_Set0       = 0;
//			NET_Set1         = 0;
//			DISC_SUM_Set1    = 0;
//			DISC_GR_SUM_Set1 = 0;
//			VAT_Set1         = 0;
//			GROSS_Set1       = 0;  
//			
//			Док = ТекДок;
//			ТекДок.ВыбратьСтроки();
//			Пока ТекДок.ПолучитьСтроку()=1 Цикл	
//				
//				iКод          = СокрЛП(ТекДок.Номенклатура.КодiSales);
//				СтавкаНДС     = ПолучитьСтавкуНДС(ТекДок.СтавкаНДС);
//				GrossSum      = Окр(ТекДок.Цена*ТекДок.Количество,2);
//				GrossPR       = ТекДок.Цена;
//				НомерСтрочки  = ТекДок.НомерСтроки;
//				ДанныеДокТовар = ДанныеДокITEMS.СоздатьПодчиненныйЭлемент("DOC_ITEM");
//				
//				ДанныеДокНомерСтроки = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("LINE_NO");
//				ДанныеДокНомерСтроки.Значение = СокрЛП(НомерСтрочки);
//				
//				ДанныеДокТоварКодIsales = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SFA_ID");
//				ДанныеДокТоварКодIsales.Значение = iКод;  
//				
//				ДанныеДокТоварКод1С = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("ACC_ID");
//				ДанныеДокТоварКод1С.Значение = СокрЛП(ТекДок.Номенклатура.Код);  
//				
//				
//				ДанныеДокТоварКоличество = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("QUANTITY");
//				ДанныеДокТоварКоличество.Значение = ТекДок.Количество;
//				
//				ДанныеДокТоварЕдИзм = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("UOM_ID");
//				ДанныеДокТоварЕдИзм.Значение = СокрЛП(ТекДок.Номенклатура.БазоваяЕдиница.ОКЕИ.Код);
//				
//				
//				ДанныеДокТоварSETS = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SETS");
//				
//				ДанныеДокТоварDSET = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
//				
//				ДанныеДокТоварSET_TYPE = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
//				ДанныеДокТоварSET_TYPE.Значение = "0";					
//					   
//				NET_PR   = Окр(GrossPR/(100+СтавкаНДС)*100,2);
//				ДанныеДокТоварNET_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_PR");
//				ДанныеДокТоварNET_PR.Значение = СтрЗаменить(NET_PR,".",",");
//				
//				ДанныеДокТоварGROSS_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_PR");
//				ДанныеДокТоварGROSS_PR.Значение = СтрЗаменить(GrossPR,".",",");
//				
//				NET_SUM = Окр(GrossSum/(100+СтавкаНДС)*100,2);
//				NET_Set0 = NET_Set0 + NET_SUM; 
//				ДанныеДокТоварNET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_SUM");
//				ДанныеДокТоварNET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
//					
//				DISC_SUM_Set0 = 0;  
//				ДанныеДокТоварDISCOUNT_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
//				ДанныеДокТоварDISCOUNT_AMOUNT.Значение = "0";   
//				
//				ДанныеДокТоварDISC_NET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
//				ДанныеДокТоварDISC_NET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
//					
//				VAT_SUM   = Окр(GrossSum/(100+СтавкаНДС)*СтавкаНДС,2);
//				VAT_Set0  = VAT_Set0 + VAT_SUM;
//				
//				ДанныеДокТоварVAT_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("VAT_SUM");
//				ДанныеДокТоварVAT_SUM.Значение = СтрЗаменить(VAT_SUM,".",",");   
//				   
//				GROSS_Set0 = GROSS_Set0 + GrossSum;
//				ДанныеДокТоварGROSS_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_SUM");
//				ДанныеДокТоварGROSS_SUM.Значение = СтрЗаменить(GrossSum,".",",");
//				
//				DISC_GR_SUM_Set0 = 0;   
//				ДанныеДокТоварDISC_GR_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
//				ДанныеДокТоварDISC_GR_AMOUNT.Значение = "0";   
//				
//				
//				//	//DSET 1  
//				
//				ДанныеДокТоварDSET1 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
//				
//				ДанныеДокТоварSET_TYPE1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
//				ДанныеДокТоварSET_TYPE1.Значение = "1";
//				
//				ДанныеДокТоварNET_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_PR");
//				ДанныеДокТоварNET_PR1.Значение = СтрЗаменить(NET_PR,".",",");
//				
//				ДанныеДокТоварGROSS_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_PR");
//				ДанныеДокТоварGROSS_PR1.Значение = СтрЗаменить(GrossPR,".",",");
//				
//				ДанныеДокТоварNET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_SUM");
//				ДанныеДокТоварNET_SUM1.Значение = СтрЗаменить(NET_SUM,".",",");   
//				
//				ДанныеДокТоварDISCOUNT_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
//				ДанныеДокТоварDISCOUNT_AMOUNT1.Значение = "0";   
//				
//				ДанныеДокТоварDISC_NET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
//				ДанныеДокТоварDISC_NET_SUM1.Значение = СтрЗаменить(NET_SUM,".",",");   
//				
//				ДанныеДокТоварVAT_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("VAT_SUM");
//				ДанныеДокТоварVAT_SUM1.Значение = СтрЗаменить(VAT_SUM,".",",");   
//				
//				ДанныеДокТоварGROSS_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_SUM");
//				ДанныеДокТоварGROSS_SUM1.Значение = СтрЗаменить(GrossSum,".",",");   
//				
//				ДанныеДокТоварDISC_GR_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
//				ДанныеДокТоварDISC_GR_AMOUNT1.Значение = "0";   
//				
//				
//				//	//DSET 2  (в большинстве случаев будет такой же как DSET 1)
//				
//				ДанныеДокТоварDSET2 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
//				
//				ДанныеДокТоварSET_TYPE2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
//				ДанныеДокТоварSET_TYPE2.Значение = "2";
//				
//				
//				ДанныеДокТоварNET_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_PR");
//				ДанныеДокТоварNET_PR2.Значение = СтрЗаменить(NET_PR,".",",");
//				
//				ДанныеДокТоварGROSS_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_PR");
//				ДанныеДокТоварGROSS_PR2.Значение = СтрЗаменить(GrossPR,".",",");
//				
//				
//				ДанныеДокТоварNET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_SUM");
//				ДанныеДокТоварNET_SUM2.Значение = СтрЗаменить(NET_SUM,".",",");   
//				
//				ДанныеДокТоварDISCOUNT_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
//				ДанныеДокТоварDISCOUNT_AMOUNT2.Значение = "0";   
//				
//				ДанныеДокТоварDISC_NET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
//				ДанныеДокТоварDISC_NET_SUM2.Значение = СтрЗаменить(NET_SUM,".",",");   
//				
//				ДанныеДокТоварVAT_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("VAT_SUM");
//				ДанныеДокТоварVAT_SUM2.Значение = СтрЗаменить(VAT_SUM,".",",");   
//				
//				ДанныеДокТоварGROSS_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_SUM");
//				ДанныеДокТоварGROSS_SUM2.Значение = СтрЗаменить(GrossSum,".",",");   
//				
//				ДанныеДокТоварDISC_GR_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
//				ДанныеДокТоварDISC_GR_AMOUNT2.Значение = "0";   
//				
//				ДанныеДокТоварCOUNTRY =    ДанныеДокТовар.СоздатьПодчиненныйЭлемент("COUNTRY");
//				ДанныеДокТоварCOUNTRY.Значение = "RU";
//			
//			КонецЦикла; 				
//		
//			NET_Set1         = NET_Set0;
//			DISC_SUM_Set1    = DISC_SUM_Set0;
//			DISC_GR_SUM_Set1 = 0;
//			VAT_Set1         = VAT_Set0;
//			GROSS_Set1       = GROSS_Set0;  
//			
//				  
//         	ДанныеДокSUM_SETS = ДанныеДок.СоздатьПодчиненныйЭлемент("SUM_SETS");
//         	
//		 	ДанныеДокНSET = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
//		 	 
//		 	
//			////HSet 0
//		 	ДанныеДокSET_TYPE = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
//			ДанныеДокSET_TYPE.Значение = "0";
//			
//		 	ДанныеДокNET = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("NET");
//			ДанныеДокNET.Значение = СтрЗаменить(NET_Set0,".",",");
//			
//		 	ДанныеДокDISC_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_SUM");
//			ДанныеДокDISC_SUM.Значение = СтрЗаменить(DISC_SUM_Set0,".",",");
//			                                               
//		 	ДанныеДокDISC_GR_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
//			ДанныеДокDISC_GR_SUM.Значение = СтрЗаменить(DISC_GR_SUM_Set0,".",",");
//			
//		 	ДанныеДокVAT = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("VAT");
//			ДанныеДокVAT.Значение = СтрЗаменить(VAT_Set0,".",","); 
//		
//		 	ДанныеДокGROSS = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("GROSS");
//			ДанныеДокGROSS.Значение = СтрЗаменить(GROSS_Set0,".",","); 
//		
//			////HSet 1   
//		 	ДанныеДокНSET1 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
//			
//		 	ДанныеДокSET_TYPE1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
//			ДанныеДокSET_TYPE1.Значение = "1";
//		                  
//		 	ДанныеДокNET1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("NET");
//			ДанныеДокNET1.Значение = СтрЗаменить(NET_Set1,".",",");
//			
//		 	ДанныеДокDISC_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_SUM");
//			ДанныеДокDISC_SUM1.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
//			                                               
//		 	ДанныеДокDISC_GR_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
//			ДанныеДокDISC_GR_SUM1.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
//			
//		 	ДанныеДокVAT1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("VAT");
//			ДанныеДокVAT1.Значение = СтрЗаменить(VAT_Set1,".",","); 
//		
//		 	ДанныеДокGROSS1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("GROSS");
//			ДанныеДокGROSS1.Значение = СтрЗаменить(GROSS_Set1,".",","); 
//
//			////HSet 2 
//		 	ДанныеДокНSET2 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
//			
//		 	ДанныеДокSET_TYPE2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
//			ДанныеДокSET_TYPE2.Значение = "2";
//		                  
//		 	ДанныеДокNET2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("NET");
//			ДанныеДокNET2.Значение = СтрЗаменить(NET_Set1,".",",");
//			
//		 	ДанныеДокDISC_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_SUM");
//			ДанныеДокDISC_SUM2.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
//			                                               
//		 	ДанныеДокDISC_GR_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
//			ДанныеДокDISC_GR_SUM2.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
//			
//		 	ДанныеДокVAT2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("VAT");
//			ДанныеДокVAT2.Значение = СтрЗаменить(VAT_Set1,".",","); 
//		
//		 	ДанныеДокGROSS2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("GROSS");
//			ДанныеДокGROSS2.Значение = СтрЗаменить(GROSS_Set1,".",","); 
//			
//			ДанныеДокWHS_DST = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_DST");
//			ДанныеДокWHS_DST.Значение = СокрЛП(ТекДок.Склад.Код);
//				
//			// ТЗ   SUM_SETS
//				//HSET	         3 строки
//					//SET_TYPE                    0/1/2
//					//NET
//					//DISC_SUM
//					//DISC_GR_SUM
//					//VAT
//					//GROSS
//	
//			//ITEMS_AMOUNT  колво строк
//			//DUE_DATE     Последняя дата платежа
//			//COMMS      коментарии
//			
//			// ТЗ  DOC_ITEMS
//			
//				//DOC_ITEM			
//				//	LINE_NO		
//				//	SFA_ID		
//				//	ACC_ID		
//				//	QUANTITY		
//				//	UOM_ID		
//				//	DESC		
//				//	SETS		
//				//		DSET	
//				//			SET_TYPE
//				//			NET_PR
//				//			GROSS_PR
//				//			NET_SUM
//				//			DISCOUNT_AMOUNT
//				//			DISC_NET_SUM
//				//			VAT_SUM
//				//			GROSS_SUM
//				//			DISC_GR_AMOUNT
//				//	COUNTRY		
//				//	CUSTOMS		
//				//	RET_RSN		
//			
//				
//	        //WHS_SRC		
//			//WHS_DST		
//			//ATTRS		
//			//	ATTR	
//			//		ATTR_NAME
//			//		ATTR_VALUE
//			//SR_ID		
//			//AUTH_ID		
//			//CREATE_DT		
//			//EDIT_ID		
//			//EDIT_DT
//	

		//*Пашков К.В.@РегионПродОптТорг, 2016-09-12 20:53:56
		//		ИначеЕсли ТекДок.Вид() = "Реализация" Тогда
		ИначеЕсли ТекДок.Вид() = "РасходнаяНакладная"  Тогда
		///Пашков К.В.@РегионПродОптТорг, 2016-09-12 20:53:56

		
			//Реализация	
			//код документа:		Возврат СокрЛП(Номер) + " " + СокрЛП(Дата)+ " " + ТипДокумента;
			ТипДокументаКод = "1";
		    StatusDoc = "0";
			
			//**TODO Решать вопрос о сохранении статуса документа
			
			//// Сначала отменим документ, перед тем как изме нить   (в случае изменения даты документа)
			//ТекДокПред = "";
			//Если ( ПустоеЗначение(ТекДок.ДатаИзменения) = 0) и (ТекДок.ДатаИзменения <> ТекДок.ДатаДок) и 
			//	(ТекДокПред <> ТекДок) и (ТекДок.Проведен()=1) Тогда
			//	StatusDoc = "1";
			//	ДатаДок = ТекДок.ДатаИзменения;
			//	ТекДокПред = ТекДок;
			//	ПовторВыгрузки = 1;
			//КонецЕсли;	
			//**
		
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("ISALES_ID");  // "DOC_NO DOC_DT (без времени) DOC_TP". Пример: "ДОК1 31.12.2010 1"
			ДанныеДокВнешКод.Значение = СформироватьКод1сДокумента(ТекДок.НомерДок,ТекДок.ДатаДок,ТипДокументаКод);
			
			ДанныеДокСтатус = ДанныеДок.СоздатьПодчиненныйЭлемент("STATUS");
			ДанныеДокСтатус.Значение = StatusDoc; 
			
			ДанныеДокТип = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_TP");
			ДанныеДокТип.Значение =  "1";
			
			ДанныеДокНомер           = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_NO");
			ДанныеДокНомер.Значение  = СокрЛП(ТекДок.НомерДок); 
			
			ДанныеДокДатаВремя = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_DT"); //Дата и время документа: ДД.ММ.ГГГГ ЧЧ:ММ:СС
			ВремяЧ = "";
			ВремяМ = "";
			ВремяС = "";
			ТекДок.ПолучитьВремя(ВремяЧ,ВремяМ,ВремяС);
			ДанныеДокДатаВремя.Значение = СокрЛП(ТекДок.ДатаДок)+" "+ВремяЧ+":"+ВремяМ+":"+ВремяС;
			
			ДанныеДокСвязи = ДанныеДок.СоздатьПодчиненныйЭлемент("REFS"); // Связанные документы (зарегистрированные в iSales)
			ДанныеДокСвязь = ДанныеДокСвязи.СоздатьПодчиненныйЭлемент("REF");
			
			ДанныеДокСвязьТип = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_TP");
			ДанныеДокСвязьТип.Значение = "13";
			ДанныеДокСвязьНомер = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_NO");

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 11:30:16
			//			ДанныеДокСвязьНомер.Значение = ТекДок.ДокОснование.НомерДок;
			
			ДанныеДокСвязьНомер.Значение = СокрЛП(ТекДок.ДокументОснование.НомерДок);
			///Пашков К.В.@РегионПродОптТорг, 2016-09-13 11:30:16

			ДанныеДокСвязьДата = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_DT");

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:36:16
			//			ДанныеДокСвязьДата.Значение =  ТекДок.ДокОснование.ДатаДок;
			ДанныеДокСвязьДата.Значение =  ТекДок.ДокументОснование.ДатаДок;
			///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:36:16

			
			                   
			ДанныеДокОрганизация           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_FROM");
			ДанныеДокОрганизация.Значение  = глОрганизацияiSales;
			
			// PAYER - контрагент
			// SHIP_TO - торговая точка грузополучатель
			
			ДанныеДокГрузополучатель           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_TO");

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-15 13:48:23
			//			ДанныеДокГрузополучатель.Значение  = ТекДок.ТорговаяТочка.Код; 
			ДанныеДокГрузополучатель.Значение  = СокрЛП(Константа.КодФилиала) + СокрЛП(ТекДок.Клиент.Код); //!!!!!!!!!!????????????//**
			///Пашков К.В.@РегионПродОптТорг, 2016-09-15 13:48:23

			
			ДанныеДокПродавец           = ДанныеДок.СоздатьПодчиненныйЭлемент("SELLER");
			ДанныеДокПродавец.Значение  = глОрганизацияiSales; 
			
			ДанныеДокКонтрагент           = ДанныеДок.СоздатьПодчиненныйЭлемент("PAYER");

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:37:17
			//			ДанныеДокКонтрагент.Значение  = ТекДок.Контрагент.Код; 
			ДанныеДокКонтрагент.Значение  = СокрЛП(Константа.КодФилиала) + СокрЛП(ТекДок.Клиент.Код); 
			///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:37:17

			       
		
			ДанныеДокКоличествоСтрок      = ДанныеДок.СоздатьПодчиненныйЭлемент("ITEMS_AMOUNT");
			ДанныеДокКоличествоСтрок.Значение  = ""+ТекДок.КоличествоСтрок(); 
			
			ДанныеДокКомментариц      = ДанныеДок.СоздатьПодчиненныйЭлемент("COMMS");
			ДанныеДокКомментариц.Значение  = ТекДок.Комментарий; 
			
			   
         	ДанныеДокITEMS = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_ITEMS"); 
		
		
			GrossSumSet1         = 0;
			СуммаСкидкисНДС      = 0;
			СуммаСкидкиБезНДС    = 0;
			СуммаБезНДСБезСкидки = 0;
			
			СтавкаНДС     = 0;
			ПроцентСкидки = 0;
			СуммаСкидки   = 0;
			GrossSum      = 0;
			GrossPR       = 0;
			
			NET_Set0         = 0;
			DISC_SUM_Set0    = 0;
			DISC_GR_SUM_Set0 = 0;
			VAT_Set0         = 0;
			GROSS_Set0       = 0;
			NET_Set1         = 0;
			DISC_SUM_Set1    = 0;
			DISC_GR_SUM_Set1 = 0;
			VAT_Set1         = 0;
			GROSS_Set1       = 0;     
			                      
			Док = ТекДок;
			ТекДок.ВыбратьСтроки();
			Пока ТекДок.ПолучитьСтроку()=1 Цикл
				
				ПроцентСкидки = 0;
//				НомерСтрочки  = ТекДок.НомерСтроки;
///				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:20:18
//								iКод          = СокрЛП(ТекДок.Товар.КодАсумт);
//				//iКод          = СокрЛП(ТекДок.Товар.АртикулПроизводителя);
//				///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:20:18
////
//				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 16:15:44
//				//				СтавкаНДС     = ПолучитьСтавкуНДС(ТекДок.СтавкаНДС);
//				текНДС =  ТекДок.Товар.СтавкаНДС.Получить(ТекущаяДата());
//				СтавкаНДС     = ПолучитьСтавкуНДС(текНДС);
//				Сообщить("СтавкаНДС - " + СтавкаНДС);
//
//				///Пашков К.В.@РегионПродОптТорг, 2016-09-13 16:15:44
//
//				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 17:49:02
//				//				ПроцентСкидки = ТекДок.ПроцентПромоСкидки;
//				///!!!!!!!! Как её сюда передать
//				
//				ПроцентСкидки = ТекДок.АкцияТЧ.СкидкаПоАкции;
//				Сообщить("Процент скидки - " + ПроцентСкидки);
//				///Пашков К.В.@РегионПродОптТорг, 2016-09-13 17:49:02
//				
//				Если ПустоеЗначение(ТекДок.АкцияТЧ) = 0 Тогда
//					
//					текЦенаАкции = ПолучитьЦенуКлиентаБезАкций(Док.Клиент, ТекДок.Товар, ТекДок.ДатаДок);
//				Сообщить("текЦенаАкции - " + текЦенаАкции);	
//					Если ТекДок.Цена <> текЦенаАкции Тогда
//						ПроцентСкидки = ТекДок.АкцияТЧ.СкидкаПоАкции;
//										
//						СуммаСкидки   = ТекДок.Сумма*ПроцентСкидки/100;
//						GrossSum      = Окр(ТекДок.Цена*ТекДок.Количество*(100-ПроцентСкидки)/100,2);
//						GrossPR       = Окр(GrossSum/ТекДок.Количество,2);
//						
//						
//					КонецЕсли;
//					
//				Иначе
//				СуммаСкидки   = ТекДок.Сумма*ПроцентСкидки/100;
//				GrossSum      = Окр(ТекДок.Цена*ТекДок.Количество,2);
//				GrossPR       = Окр(GrossSum/ТекДок.Количество,2);
//
//					
//				КонецЕсли;
//				
//				
//
//				//ПроцентСкидки = 1;
//				//СуммаСкидки   = ТекДок.Сумма*ПроцентСкидки/100;
//				//GrossSum      = Окр(ТекДок.Цена*ТекДок.Количество*(100-ПроцентСкидки)/100,2);
//				//GrossPR       = Окр(GrossSum/ТекДок.Количество,2);
//				
//				GrossSumЗаказа = 0;
//				GrossPRЗаказа = 0;
//				ПроцентСкидкиЗаказа = 0;
//
//				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:07:41
//				//				Заказ =   док.ДокОснование;
//				Заказ =   док.ДокументОснование;
//				///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:07:41
//
//				Если (ПустоеЗначение(Заказ)=0) и (GrossSum = 0) Тогда
//					//СтрокаЗаказа =     Заказ.Товары.Найти(СтрокаДокумента.Номенклатура,"Номенклатура"); 
//					ТЗ = СоздатьОбъект("ТаблицаЗначений");
//					Заказ.ВыгрузитьТабличнуюЧасть(ТЗ);
//					Переменная = 0;
//
//					//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:46:20
//					//					Если ТЗ.НайтиЗначение(ТекДок.Номенклатура, Переменная,"Номенклатура") = 1 Тогда
//					Если ТЗ.НайтиЗначение(ТекДок.Товар, Переменная,"Товар") = 1 Тогда
//					///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:46:20
//
//						СтрокаЗаказа =	Заказ.ПолучитьСтрокуПоНомеру(Переменная);
//					КонецЕсли;
//					
//					
//					Если СтрокаЗаказа<> 0 Тогда
//
//						//*Пашков К.В.@РегионПродОптТорг, 2016-09-20 10:55:42
//						//						ПроцентСкидкиЗаказа = СтрокаЗаказа.ПроцентПромоСкидки;
//						//						ЦенаЗаказа =  СтрокаЗаказа.Цена;
//						//						GrossSumЗаказа  = Окр(ЦенаЗаказа*СтрокаЗаказа.Количество*(100-ПроцентСкидкиЗаказа)/100,2);
//						// -------- заменено на:
//						ПроцентСкидкиЗаказа = Заказ.АкцияТЧ.СкидкаПоАкции;
//						ЦенаЗаказа =  Заказ.Цена;
//						GrossSumЗаказа  = Окр(ЦенаЗаказа*Заказ.Количество*(100-ПроцентСкидкиЗаказа)/100,2);
//						///Пашков К.В.@РегионПродОптТорг, 2016-09-20 10:55:42
//
//						GrossPRЗаказа   =   Окр(GrossSum/ТекДок.Количество,2);
//						ПроцентСкидкиЗаказа = 100;
//					КонецЕсли;	
//				КонецЕсли;
				

				//текЦенаАкции
				текЦена = ПолучитьЦенуКлиентаБезАкций(Док.Клиент, ТекДок.Товар, ТекДок.ДатаДок);
				
	//				текЦена = ТекДок.Цена;


				НомерСтрочки  = ТекДок.НомерСтроки;
				iКод          = СокрЛП(ТекДок.Товар.КодАсумт);
				текНДС =  ТекДок.Товар.СтавкаНДС.Получить(ТекущаяДата());
				СтавкаНДС     = ПолучитьСтавкуНДС(текНДС);
				Если ПустоеЗначение(ТекДок.АкцияТЧ) = 0 Тогда				
					//ПроцентСкидки = ТекДок.АкцияТЧ.СкидкаПоАкции;
					ПроцентСкидки = 0;
					//Если ТекДок.Цена <> текЦенаАкции Тогда//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					//	
					//КонецЕсли;	
				Иначе
					ПроцентСкидки = 0;
				КонецЕсли;	
				СуммаСкидки   = ТекДок.Сумма*ПроцентСкидки/100;
				GrossSum      = Окр(текЦена*ТекДок.Количество*(100-ПроцентСкидки)/100,2);
				
				GrossPR       = Окр(GrossSum/ТекДок.Количество,2);
				
				GrossSumЗаказа = 0;
				GrossPRЗаказа = 0;
				ПроцентСкидкиЗаказа = 0;
				Заказ =   док.ДокументОснование;
				Если (ПустоеЗначение(Заказ)=0) и (GrossSum = 0) Тогда
					//СтрокаЗаказа =     Заказ.Товары.Найти(СтрокаДокумента.Номенклатура,"Номенклатура"); 
					ТЗ = СоздатьОбъект("ТаблицаЗначений");
					Заказ.ВыгрузитьТабличнуюЧасть(ТЗ);
					Переменная = 0;
					Если ТЗ.НайтиЗначение(ТекДок.Товар, Переменная,"Товар") = 1 Тогда
						СтрокаЗаказа =	Заказ.ПолучитьСтрокуПоНомеру(Переменная);
					КонецЕсли;
					
					
					Если СтрокаЗаказа<> 0 Тогда
						ПроцентСкидкиЗаказа = Заказ.АкцияТЧ.СкидкаПоАкции;
						//ПроцентСкидкиЗаказа = 0;
						
						ЦенаЗаказа =  Заказ.Цена;
						GrossSumЗаказа  = Окр(ЦенаЗаказа*Заказ.Количество*(100-ПроцентСкидкиЗаказа)/100,2);
						GrossPRЗаказа   =   Окр(GrossSum/ТекДок.Количество,2);
						ПроцентСкидкиЗаказа = 100;
					КонецЕсли;	
				КонецЕсли;


				ДанныеДокТовар = ДанныеДокITEMS.СоздатьПодчиненныйЭлемент("DOC_ITEM");
				
				ДанныеДокНомерСтроки = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("LINE_NO");
				ДанныеДокНомерСтроки.Значение = СокрЛП(НомерСтрочки);
				
				ДанныеДокТоварКодIsales = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SFA_ID");
				ДанныеДокТоварКодIsales.Значение = iКод;  
				
				ДанныеДокТоварКод1С = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("ACC_ID");

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:13:21
				//				ДанныеДокТоварКод1С.Значение = СокрЛП(ТекДок.Номенклатура.Код);  
				ДанныеДокТоварКод1С.Значение = СокрЛП(ТекДок.Товар.АртикулПроизводителя);  
				///Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:13:21

				
				
				ДанныеДокТоварКоличество = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("QUANTITY");
				ДанныеДокТоварКоличество.Значение = ТекДок.Количество;
				
				ДанныеДокТоварЕдИзм = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("UOM_ID");

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 14:21:21
				//				ДанныеДокТоварЕдИзм.Значение = СокрЛП(ТекДок.Номенклатура.БазоваяЕдиница.ОКЕИ.Код);
				//текЕдиница = СписокЕдиниц.Получить(СокрЛП(ТекДок.Единица));
				текЕдиница = "796";//**000

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-16 12:56:11
				ДанныеДокТоварЕдИзм.Значение = текЕдиница;
				
				///Пашков К.В.@РегионПродОптТорг, 2016-09-16 12:56:11
						
				ДанныеДокПромо = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("DESC");
				ДанныеДокПромо.Значение = СокрЛП(Заказ.АкцияТЧ);
				
				ДанныеДокТоварSETS = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SETS");
				
				ДанныеДокТоварDSET = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE.Значение = "0";
				
				
				
				Если ПроцентСкидкиЗаказа = 100 Тогда 
					GrossSum = GrossSumЗаказа;
				//	Сообщить(" GrossSum 2" + GrossSum);
					GrossPR =  GrossPRЗаказа;
				КонецЕсли;	
				
				NET_PR   = Окр(GrossPR/(100+СтавкаНДС)*100,2);
				NET_SUM = Окр(GrossSum/(100+СтавкаНДС)*100,2);
				VAT_SUM   = Окр(GrossSum/(100+СтавкаНДС)*СтавкаНДС,2);
				GROSS_Set0 = GROSS_Set0 + GrossSum;   
				
				ДанныеДокТоварNET_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR.Значение = СтрЗаменить(NET_PR,".",",");
				
				ДанныеДокТоварGROSS_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				NET_Set0 = NET_Set0 + NET_SUM;   
				
				ДанныеДокТоварNET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
				
				DISC_SUM_Set0 = 0;
				
				ДанныеДокТоварDISCOUNT_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT.Значение = "0";   
				
				ДанныеДокТоварDISC_NET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
				
				VAT_Set0  = VAT_Set0 + VAT_SUM;
				
				ДанныеДокТоварVAT_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM.Значение = СтрЗаменить(VAT_SUM,".",",");   
				
				ДанныеДокТоварGROSS_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM.Значение = СтрЗаменить(GrossSum,".",",");   
				
				
				DISC_GR_SUM_Set0 = 0;
				ДанныеДокТоварDISC_GR_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT.Значение = "0";   
				
				
				//	//DSET 1  
				//ПроцентСкидкиЗаказа = Заказ.АкцияТЧ.СкидкаПоАкции;
				ПроцентСкидкиЗаказа = ТекДок.АкцияТЧ.СкидкаПоАкции;
				
				ДанныеДокТоварDSET1 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE1.Значение = "1";
				
				Сообщить("ПроцентСкидкиЗаказа 2 - " + ПроцентСкидкиЗаказа);
				
				Если ПроцентСкидкиЗаказа = 100 Тогда 
					GrossSumSet1         = Окр(GrossSumЗаказа*(100-ПроцентСкидкиЗаказа)/100,2);
					СуммаСкидкисНДС      = Окр(GrossSumЗаказа*ПроцентСкидкиЗаказа/100,2);
				Иначе	

//!!!!!!!!!		//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:12:53

										//*Пашков К.В.@РегионПродОптТорг, 2016-09-20 16:38:45
										//	GrossSumSet1         = Окр(GrossSum*(100-ТекДок.ПроцентПромоСкидки)/100,2);
										//	СуммаСкидкисНДС      = Окр(GrossSum*ТекДок.ПроцентПромоСкидки/100,2);
										// -------- заменено на:
										GrossSumSet1         = Окр(GrossSum*(100-ПроцентСкидкиЗаказа)/100,2);
										СуммаСкидкисНДС      = Окр(GrossSum*ПроцентСкидкиЗаказа/100,2);
										///Пашков К.В.@РегионПродОптТорг, 2016-09-20 16:38:45

					// -------- заменено на:
					//GrossSumSet1         = Окр(GrossSum*(100-1)/100,2);
					//СуммаСкидкисНДС      = Окр(GrossSum*1/100,2);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:12:53

				КонецЕсли;
				
				СуммаСкидкиБезНДС    = Окр(СуммаСкидкисНДС/(100+СтавкаНДС)*100,2);
				СуммаБезНДСБезСкидки = Окр(GrossSum/(100+СтавкаНДС)*100,2); 
				
				ДанныеДокТоварNET_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR1.Значение = СтрЗаменить(Окр(GrossPR/(100+СтавкаНДС)*100,2),".",",");
				
				ДанныеДокТоварGROSS_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR1.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				NET_SUM_Set1 = Окр(GrossSum/(100+СтавкаНДС)*100,2);
				NET_Set1 = NET_Set1 + NET_SUM_Set1;  
				
				ДанныеДокТоварNET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM1.Значение = СтрЗаменить(NET_SUM_Set1,".",",");   
				
				DISC_SUM_Set1 = DISC_SUM_Set1 + СуммаСкидкиБезНДС;
				
				ДанныеДокТоварDISCOUNT_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT1.Значение = СтрЗаменить(СуммаСкидкиБезНДС,".",",");   
				
				ДанныеДокТоварDISC_NET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM1.Значение = СтрЗаменить((СуммаБезНДСБезСкидки-СуммаСкидкиБезНДС),".",",");   
				
				VAT_SUM_Set1 = Окр(GrossSumSet1/(100+СтавкаНДС)*СтавкаНДС,2);
				VAT_Set1 = VAT_Set1 + VAT_SUM_Set1;
				
				ДанныеДокТоварVAT_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM1.Значение = СтрЗаменить(VAT_SUM_Set1,".",",");   
				
				GROSS_Set1 = GROSS_Set1 + GrossSumSet1;
				
				ДанныеДокТоварGROSS_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM1.Значение = СтрЗаменить(GrossSumSet1,".",",");   
				
				
				DISC_GR_SUM_Set0 = 0;
				ДанныеДокТоварDISC_GR_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT1.Значение = СтрЗаменить(СуммаСкидкисНДС,".",",");   
				
				
				//	//DSET 2  (в большинстве случаев будет такой же как DSET 1)
				
				ДанныеДокТоварDSET2 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE2.Значение = "2";
				
				
				ДанныеДокТоварNET_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR2.Значение = СтрЗаменить(Окр(GrossPR/(100+СтавкаНДС)*100,2),".",",");
				
				ДанныеДокТоварGROSS_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR2.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				ДанныеДокТоварNET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM2.Значение = СтрЗаменить(Окр(GrossSum/(100+СтавкаНДС)*100,2),".",",");   
				
				ДанныеДокТоварDISCOUNT_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT2.Значение = СтрЗаменить(СуммаСкидкиБезНДС,".",",");   
				
				ДанныеДокТоварDISC_NET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM2.Значение = СтрЗаменить((СуммаБезНДСБезСкидки-СуммаСкидкиБезНДС),".",",");   
				
				ДанныеДокТоварVAT_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM2.Значение = СтрЗаменить(VAT_SUM_Set1,".",",");   
				
				ДанныеДокТоварGROSS_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM2.Значение = СтрЗаменить(GrossSumSet1,".",",");   
				
				ДанныеДокТоварDISC_GR_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT2.Значение = СтрЗаменить(СуммаСкидкисНДС,".",",");   				  	
				
				
				
			КонецЦикла; 
			
         	ДанныеДокSUM_SETS = ДанныеДок.СоздатьПодчиненныйЭлемент("SUM_SETS");
         	
		 	ДанныеДокНSET = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
		 	 
		 	
			////HSet 0
		 	ДанныеДокSET_TYPE = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE.Значение = "0";
			
		 	ДанныеДокNET = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET.Значение = СтрЗаменить(NET_Set0,".",",");
			
		 	ДанныеДокDISC_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM.Значение = СтрЗаменить(DISC_SUM_Set0,".",",");
			                                               
		 	ДанныеДокDISC_GR_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM.Значение = СтрЗаменить(DISC_GR_SUM_Set0,".",",");
			
		 	ДанныеДокVAT = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT.Значение = СтрЗаменить(VAT_Set0,".",","); 
		
		 	ДанныеДокGROSS = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS.Значение = СтрЗаменить(GROSS_Set0,".",","); 
		
			////HSet 1   
		 	ДанныеДокНSET1 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
			
		 	ДанныеДокSET_TYPE1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE1.Значение = "1";
		                  
		 	ДанныеДокNET1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET1.Значение = СтрЗаменить(NET_Set1,".",",");
			
		 	ДанныеДокDISC_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM1.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
			                                               
		 	ДанныеДокDISC_GR_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM1.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
			
		 	ДанныеДокVAT1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT1.Значение = СтрЗаменить(VAT_Set1,".",","); 
		
		 	ДанныеДокGROSS1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS1.Значение = СтрЗаменить(GROSS_Set1,".",","); 

			////HSet 2 
		 	ДанныеДокНSET2 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
			
		 	ДанныеДокSET_TYPE2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE2.Значение = "2";
		                  
		 	ДанныеДокNET2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET2.Значение = СтрЗаменить(NET_Set1,".",",");
			
		 	ДанныеДокDISC_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM2.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
			                                               
		 	ДанныеДокDISC_GR_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM2.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
			
		 	ДанныеДокVAT2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT2.Значение = СтрЗаменить(VAT_Set1,".",","); 
		
		 	ДанныеДокGROSS2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS2.Значение = СтрЗаменить(GROSS_Set1,".",","); 
			
         	
			ДанныеДокWHS_SRC = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_SRC"); 

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-16 13:14:07
			//			ДанныеДокWHS_SRC.Значение = СокрЛП(ТекДок.Склад.Код); 
			ДанныеДокWHS_SRC.Значение = СокрЛП(Константа.КодФилиала);
			///Пашков К.В.@РегионПродОптТорг, 2016-09-16 13:14:07
			ДанныеДокWHS_DST = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_DST"); 
         	
			ДанныеДокSR_ID = ДанныеДок.СоздатьПодчиненныйЭлемент("SR_ID"); 

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:42:54
			//			ДанныеДокSR_ID.Значение = СокрЛП(ТекДок.ТорговыйАгент.Код); 
			ДанныеДокSR_ID.Значение = СокрЛП(ТекДок.Агент.Код); 
			///Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:42:54

			
		Иначе // возвраты
			
		    StatusDoc = "0";
			// Сначала отменим документ, перед тем как изменить   (в случае изменения даты документа)
			ТекДокПред = "";
			//Если ( ПустоеЗначение(ТекДок.ДатаИзменения) = 0) и (ТекДок.ДатаИзменения <> ТекДок.ДатаДок) и 
			//	(ТекДокПред <> ТекДок) и (ТекДок.Проведен()=1) Тогда
			//	StatusDoc = "1";
			//	ДатаДок = ТекДок.ДатаИзменения;
			//	ТекДокПред = ТекДок;
			//	ПовторВыгрузки = 1;
			//КонецЕсли;	
			
			
			ДанныеДокВнешКод = ДанныеДок.СоздатьПодчиненныйЭлемент("ISALES_ID");  // "DOC_NO DOC_DT (без времени) DOC_TP". Пример: "ДОК1 31.12.2010 1"
			ДанныеДокВнешКод.Значение = СформироватьКод1сДокумента(ТекДок.НомерДок,ТекДок.ДатаДок,ТипДокументаКод);
			
			ДанныеДокСтатус = ДанныеДок.СоздатьПодчиненныйЭлемент("STATUS");
			ДанныеДокСтатус.Значение = StatusDoc; 		
		
			//******************************************************************************

			ДанныеДокТип = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_TP");
			ДанныеДокТип.Значение =  "5";
			
			ДанныеДокНомер           = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_NO");
			ДанныеДокНомер.Значение  = СокрЛП(ТекДок.НомерДок); 
			
			ДанныеДокДатаВремя = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_DT"); //Дата и время документа: ДД.ММ.ГГГГ ЧЧ:ММ:СС
			ВремяЧ = "";
			ВремяМ = "";
			ВремяС = "";
			ТекДок.ПолучитьВремя(ВремяЧ,ВремяМ,ВремяС);

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 16:37:16
			//			ДанныеДокДатаВремя.Значение = СокрЛП(ТекДок.ДатаДок)+" "+ВремяЧ+":"+ВремяМ+":"+ВремяС;
			ДанныеДокДатаВремя.Значение = СокрЛП(ТекДок.ДатаДок);
			///Пашков К.В.@РегионПродОптТорг, 2016-09-21 16:37:16

			
			ДанныеДокСвязи = ДанныеДок.СоздатьПодчиненныйЭлемент("REFS"); // Связанные документы (зарегистрированные в iSales)
			ДанныеДокСвязь = ДанныеДокСвязи.СоздатьПодчиненныйЭлемент("REF");
			
			ДанныеДокСвязьТип = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_TP");
			ДанныеДокСвязьТип.Значение = "1";
			ДанныеДокСвязьНомер = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_NO");

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:25:30
			//			ДанныеДокСвязьНомер.Значение = СокрЛП(ТекДок.ДокОснование.НомерДок);
			ДанныеДокСвязьНомер.Значение = СокрЛП(ТекДок.ДокументОснование.НомерДок);
			///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:25:30

			ДанныеДокСвязьДата = ДанныеДокСвязь.СоздатьПодчиненныйЭлемент("REF_DT");
			ДанныеДокСвязьДата.Значение =  Формат(ТекДок.ДокументОснование.ДатаДок,"ДДДММГГГГ");       
			
			                   
			ДанныеДокОрганизация           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_FROM");
			//ДанныеДокОрганизация.Значение  = ТекДок.ТорговаяТочка.Код;;
			ДанныеДокОрганизация.Значение  = СокрЛП(Константа.КодФилиала) + СокрЛП(ТекДок.Клиент.Код); 
			

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:37:38
			//			ДанныеДокГрузополучатель           = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_TO");
			//			ДанныеДокГрузополучатель.Значение  = глОрганизацияiSales; 
			//			
			//			ДанныеДокПродавец           = ДанныеДок.СоздатьПодчиненныйЭлемент("SELLER");
			//			ДанныеДокПродавец.Значение  = ТекДок.Контрагент.Код; 
			//			
			//			ДанныеДокКонтрагент           = ДанныеДок.СоздатьПодчиненныйЭлемент("PAYER");
			//			ДанныеДокКонтрагент.Значение  = глОрганизацияiSales;; 
			// -------- заменено на:
			ДанныеДокГрузополучатель            = ДанныеДок.СоздатьПодчиненныйЭлемент("SHIP_TO");
			ДанныеДокГрузополучатель.Значение	= глОрганизацияiSales;
			ДанныеДокПродавец           		= ДанныеДок.СоздатьПодчиненныйЭлемент("SELLER");
			ДанныеДокПродавец.Значение 			= СокрЛП(Константа.КодФилиала) + СокрЛП(ТекДок.Клиент.Код); 
			ДанныеДокКонтрагент 	            = ДанныеДок.СоздатьПодчиненныйЭлемент("PAYER");
			ДанныеДокКонтрагент.Значение  	    = глОрганизацияiSales; 
			///Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:37:38

			       
		
			ДанныеДокКоличествоСтрок      = ДанныеДок.СоздатьПодчиненныйЭлемент("ITEMS_AMOUNT");
			ДанныеДокКоличествоСтрок.Значение  = ""+ТекДок.КоличествоСтрок(); 
			
			ДанныеДокКомментариц      = ДанныеДок.СоздатьПодчиненныйЭлемент("COMMS");
			ДанныеДокКомментариц.Значение  = ТекДок.Комментарий; 

			
			ДанныеДокКоличествоСтрок      = ДанныеДок.СоздатьПодчиненныйЭлемент("ITEMS_AMOUNT");
			ДанныеДокКоличествоСтрок.Значение  = ""+ТекДок.КоличествоСтрок(); 
			
			ДанныеДокКомментариц      = ДанныеДок.СоздатьПодчиненныйЭлемент("COMMS");
			ДанныеДокКомментариц.Значение  = ТекДок.Комментарий; 
			
			   
         	ДанныеДокITEMS = ДанныеДок.СоздатьПодчиненныйЭлемент("DOC_ITEMS"); 
		
		
			GrossSumSet1         = 0;
			СуммаСкидкисНДС      = 0;
			СуммаСкидкиБезНДС    = 0;
			СуммаБезНДСБезСкидки = 0;
			
			СтавкаНДС     = 0;
			ПроцентСкидки = 0;
			СуммаСкидки   = 0;
			GrossSum      = 0;
			GrossPR       = 0;
			
			NET_Set0         = 0;
			DISC_SUM_Set0    = 0;
			DISC_GR_SUM_Set0 = 0;
			VAT_Set0         = 0;
			GROSS_Set0       = 0;
			NET_Set1         = 0;
			DISC_SUM_Set1    = 0;
			DISC_GR_SUM_Set1 = 0;
			VAT_Set1         = 0;
			GROSS_Set1       = 0;     
			          
			Док = ТекДок;
			ТекДок.ВыбратьСтроки();
			Пока ТекДок.ПолучитьСтроку()=1 Цикл

				//+Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:04:42
				ПроцентСкидки = 0;
				текЦена = ПолучитьЦенуКлиентаБезАкций(Док.Клиент, ТекДок.Товар, ТекДок.ДатаДок);
				///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:04:42

				
				НомерСтрочки  = ТекДок.НомерСтроки;

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:22:42
				//				iКод          = СокрЛП(ТекДок.Товар.КодАсумт);
				iКод          = СокрЛП(ТекДок.Товар.КодАсумт);
				///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:22:42


//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:07:49
////!!!!				СтавкаНДС     = ПолучитьСтавкуНДС(ТекДок.СтавкаНДС);
				текНДС =  ТекДок.Товар.СтавкаНДС.Получить(ТекущаяДата());
				СтавкаНДС     = ПолучитьСтавкуНДС(текНДС);
///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:07:49


				//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:53:58
				//				ПроцентСкидки = ТекДок.ПроцентПромоСкидки;
				ПроцентСкидки = 0;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:53:58

				СуммаСкидки   = ТекДок.Сумма*ПроцентСкидки/100;
				GrossSum      = Окр(ТекДок.Цена*ТекДок.Количество*(100-ПроцентСкидки)/100,2);
				GrossPR       = Окр(GrossSum/ТекДок.Количество,2);
				

				
				ДанныеДокТовар = ДанныеДокITEMS.СоздатьПодчиненныйЭлемент("DOC_ITEM");
				
				ДанныеДокНомерСтроки = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("LINE_NO");
				ДанныеДокНомерСтроки.Значение = СокрЛП(НомерСтрочки);
				
				ДанныеДокТоварКодIsales = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SFA_ID");
				ДанныеДокТоварКодIsales.Значение = iКод;  
				
				ДанныеДокТоварКод1С = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("ACC_ID");

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:33:59
				//				ДанныеДокТоварКод1С.Значение = СокрЛП(ТекДок.Номенклатура.Код);  
				ДанныеДокТоварКод1С.Значение = СокрЛП(ТекДок.Товар.АртикулПроизводителя);  
				///Пашков К.В.@РегионПродОптТорг, 2016-09-21 14:33:59

				
				
				ДанныеДокТоварКоличество = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("QUANTITY");
				ДанныеДокТоварКоличество.Значение = ТекДок.Количество;
				
				ДанныеДокТоварЕдИзм = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("UOM_ID");

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:08:00
				//				ДанныеДокТоварЕдИзм.Значение = СокрЛП(ТекДок.Номенклатура.БазоваяЕдиница.ОКЕИ.Код);
				текЕдиница = "796";//**000
				ДанныеДокТоварЕдИзм.Значение = текЕдиница;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:08:00
		
				
				
				ДанныеДокТоварSETS = ДанныеДокТовар.СоздатьПодчиненныйЭлемент("SETS");
				
				ДанныеДокТоварDSET = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE.Значение = "0";
				
				
				Если ПроцентСкидкиЗаказа = 100 Тогда 
					GrossSum = GrossSumЗаказа;
					GrossPR =  GrossPRЗаказа;
				КонецЕсли;	
				
				NET_PR   = Окр(GrossPR/(100+СтавкаНДС)*100,2);
				NET_SUM = Окр(GrossSum/(100+СтавкаНДС)*100,2);
				VAT_SUM   = Окр(GrossSum/(100+СтавкаНДС)*СтавкаНДС,2);
				GROSS_Set0 = GROSS_Set0 + GrossSum;   			          
               
				ДанныеДокТоварNET_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR.Значение = СтрЗаменить(NET_PR,".",",");
				
				ДанныеДокТоварGROSS_PR = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				NET_Set0 = NET_Set0 + NET_SUM;   
				
				ДанныеДокТоварNET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
				
				DISC_SUM_Set0 = 0;
				
				ДанныеДокТоварDISCOUNT_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT.Значение = "0";   
				
				ДанныеДокТоварDISC_NET_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM.Значение = СтрЗаменить(NET_SUM,".",",");   
				
				VAT_Set0  = VAT_Set0 + VAT_SUM;
				
				ДанныеДокТоварVAT_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM.Значение = СтрЗаменить(VAT_SUM,".",",");   
				
				ДанныеДокТоварGROSS_SUM = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM.Значение = СтрЗаменить(GrossSum,".",",");   
				
				
				DISC_GR_SUM_Set0 = 0;
				ДанныеДокТоварDISC_GR_AMOUNT = ДанныеДокТоварDSET.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT.Значение = "0";   				

				//	//DSET 1  
				
				ДанныеДокТоварDSET1 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE1.Значение = "1";
				
				Если ПроцентСкидкиЗаказа = 100 Тогда 
					GrossSumSet1         = Окр(GrossSumЗаказа*(100-ПроцентСкидкиЗаказа)/100,2);
					СуммаСкидкисНДС      = Окр(GrossSumЗаказа*ПроцентСкидкиЗаказа/100,2);
				Иначе	

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:41:02
					//					GrossSumSet1         = Окр(GrossSum*(100-ТекДок.ПроцентПромоСкидки)/100,2);
					//					СуммаСкидкисНДС      = Окр(GrossSum*ТекДок.ПроцентПромоСкидки/100,2);
					// -------- заменено на:
					GrossSumSet1         = Окр(GrossSum*(100-ПроцентСкидкиЗаказа)/100,2);
					СуммаСкидкисНДС      = Окр(GrossSum*ПроцентСкидкиЗаказа/100,2);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:41:02

				КонецЕсли;
				
				СуммаСкидкиБезНДС    = Окр(СуммаСкидкисНДС/(100+СтавкаНДС)*100,2);
				СуммаБезНДСБезСкидки = Окр(GrossSum/(100+СтавкаНДС)*100,2); 
				
				ДанныеДокТоварNET_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR1.Значение = СтрЗаменить(Окр(GrossPR/(100+СтавкаНДС)*100,2),".",",");
				
				ДанныеДокТоварGROSS_PR1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR1.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				NET_SUM_Set1 = Окр(GrossSum/(100+СтавкаНДС)*100,2);
				NET_Set1 = NET_Set1 + NET_SUM_Set1;  
				
				ДанныеДокТоварNET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM1.Значение = СтрЗаменить(NET_SUM_Set1,".",",");   
				
				DISC_SUM_Set1 = DISC_SUM_Set1 + СуммаСкидкиБезНДС;
				
				ДанныеДокТоварDISCOUNT_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT1.Значение = СтрЗаменить(СуммаСкидкиБезНДС,".",",");   
				
				ДанныеДокТоварDISC_NET_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM1.Значение = СтрЗаменить((СуммаБезНДСБезСкидки-СуммаСкидкиБезНДС),".",",");   
				
				VAT_SUM_Set1 = Окр(GrossSumSet1/(100+СтавкаНДС)*СтавкаНДС,2);
				VAT_Set1 = VAT_Set1 + VAT_SUM_Set1;
				
				ДанныеДокТоварVAT_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM1.Значение = СтрЗаменить(VAT_SUM_Set1,".",",");   
				
				GROSS_Set1 = GROSS_Set1 + GrossSumSet1;
				
				ДанныеДокТоварGROSS_SUM1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM1.Значение = СтрЗаменить(GrossSumSet1,".",",");   
				
				
				DISC_GR_SUM_Set0 = 0;
				ДанныеДокТоварDISC_GR_AMOUNT1 = ДанныеДокТоварDSET1.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT1.Значение = СтрЗаменить(СуммаСкидкисНДС,".",",");   
				
				
				//	//DSET 2  (в большинстве случаев будет такой же как DSET 1)
				
				ДанныеДокТоварDSET2 = ДанныеДокТоварSETS.СоздатьПодчиненныйЭлемент("DSET"); 
				
				ДанныеДокТоварSET_TYPE2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
				ДанныеДокТоварSET_TYPE2.Значение = "2";
				
				
				ДанныеДокТоварNET_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_PR");
				ДанныеДокТоварNET_PR2.Значение = СтрЗаменить(Окр(GrossPR/(100+СтавкаНДС)*100,2),".",",");
				
				ДанныеДокТоварGROSS_PR2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_PR");
				ДанныеДокТоварGROSS_PR2.Значение = СтрЗаменить(GrossPR,".",",");
				
				
				ДанныеДокТоварNET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("NET_SUM");
				ДанныеДокТоварNET_SUM2.Значение = СтрЗаменить(Окр(GrossSum/(100+СтавкаНДС)*100,2),".",",");   
				
				ДанныеДокТоварDISCOUNT_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISCOUNT_AMOUNT");
				ДанныеДокТоварDISCOUNT_AMOUNT2.Значение = СтрЗаменить(СуммаСкидкиБезНДС,".",",");   
				
				ДанныеДокТоварDISC_NET_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_NET_SUM");
				ДанныеДокТоварDISC_NET_SUM2.Значение = СтрЗаменить((СуммаБезНДСБезСкидки-СуммаСкидкиБезНДС),".",",");   
				
				ДанныеДокТоварVAT_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("VAT_SUM");
				ДанныеДокТоварVAT_SUM2.Значение = СтрЗаменить(VAT_SUM_Set1,".",",");   
				
				ДанныеДокТоварGROSS_SUM2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("GROSS_SUM");
				ДанныеДокТоварGROSS_SUM2.Значение = СтрЗаменить(GrossSumSet1,".",",");   
				
				ДанныеДокТоварDISC_GR_AMOUNT2 = ДанныеДокТоварDSET2.СоздатьПодчиненныйЭлемент("DISC_GR_AMOUNT");
				ДанныеДокТоварDISC_GR_AMOUNT2.Значение = СтрЗаменить(СуммаСкидкисНДС,".",",");   				  	
		
			//Запишем качество возвращаемого товара
			
			ДанныеДокТоварRET_RSN = ДанныеДок.СоздатьПодчиненныйЭлемент("RET_RSN");
			
			ДанныеДокТоварRET_RSN.Значение = "0";   				  	
			//Если не (ПустоеЗначение(ТекДок.Качество) = 1) Тогда
			//	ДанныеДокТоварRET_RSN.Значение = "0";   				  	
			//Иначе	
			//	Если ТекДок.Качество = ВыбГодные Тогда
			//		ДанныеДокТоварRET_RSN.ЗаписатьТекст("0");
			//	ИначеЕсли ТекДок.Качество = ВыбБрак Тогда
			//		ДанныеДокТоварRET_RSN.ЗаписатьТекст("1");
			//	ИначеЕсли ТекДок.Качество = ВыбРезерв Тогда
			//		ДанныеДокТоварRET_RSN.ЗаписатьТекст("2");
			//	КонецЕсли;
			//КонецЕсли;	 
			
		КонецЦикла; 
			
			ДанныеДокSUM_SETS = ДанныеДок.СоздатьПодчиненныйЭлемент("SUM_SETS");
			
			ДанныеДокНSET = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
			
			
			////HSet 0
			ДанныеДокSET_TYPE = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE.Значение = "0";
			
			ДанныеДокNET = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET.Значение = СтрЗаменить(NET_Set0,".",",");
			
			ДанныеДокDISC_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM.Значение = СтрЗаменить(DISC_SUM_Set0,".",",");
			
			ДанныеДокDISC_GR_SUM = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM.Значение = СтрЗаменить(DISC_GR_SUM_Set0,".",",");
			
			ДанныеДокVAT = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT.Значение = СтрЗаменить(VAT_Set0,".",","); 
			
			ДанныеДокGROSS = ДанныеДокНSET.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS.Значение = СтрЗаменить(GROSS_Set0,".",","); 
			
			////HSet 1   
			ДанныеДокНSET1 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
			
			ДанныеДокSET_TYPE1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE1.Значение = "1";
			
			ДанныеДокNET1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET1.Значение = СтрЗаменить(NET_Set1,".",",");
			
			ДанныеДокDISC_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM1.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
			
			ДанныеДокDISC_GR_SUM1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM1.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
			
			ДанныеДокVAT1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT1.Значение = СтрЗаменить(VAT_Set1,".",","); 
			
			ДанныеДокGROSS1 = ДанныеДокНSET1.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS1.Значение = СтрЗаменить(GROSS_Set1,".",","); 
			
			////HSet 2 
			ДанныеДокНSET2 = ДанныеДокSUM_SETS.СоздатьПодчиненныйЭлемент("HSET");
			
			ДанныеДокSET_TYPE2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("SET_TYPE");
			ДанныеДокSET_TYPE2.Значение = "2";
			
			ДанныеДокNET2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("NET");
			ДанныеДокNET2.Значение = СтрЗаменить(NET_Set1,".",",");
			
			ДанныеДокDISC_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_SUM");
			ДанныеДокDISC_SUM2.Значение = СтрЗаменить(DISC_SUM_Set1,".",",");
			
			ДанныеДокDISC_GR_SUM2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("DISC_GR_SUM");
			ДанныеДокDISC_GR_SUM2.Значение = СтрЗаменить(DISC_GR_SUM_Set1,".",","); 
			
			ДанныеДокVAT2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("VAT");
			ДанныеДокVAT2.Значение = СтрЗаменить(VAT_Set1,".",","); 
			
			ДанныеДокGROSS2 = ДанныеДокНSET2.СоздатьПодчиненныйЭлемент("GROSS");
			ДанныеДокGROSS2.Значение = СтрЗаменить(GROSS_Set1,".",","); 			
			          

//*Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:12:05
//		
//			ДанныеДокWHS_DST = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_DST/");
//			ДанныеДокWHS_DST.Значение = СокрЛП(ТекДок.Склад.Код);
//			
//			ДанныеДокSR_ID = ДанныеДок.СоздатьПодчиненныйЭлемент("SR_ID");
//			ДанныеДокSR_ID.Значение = СокрЛП(ТекДок.ТорговыйАгент.Код);
// -------- заменено на:
					ДанныеДокWHS_SRC = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_SRC"); 

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-16 13:14:07
			//			ДанныеДокWHS_SRC.Значение = СокрЛП(ТекДок.Склад.Код); 
			//ДанныеДокWHS_SRC.Значение = СокрЛП(Константа.КодФилиала);
			///Пашков К.В.@РегионПродОптТорг, 2016-09-16 13:14:07
			ДанныеДокWHS_DST = ДанныеДок.СоздатьПодчиненныйЭлемент("WHS_DST"); 
         	ДанныеДокWHS_DST.Значение = СокрЛП(Константа.КодФилиала);
			
			
			ДанныеДокSR_ID = ДанныеДок.СоздатьПодчиненныйЭлемент("SR_ID"); 

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:42:54
			//			ДанныеДокSR_ID.Значение = СокрЛП(ТекДок.ТорговыйАгент.Код); 
			ДанныеДокSR_ID.Значение = СокрЛП(ТекДок.Агент.Код); 
			///Пашков К.В.@РегионПродОптТорг, 2016-09-13 15:42:54

///Пашков К.В.@РегионПродОптТорг, 2016-09-21 15:12:05

			                                   
			ДанныеДокCREATE_DT = ДанныеДок.СоздатьПодчиненныйЭлемент("CREATE_DT");
			ДанныеДокCREATE_DT.Значение = СокрЛП(ТекДок.ДатаДок);
			
			ДанныеДокCREATE_DT = ДанныеДок.СоздатьПодчиненныйЭлемент("COUNTRY");
			ДанныеДокCREATE_DT.Значение = "RU";
			 
		
		КонецЕсли;
	
		
	КонецЦикла;	
		
	xml_ДанныеОтправки = Данные;
	Возврат 1;	
КонецФункции



//================================================================================================
Функция ПолучитьТЗДокументыПоступлениеТМЦ_()
	Перем Запрос, ТекстЗапроса;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПодготовитьДанныеПоступлениеТМЦ)
	//|с ВыбНачПериода по ВыбКонПериода;
	
	|ОбрабатыватьДокументы все;
	
	//|Обрабатывать НеПомеченныеНаУдаление;
	
	|Док	= Документ.ПоступлениеТМЦ.ТекущийДокумент;
	
	//|НомерДок		= Документ.ПоступлениеТМЦ.НомерДок;
	//|ДатаДок		= Документ.ПоступлениеТМЦ.ДатаДок;
	//|ВремяДок		= Документ.ПоступлениеТМЦ.ВремяДок;
    
	//|НомерДокВходящий	= Документ.ПоступлениеТМЦ.НомерДокВходящий;
	//|ДатаДокВходящий	= Документ.ПоступлениеТМЦ.ДатаДокВходящий;
	//|ДокОснование		= Документ.ПоступлениеТМЦ.ДокОснование;
	
	//|ДокВнешКод				= Документ.ПоступлениеТМЦ.is_Код;
	|ДокЗагруженИзiSales	= Документ.ПоступлениеТМЦ.ЗагруженИзiSales;
	|ДокВыгруженВiSales		= Документ.ПоступлениеТМЦ.ВыгруженВiSales;
	
	//|Склад	= Документ.ПоступлениеТМЦ.Склад;
	
	//|Номенклатура	= Документ.ПоступлениеТМЦ.Номенклатура;

	//|Количество		= Документ.ПоступлениеТМЦ.Количество;
	//|Единица		= Документ.ПоступлениеТМЦ.Единица;
	//|Коэффициент	= Документ.ПоступлениеТМЦ.Коэффициент;

	//|Цена		= Документ.ПоступлениеТМЦ.Цена;
	//|Сумма		= Документ.ПоступлениеТМЦ.Сумма;
	//|СтавкаНДС	= Документ.ПоступлениеТМЦ.СтавкаНДС;
	//|СуммаНДС	= Документ.ПоступлениеТМЦ.СуммаНДС;
	
	|Группировка Док;
	
	|Условие(ДокЗагруженИзiSales = 1);
	|Условие(ДокВыгруженВiSales = 0);
	|"//}}ЗАПРОС
	;
	
	// TODO:
	// добавить 
	// код v8
	//(Док.Проведен = ИСТИНА) ИЛИ (Док.Проведен = ЛОЖЬ И Док.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1))
	
	// Если ошибка в запросе, то выходим
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТЗДокументыПоступлениеТМЦ()
	Перем Запрос, ТекстЗапроса;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПодготовитьДанныеПоступлениеТМЦ)
	//|с ВыбНачПериода по ВыбКонПериода;
	
	|ОбрабатыватьДокументы все;
	
	//|Обрабатывать НеПомеченныеНаУдаление;
	
	|Док	= Документ.ПоступлениеТМЦ.ТекущийДокумент;
	
	//|НомерДок		= Документ.ПоступлениеТМЦ.НомерДок;
	//|ДатаДок		= Документ.ПоступлениеТМЦ.ДатаДок;
	//|ВремяДок		= Документ.ПоступлениеТМЦ.ВремяДок;
    
	//|НомерДокВходящий	= Документ.ПоступлениеТМЦ.НомерДокВходящий;
	//|ДатаДокВходящий	= Документ.ПоступлениеТМЦ.ДатаДокВходящий;
	//|ДокОснование		= Документ.ПоступлениеТМЦ.ДокОснование;
	
	//|ДокВнешКод				= Документ.ПоступлениеТМЦ.is_Код;
	|ДокЗагруженИзiSales	= Документ.ПоступлениеТМЦ.ЗагруженИзiSales;
	|ДокВыгруженВiSales		= Документ.ПоступлениеТМЦ.ВыгруженВiSales;
	
	//|Склад	= Документ.ПоступлениеТМЦ.Склад;
	
	//|Номенклатура	= Документ.ПоступлениеТМЦ.Номенклатура;

	//|Количество		= Документ.ПоступлениеТМЦ.Количество;
	//|Единица		= Документ.ПоступлениеТМЦ.Единица;
	//|Коэффициент	= Документ.ПоступлениеТМЦ.Коэффициент;

	//|Цена		= Документ.ПоступлениеТМЦ.Цена;
	//|Сумма		= Документ.ПоступлениеТМЦ.Сумма;
	//|СтавкаНДС	= Документ.ПоступлениеТМЦ.СтавкаНДС;
	//|СуммаНДС	= Документ.ПоступлениеТМЦ.СуммаНДС;
	
	|Группировка Док;
	
	|Условие(ДокЗагруженИзiSales = 1);
	|Условие(ДокВыгруженВiSales = 0);
	|"//}}ЗАПРОС
	;
	
	// TODO:
	// добавить 
	// код v8
	//(Док.Проведен = ИСТИНА) ИЛИ (Док.Проведен = ЛОЖЬ И Док.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1))
	
	// Если ошибка в запросе, то выходим
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции

//================================================================================================
Функция ПолучитьТЗДокументыРеализация_()
	Перем Запрос, ТекстЗапроса;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПодготовитьДанныеРеализация)
	//|с ВыбНачПериода по ВыбКонПериода;
	
	|ОбрабатыватьДокументы все;
	
	//|Обрабатывать НеПомеченныеНаУдаление;
	
	|Док	= Документ.Реализация.ТекущийДокумент;
	
	|ДокЗагруженИзiSales	= Документ.Реализация.ЗагруженИзiSales;
	|ДокВыгруженВiSales		= Документ.Реализация.ВыгруженВiSales;
	
	|Группировка Док;
	
	|Условие(ДокЗагруженИзiSales = 1);
	|Условие(ДокВыгруженВiSales = 0);
	|"//}}ЗАПРОС
	;
	
	// TODO:
	// добавить 
	// код v8
	//(Док.Проведен = ИСТИНА) ИЛИ (Док.Проведен = ЛОЖЬ И Док.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1))
	
	// Если ошибка в запросе, то выходим
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции

//================================================================================================
Функция ПолучитьТЗДокументыРеализация()
	Сообщить(">> Выгрузка расходных накладных", "i");
	//Время1 = ТекущееВремя();
	
	//ВыгруженныхДокументов = 0;

	Если НачДата > КонДата Тогда
		Сообщить("ВыгрузитьРасходныеНакладныеИз1С", "Неправильный диапазон дат.");
		Возврат 0;
	КонецЕсли;

	// Получим список ТП для отбора
	Если ВыбТорговыеПредставители.РазмерСписка() > 0 Тогда
		ВыбранныеТП = СоздатьОбъект("СписокЗначений");
		Для сч = 1 по ВыбТорговыеПредставители.РазмерСписка() Цикл 
			Агент = ВыбТорговыеПредставители.ПолучитьЗначение(сч).Агент;
			ВыбранныеТП.ДобавитьЗначение(Агент);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(Накладные)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы все;
	|Без итогов;
	|Док = Документ.РасходнаяНакладная.ТекущийДокумент; 
	|Сумма = Документ.РасходнаяНакладная.Сумма;
	|Сотрудник = Документ.РасходнаяНакладная.Агент;   
	|Группировка Док;   
	|";
	
	// Если есть отбор по торговым представителям
	//Если ВыбТорговыеПредставители.РазмерСписка() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Сотрудник В ВыбранныеТП);";
//	КонецЕсли;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл	
		ТекДок = Запрос.Док;
		Сообщить(ТекДок);
		Если ПустоеЗначение(ТекДок) = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ТекДок.ТипУчета = 2 Тогда
			Продолжить;
		КонецЕсли;  
		Если (ТекДок.ПризнакНакладной <> Перечисление.ПризнРасхНакл.Продажа) Тогда
			Продолжить;
		КонецЕсли;
		
		
	КонецЦикла;	          
	
	//Если ВыгруженныхДокументов > 0 Тогда
	//	Сообщить("<< Расходные накладные выгружены", "i");
	//Иначе
	//	Сообщить("<< Нет новых расходных накладных", "i");
	//КонецЕсли;	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	Запрос.Выгрузить(тзДокумент);
	Сообщить("ВернутьТЗ.КоличествоСтрок()  "+ ВернутьТЗ.КоличествоСтрок());
	//
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции


//================================================================================================
Функция ПолучитьТЗДокументыВозврат_()
	Перем Запрос, ТекстЗапроса;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПодготовитьДанныеВозвратОтПокупателя1)
	//|с ВыбНачПериода по ВыбКонПериода;
	
	|ОбрабатыватьДокументы все;
	
	//|Обрабатывать НеПомеченныеНаУдаление;
	
	|Док	= Документ.ВозвратОтПокупателя.ТекущийДокумент;
	
	|ДокЗагруженИзiSales	= Документ.ВозвратОтПокупателя.ЗагруженИзiSales;
	|ДокВыгруженВiSales		= Документ.ВозвратОтПокупателя.ВыгруженВiSales;
	
	|Группировка Док;
	
	|Условие(ДокЗагруженИзiSales = 1);
	|Условие(ДокВыгруженВiSales = 0);
	|"//}}ЗАПРОС
	;
	
	// TODO:
	// добавить 
	// код v8
	//(Док.Проведен = ИСТИНА) ИЛИ (Док.Проведен = ЛОЖЬ И Док.ДатаИзменения <> ДАТАВРЕМЯ(1, 1, 1))
	
	// Если ошибка в запросе, то выходим
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьТЗДокументыВозврат()
	Перем Запрос, ТекстЗапроса;
	
	ПризнНакл = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя;

	// Получим список ТП для отбора
	Если ВыбТорговыеПредставители.РазмерСписка() > 0 Тогда
		ВыбранныеТП = СоздатьОбъект("СписокЗначений");
		Для сч = 1 по ВыбТорговыеПредставители.РазмерСписка() Цикл 
			Агент = ВыбТорговыеПредставители.ПолучитьЗначение(сч).Агент;
			ВыбранныеТП.ДобавитьЗначение(Агент);
		КонецЦикла;
	КонецЕсли;

	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПодготовитьДанныеВозвратОтПокупателя)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы все;
	|Без итогов;
	|Док = Документ.ПриходнаяНакладная.ТекущийДокумент; 
	|Сумма = Документ.ПриходнаяНакладная.Сумма;
	|Сотрудник = Документ.ПриходнаяНакладная.Агент;  
	|ПризнакНакладной = Документ.ПриходнаяНакладная.ПризнакНакладной;
	|Группировка Док;
	|Условие(ПризнакНакладной = ПризнНакл);
	|"//}}ЗАПРОС
	;
	
	// Если есть отбор по торговым представителям
//	Если ВыбТорговыеПредставители.РазмерСписка() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Сотрудник В ВыбранныеТП);";
		//ТекстЗапроса = ТекстЗапроса + "Условие(Сотрудник В ВыбранныеТП);";
//	КонецЕсли;
	
	// Если ошибка в запросе, то выходим
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВернутьТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВернутьТЗ);
	
	Если ВернутьТЗ.КоличествоСтрок() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ВернутьТЗ;
	КонецЕсли;
	
КонецФункции


//================================================================================================
Функция ОбработатьРезультаты(Результат);
    
	// TODO: проц. разбор результатов отправки док-тов, установка флагов доков
	// ...
	
	Возврат 1;

КонецФункции

//================================================================================================
Процедура ВыгрузитьДокументы_()
	
	Перем xml_ДанныеОтправки;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
		
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "InvoiceWaybillTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	xml_ДанныеОтправки	= Анализатор.СоздатьДокумент();
    ДанныеУзелДоки = xml_ДанныеОтправки.СоздатьПодчиненныйЭлемент("documents");
	
	ДоковОтправлено = 0;
	///////////////////////////////
	Если флВыбДокПоставки = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыПоступлениеТМЦ();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
				_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
				SOAP(_Контекст);
				Результат = _Контекст;
			 
				ПоказатьТЗ(Результат," ");
				
				ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	/////////////////////////////////
	Если флВыбДокРеализации = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыРеализация();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе	
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
				_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
				SOAP(_Контекст);
				Результат = _Контекст;
			 
				ПоказатьТЗ(Результат," ");
				
				ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	///////////////////////////////
	Если флВыбДокВозвраты = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыВозврат();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе	
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
				_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
				SOAP(_Контекст);
				Результат = _Контекст;
			 
				ПоказатьТЗ(Результат," ");
				
				ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	СообщитьОбычное("Всего отправлено документов: "+ДоковОтправлено  ,,ПотокВывода_ТаблоФайл);
	
КонецПроцедуры

Процедура ВыгрузитьДокументы()
	
	Перем xml_ДанныеОтправки;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
		
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "InvoiceWaybillTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	xml_ДанныеОтправки	= Анализатор.СоздатьДокумент();
    ДанныеУзелДоки = xml_ДанныеОтправки.СоздатьПодчиненныйЭлемент("documents");
	
	ДоковОтправлено = 0;
	///////////////////////////////
	Если флВыбДокПоставки = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыПоступлениеТМЦ();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
		//		_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
		//		SOAP(_Контекст);
				Результат = _Контекст;
			 
				ПоказатьТЗ(Результат," ");
				
				ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	/////////////////////////////////
	Если флВыбДокРеализации = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыРеализация();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе	
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
				_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
				SOAP(_Контекст);
				Результат = _Контекст;
			 
			//	ПоказатьТЗ(Результат," ");
				
			//	ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	///////////////////////////////
	Если флВыбДокВозвраты = 1 Тогда
		
		ТЗДоки = "";
		ТЗДоки = ПолучитьТЗДокументыВозврат();
		
		Если ТЗДоки = 0 Тогда
			СообщитьОбычное("Нет документов для отправки." ,,ПотокВывода_ТаблоФайл);
		Иначе	
			ДоковОтправлено = ДоковОтправлено + ТЗДоки.КоличествоСтрок();
			
			Если ПодготовитьДанныеПоТЗДок(ДанныеУзелДоки,ТЗДоки)=1 Тогда
				_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
				SOAP(_Контекст);
				Результат = _Контекст;
			 
				ПоказатьТЗ(Результат," ");
				
				ОбработатьРезультаты(Результат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	СообщитьОбычное("Всего отправлено документов: "+ДоковОтправлено  ,,ПотокВывода_ТаблоФайл);
	
КонецПроцедуры


//================================================================================================
Функция НайтиАгентаПоКоду_(ТорговыйАгентКод)
    
	СпрАгенты = СоздатьОбъект("Справочник.Агенты");
	
	ВозвратитьАгента = СоздатьОбъект("Справочник.Агенты");
	
	НайденоАгентов = 0;
	СпрАгенты.ВыбратьЭлементыПоРеквизиту("is_Код",ТорговыйАгентКод,0,0);
	Пока СпрАгенты.ПолучитьЭлемент() = 1 Цикл
		НайденоАгентов = НайденоАгентов + 1;
		ВозвратитьАгента = СпрАгенты.ТекущийЭлемент();
	КонецЦикла;
	
	Если НайденоАгентов = 1 Тогда
		Возврат ВозвратитьАгента;
	Иначе
		Возврат НайденоАгентов;
	КонецЕсли;
	
	//Возврат ВыбАгентЗаглушка; // временная заглушка
	
КонецФункции

Функция НайтиАгентаПоКоду(ТорговыйАгентКод)
    
	СпрАгенты = СоздатьОбъект("Справочник.Сотрудники");
	
	ВозвратитьАгента = СоздатьОбъект("Справочник.Сотрудники");
	
	НайденоАгентов = 0;
	Если  СпрАгенты.НайтиПоКоду(СокрЛП(ТорговыйАгентКод),0) = 1 Тогда
		Возврат СпрАгенты.ТекущийЭлемент();
	Иначе
		Возврат НайденоАгентов;
	КонецЕсли; ;
	
КонецФункции

//================================================================================================
Функция НайтиЕдИзмПоКодуОКЕИ_(Товар1С,ИдентификаторЕдИзм)
	
	//Сообщить("Функция НайтиЕдИзмПоКодуОКЕИ(Товар1С,ИдентификаторЕдИзм)"); // отладка
	//Сообщить("Товар1С "+Товар1С); // отладка
	//Сообщить("ИдентификаторЕдИзм "+ИдентификаторЕдИзм); // отладка
	
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	СпрОКЕИ = СоздатьОбъект("Справочник.ОКЕИ");
	
	Найдено = 0;
	ВернутьЕдИзм = "";
	Если СпрОКЕИ.НайтиПоКоду(ИдентификаторЕдИзм, 0) = 1 Тогда
		СпрЕдиницы.ИспользоватьВладельца(Товар1С);
		СпрЕдиницы.ВыбратьЭлементы();
		Пока СпрЕдиницы.ПолучитьЭлемент()=1 Цикл
			Если (СокрЛП(СпрЕдиницы.ОКЕИ.Код) = ИдентификаторЕдИзм) и (Найдено = 0) Тогда
			    ВернутьЕдИзм = СпрЕдиницы.ТекущийЭлемент();
				Найдено = Найдено + 1;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		//Сообщить("Возврат -1"); // отладка
		Возврат -1;
	КонецЕсли;
	
	Если Найдено = 1 Тогда
		//Сообщить("Возврат "+ВернутьЕдИзм.ОКЕИ.Наименование+"("+ВернутьЕдИзм.ОКЕИ.Код+")"); // отладка
		Возврат ВернутьЕдИзм;
	Иначе
		//Сообщить("Возврат "+Найдено); // отладка
		Возврат Найдено;
	КонецЕсли;
	
КонецФункции

Функция НайтиЕдИзмПоКодуОКЕИ(Товар1С,ИдентификаторЕдИзм)
	
		
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	//СпрОКЕИ = СоздатьОбъект("Справочник.ОКЕИ");
	
	Если ИдентификаторЕдИзм = "796" Тогда
		текЕд = Перечисление.ЕдиницыИзмерения.Штука;
	ИначеЕсли ИдентификаторЕдИзм = "778" Тогда
		текЕд = Перечисление.ЕдиницыИзмерения.Коробка;
	КонецЕсли;
	
	Найдено = 0;
	ВернутьЕдИзм = "";
	
		СпрЕдиницы.ИспользоватьВладельца(Товар1С);
		СпрЕдиницы.ВыбратьЭлементы();
		Пока СпрЕдиницы.ПолучитьЭлемент()=1 Цикл
			Если СпрЕдиницы.Единица = текЕд Тогда
			    ВернутьЕдИзм = СпрЕдиницы.ТекущийЭлемент();
				Найдено = Найдено + 1;
			КонецЕсли;	
		КонецЦикла;
	
	
	Если Найдено = 1 Тогда
		//Сообщить("Возврат "+ВернутьЕдИзм.ОКЕИ.Наименование+"("+ВернутьЕдИзм.ОКЕИ.Код+")"); // отладка
		Возврат ВернутьЕдИзм;
	Иначе
		//Сообщить("Возврат "+Найдено); // отладка
		Возврат Найдено;
	КонецЕсли;
	
КонецФункции


//================================================================================================
Функция ПодтвердитьТранзакцию(_объект, КодОбъекта)
	
	Перем xml_ДанныеОтправки;
	
	Если флОтправлятьСтатусОбработкиЗаявки = 0 Тогда
	    Возврат 1;
	КонецЕсли;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
		
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "UpdateTransferStatus";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	xml_ДанныеОтправки	= Анализатор.СоздатьДокумент();
    ДанныеТрансфера = xml_ДанныеОтправки.СоздатьПодчиненныйЭлемент("documents");
	
	ДанныеСтатусТрансфера = ДанныеТрансфера.СоздатьПодчиненныйЭлемент("pTransferStatus");
	
	ДанныеТипДокумента = ДанныеСтатусТрансфера.СоздатьПодчиненныйЭлемент("DOC_TYPE");
	ДанныеТипДокумента.Значение = СокрЛП(_объект);
	
	ДанныеКодДокумента = ДанныеСтатусТрансфера.СоздатьПодчиненныйЭлемент("DOC_ID");
	ДанныеКодДокумента.Значение = СокрЛП(КодОбъекта);
	
	
	_Контекст.ДанныеОтправки = xml_ДанныеОтправки;
	SOAP(_Контекст);
	ОтветОтСервера = _Контекст;
	//ПоказатьТЗ(ОтветОтСервера," "); // отладка
	
	Если ТипЗначенияСтр(ОтветОтСервера)="ТаблицаЗначений" Тогда
    	Возврат 0; 
	Иначе
		Результат = СокрЛП(ОтветОтСервера);
		Результат = СтрЗаменить(Результат, _объект + ":", "");
	КонецЕсли;
	
	Результат = Число(Результат);
	Если(Результат > 0) Тогда
		СообщитьОбычное("Объект "+_объект+":"+КодОбъекта+" > Отправлен статус обработки: Успешно" ,,ПотокВывода_ТаблоФайл)
	КонецЕсли;
	
	Возврат Результат;
		 
КонецФункции

//================================================================================================
Процедура ЗагрузитьПриходТМЦ()
	
	СообщитьОбычное("Начало импорта накладных доставки iSales" ,,ПотокВывода_ТаблоФайл);
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	Параметры.ДобавитьЗначение("docTypes");
	Параметры.ДобавитьЗначение("docStatuses");
	
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	
	Если флТолькоНовыеДоки = 1 Тогда
	   Значения.ДобавитьЗначение("0");
    Иначе 
	   Значения.ДобавитьЗначение("1");
	КонецЕсли;
	
	Значения.ДобавитьЗначение("6"); // "6" - "Накладная доставки - приход"
	Значения.ДобавитьЗначение("2"); // "2" - "Черновик"
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "DocumentsTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	ОтветОтСервера = _Контекст;
	
	СообщитьОбычное("Данные DocumentsTransfer получены." ,,ПотокВывода_ТаблоФайл);
		 
	ПоказатьТЗ(ОтветОтСервера," "); // отладка
    
	//ОтветОтСервера.ВыбратьСтроку(); // отладка
	//Возврат; // отладка
	
	Для СчетчикДок = 1 По ОтветОтСервера.КоличествоСтрок() Цикл
	
		ДанныеДокПриход = ОтветОтСервера.ПолучитьЗначение(СчетчикДок,"DOC"); // ТЗ с приходн.накл.
        
        ДанныеДокПриход.ПолучитьСтрокуПоНомеру(1);
		
		Если ЕстьErrorMessage(ДанныеДокПриход)=1 Тогда
			Сообщить("ЕстьErrorMessage"); // отладка
			
			ТЗЕррор = ДанныеДокПриход.ПолучитьЗначение(1,"ErrorMessage");
			
			СообщОшибка = ""+ТЗЕррор.ПолучитьЗначение(1,2)+"|"+ТЗЕррор.ПолучитьЗначение(1,3);
			
			СообщитьОбычное("> "+СообщОшибка ,,ПотокВывода_ТаблоФайл); // Информационное сообщение сервера, например, "|ERR|Нет данных"
			ДанныеДокПриход.ВыбратьСтроку(); // отладка
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(ДанныеДокПриход.STATUS)="1" Тогда
			Продолжить; // со статусом отменен(1) НЕ ЗАГРУЖАЕМ  
		КонецЕсли;
		
		ПриходВнешнийКод = СокрЛП(ДанныеДокПриход.ISALES_ID);
		
		ПриходНомерДок = СокрЛП(ДанныеДокПриход.DOC_NO);
		ПриходДатаДок = СокрЛП(ДанныеДокПриход.DOC_DT);
		
		ВнешДокНомер = СокрЛП(ДанныеДокПриход.EXT_NO);
		ВнешДокДата = СокрЛП(ДанныеДокПриход.EXT_DT);
		
		Грузоотправитель1с = СокрЛП(ДанныеДокПриход.SHIP_FROM);
		Грузополучатель1с = СокрЛП(ДанныеДокПриход.SHIP_TO); // код дистрибьютора при возврате
		Продавец1с = СокрЛП(ДанныеДокПриход.SELLER);
		Плательщик1с = СокрЛП(ДанныеДокПриход.PAYER); // код дистрибьютора при возврате
		
		//-----------------
   		// ТЧ Связанные Док
		//-----------------
   		ТЧ_СвязанныеДоки = ДанныеДокПриход.REFS;
		//ТЧ_СвязанныеДоки.ВыбратьСтроку(); // отладка
		ТЧ_СвязанныеДоки.ВыбратьСтроки();
		Пока ТЧ_СвязанныеДоки.ПолучитьСтроку() = 1 Цикл 
		    СвязанныйДок = ТЧ_СвязанныеДоки.REF; // ТЗ
			СвязанныйДок.ВыбратьСтроку(); // отладка
			
			//СвязанныйДок.REF_TP; // Тип для связанного документа
			//СвязанныйДок.REF_NO; // Номер связанного документа (заказа в SAP)
			//СвязанныйДок.REF_DT; // Дата связанного документа (дата заказа в SAP не указывается, т.е. пусто)
			
		КонецЦикла;
		//-----------------
   		// ТЧ Связанные Док
		//-----------------
		
		Сообщить("Загрузка документа накладной доставки iSales ("+ДанныеДокПриход.DOC_TP+")");
		
		ВидСоздаваемогоДока = "ПоступлениеТМЦ";
		Попытка
			НовыйДокПриход = СоздатьОбъект("Документ."+ВидСоздаваемогоДока);
		Исключение
			СообщитьОшибка(">>> "+ОписаниеОшибки() ,,ПотокВывода_ТаблоФайл);
			Продолжить;
		КонецПопытки;  
		
		Попытка 
			НачатьТранзакцию();
			
			НовыйДокПриход.Новый(); 
			НовыйДокПриход.is_Код = ПриходВнешнийКод;
			НовыйДокПриход.ЗагруженИзiSales = 1;
			
			НовыйДокПриход.НомерДок = ПриходНомерДок;
			НовыйДокПриход.ДатаДок = РабочаяДата();
			
			//НовыйДокПриход.ДатаВремяСоздания  = СокрЛП(ДанныеДокПриход.CREATE_DT);
			//НовыйДокПриход.ДатаВремяИзменения = СокрЛП(ДанныеДокПриход.EDIT_DT);
			// СокрЛП(ДанныеЗаказа.CREATE_DT) // Дата и время создания. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			// СокрЛП(ДанныеЗаказа.EDIT_DT) // Дата и время последнего изменения. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			
			НовыйДокПриход.АвтоВремяТекущее();
			
			//НовыйДокПриход.Контрагент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеДокПриход.SHIP_TO));
			//НовыйДокПриход.Договор
			
			ТорговыйАгентКод = СокрЛП(ДанныеДокПриход.SR_ID);
			ОфисАгентКод = СокрЛП(ДанныеДокПриход.AUTH_ID);
			
			Если ТорговыйАгентКод="" Тогда
				АгентКод = ОфисАгентКод;
			Иначе
				АгентКод = ТорговыйАгентКод;
			КонецЕсли;
			
			спрАгент = НайтиАгентаПоКоду(АгентКод);
			Если ТипЗначенияСтр(спрАгент)="Число" Тогда
				Сообщить("Не найден торговый агент с кодом:"+АгентКод+" | Заявка '"+ПриходНомерДок+"' не загружена!");
				Искл = 0/0; // вызываем исключение   
			Иначе
				НовыйДокПриход.Агент = спрАгент;
			КонецЕсли;
			
			//НовыйДокЗаявка.Проект = НовыйДокЗаявка.Агент.Проект;
			
//			НовыйДокПриход.Валюта	= глРубли;
//			НовыйДокПриход.Курс  	= глКурсДляВалюты(глРубли,НовыйДокПриход.ДатаДок); 

//			НовыйДокПриход.Автор = глПользователь; 
	
			НовыйДокПриход.Склад = ВыбСкладПепси;
			
			//НовыйДокПриход.ТипЦен = НовыйДокПриход.Договор.ТипЦен;

			НовыйДокПриход.Комментарий=СокрЛП(ДанныеДокПриход.COMMS); 
			
			Если Число(ДанныеДокПриход.ITEMS_AMOUNT) < 1 Тогда
				Сообщить("В документе-поступлении номер "+ПриходНомерДок+" нет номенклатуры!");
				Искл = 0/0; // вызываем исключение   
			КонецЕсли;
			
			//----------
   			// ТЧ_ДокПриход
			//----------
   			ТЧ_Док = ДанныеДокПриход.DOC_ITEMS;
			//ТЧ_Док.ВыбратьСтроку(); // отладка
			
			ТЧ_Док.ВыбратьСтроки();
			Пока ТЧ_Док.ПолучитьСтроку()=1 Цикл 
			    
	   			ТЧстрокаТМЦ = ТЧ_Док.DOC_ITEM;
				ТЧстрокаТМЦ.ПолучитьСтрокуПоНомеру(1);
				
				НомерСтр = СокрЛП(ТЧстрокаТМЦ.LINE_NO);
				
				ТМЦВнешКод = СокрЛП(ТЧстрокаТМЦ.SFA_ID);
				ТМЦКод1с = СокрЛП(ТЧстрокаТМЦ.ACC_ID);
				ТМЦ = НайтиТоварПоКодуiSales(ТМЦВнешКод);
				
				ТМЦКоличество = СокрЛП(ТЧстрокаТМЦ.QUANTITY);
				КодЕдИзм = СокрЛП(ТЧстрокаТМЦ.UOM_ID);
				ЕдИзмДок = НайтиЕдИзмПоКодуОКЕИ(ТМЦ,КодЕдИзм);

				НовыйДокПриход.НоваяСтрока();
				НовыйДокПриход.Номенклатура	= ТМЦ;
				НовыйДокПриход.Единица		= ЕдИзмДок;
				НовыйДокПриход.Коэффициент	= ЕдИзмДок.Коэффициент;
				НовыйДокПриход.Количество	= ТМЦКоличество;
				
			КонецЦикла; 
			
			НовыйДокПриход.Записать();
			Сообщить("> Создан документ-поступление ТМЦ, номер "+ПриходНомерДок,"i");
			
			ЗафиксироватьТранзакцию();
			
			Если флОтправлятьСтатусОбработкиЗаявки=1 Тогда
				
				UID_Док = СокрЛП(НовыйДокПриход.is_Код);
				Если ПодтвердитьТранзакцию(_объект_Документы, UID_Док)=0 Тогда
					Сообщить("Ошибка подтверждения заявки номер "+ПриходНомерДок+", код в iSales:"+ UID_Док,"!");    
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение  
			Сообщить(">>> Ошибка при создании документа-поступления ТМЦ, номер ["+ПриходНомерДок+"] | "+ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;	
		
	КонецЦикла;
	СообщитьОбычное("Конец импорта накладных доставки iSales." ,,ПотокВывода_ТаблоФайл);
 
КонецПроцедуры

//================================================================================================
Процедура ЗагрузитьДокументы()
	
	Если флВыбДокПоставки = 1 Тогда
		ЗагрузитьПриходТМЦ();	
	КонецЕсли;

КонецПроцедуры

//================================================================================================
Процедура ЗагрузитьЗаявки_()
	
	СообщитьОбычное("Начало импорта заказов из iSales" ,,ПотокВывода_ТаблоФайл);
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	
	Если флТолькоНовыеДоки = 1 Тогда
	   Значения.ДобавитьЗначение("0");
    Иначе 
	   Значения.ДобавитьЗначение("1");
    КонецЕсли;  
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "OrdersTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	ОтветОтСервера = _Контекст;
	
	СообщитьОбычное("Данные OrdersTransfer получены." ,,ПотокВывода_ТаблоФайл);
		 
	ПоказатьТЗ(ОтветОтСервера," "); // отладка
    
	//ОтветОтСервера.ВыбратьСтроку(); // отладка
	//Возврат; // отладка
	Сообщить("ОтветОтСервера.КоличествоСтрок()  - " +ОтветОтСервера.КоличествоСтрок());
	
	Для СчетчикЗаказов = 1 По ОтветОтСервера.КоличествоСтрок() Цикл
	
		ДанныеЗаказа = ОтветОтСервера.ПолучитьЗначение(СчетчикЗаказов,"DOC"); // ТЗ с заказом
		//ДанныеЗаказа.ВыбратьСтроку(); // отладка
        
        ДанныеЗаказа.ПолучитьСтрокуПоНомеру(1);
		
		Если ЕстьErrorMessage(ДанныеЗаказа)=1 Тогда
			Сообщить("ЕстьErrorMessage"); // отладка
			Продолжить;
		КонецЕсли;
		//Попытка
		//	Сообщить(""+ДанныеЗаказы.ПолучитьПараметрыКолонки("ErrorMessage"));
		//	ТЗошибки = ДанныеЗаказы.ПолучитьЗначение(СчетчикЗаказов,"ErrorMessage");	
		//	Сообщить(ТЗошибки.ПолучитьЗначение(1,"Status"));
		//	Продолжить;
		//Исключение
		//КонецПопытки;
		
		Если СокрЛП(ДанныеЗаказа.STATUS)="1" Тогда
			Продолжить; // со статусом отменен(1) НЕ ЗАГРУЖАЕМ  
		КонецЕсли;
		
		Если ВыбСкладПепси.Выбран()=1 Тогда 
		    Склад = СокрЛП(ДанныеЗаказа.WHS_SRC);
			//Если Склад <> СокрЛП(ВыбСкладПепси.Код) Тогда  // Временная затычка до решения  вопроса с кодом склада
			//	Продолжить;
			//КонецЕсли;
		КонецЕсли;		
		
		Сообщить("Загрузка документа заявки ("+ДанныеЗаказа.DOC_TP+")");
		
		//ВидСоздаваемогоДока = "ЗаявкаПокупателя";
		//ВидСоздаваемогоДока = "ЗаявкаiSales";
		  ВидСоздаваемогоДока = "ЗаявкаКлиента";
		
		Попытка
			НовыйДокЗаявка = СоздатьОбъект("Документ."+ВидСоздаваемогоДока);
		Исключение
			Сообщить(">>> "+ОписаниеОшибки(),"!!!");
			Продолжить;
		КонецПопытки;  
		
		НомерЗаявки = СокрЛП(ДанныеЗаказа.DOC_NO);
		
		Попытка 
			НачатьТранзакцию();
			
			
			НовыйДокЗаявка.Новый(); 
			//**002
			// Разобрать куда
			НовыйДокЗаявка.НомерДокументаКлиента = СокрЛП(ДанныеЗаказа.ISALES_ID);
			//НовыйДокЗаявка.ЗагруженИзiSales = 1;
			
			////НовыйДокЗаявка.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
			
			НовыйДокЗаявка.НомерДок = НомерЗаявки;
			НовыйДокЗаявка.ДатаДок = РабочаяДата();
			// СокрЛП(ДанныеЗаказа.DOC_DT) // Дата заказа: ДД.ММ.ГГГГ
			
			//**003
			// Разобрать куда
			//НовыйДокЗаявка.ДатаВремяСоздания  = СокрЛП(ДанныеЗаказа.CREATE_DT);
			//НовыйДокЗаявка.ДатаВремяИзменения = СокрЛП(ДанныеЗаказа.EDIT_DT);
			
 			//+Пашков К.В.@РегионПродОптТорг, 2016-09-09 10:33:13
			НовыйДокЗаявка.ДатаПечати = СокрЛП(ДанныеЗаказа.INC_DT);
			НовыйДокЗаявка.Отдел      = ОтделПепси;
			//-Пашков К.В.@РегионПродОптТорг, 2016-09-09 10:33:13

			
			
			// СокрЛП(ДанныеЗаказа.CREATE_DT) // Дата и время создания. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			// СокрЛП(ДанныеЗаказа.EDIT_DT) // Дата и время последнего изменения. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			НовыйДокЗаявка.АвтоВремяТекущее();
			//НовыйДокЗаявка.КпкДатаСоздания = ""; дата
			//НовыйДокЗаявка.КпкВремяСоздания = ""; строка
			
			// iSales:
			// PAYER - контрагент
			// SHIP_TO - торговая точка грузополучатель
			

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:13:15
			//			НовыйДокЗаявка.Контрагент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.SHIP_TO));
			НовыйДокЗаявка.Клиент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.SHIP_TO));
			
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:13:15


			//	Голова1С = iГлНайтиКонтрагента(SOAP.SOAP_ПолучитьПараметр(ДокXDTO,"PAYER"));
			
			//НовыйДокЗаявка.Договор
			
			ТорговыйАгентКод = СокрЛП(ДанныеЗаказа.SR_ID);
			ОфисАгентКод = СокрЛП(ДанныеЗаказа.AUTH_ID);
			
			Если ТорговыйАгентКод="" Тогда
				АгентКод = ОфисАгентКод;
			Иначе
				АгентКод = ТорговыйАгентКод;
			КонецЕсли;
			
			спрАгент = НайтиАгентаПоКоду(АгентКод);
			Если ТипЗначенияСтр(спрАгент)="Число" Тогда
				Сообщить("Не найден торговый агент с кодом:"+АгентКод+" | Заявка '"+НомерЗаявки+"' не загружена!");
				Искл = 0/0; // вызываем исключение   
			Иначе
				НовыйДокЗаявка.Агент = спрАгент;
			КонецЕсли;
			
			
	
			НовыйДокЗаявка.Склад = ВыбСкладПепси;
			

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 16:42:38
			//			НовыйДокЗаявка.ТипЦен = НовыйДокЗаявка.Договор.ТипЦен;
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 16:42:38



			НовыйДокЗаявка.Комментарий=СокрЛП(ДанныеЗаказа.COMMS); 
			
			Если Число(ДанныеЗаказа.ITEMS_AMOUNT) < 1 Тогда
				Сообщить("В документе-заявке нет номенклатуры!");
				Искл = 0/0; // вызываем исключение   
			КонецЕсли;
			
			//----------
   			// ТЧ_Заявки
			//----------
   			ТЧ_Заявки = ДанныеЗаказа.DOC_ITEMS;
			//ТЧ_Заявки.ВыбратьСтроку(); // отладка
			
			ТЧ_Заявки.ВыбратьСтроки();
			Пока ТЧ_Заявки.ПолучитьСтроку()=1 Цикл 
			    
				
	   			ТЧстрокаТМЦ = ТЧ_Заявки.DOC_ITEM;
				ТЧстрокаТМЦ.ПолучитьСтрокуПоНомеру(1);
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:54:23
				//				Номенклатура = НайтиТоварПоКодуiSales(СокрЛП(ТЧстрокаТМЦ.SFA_ID));
				Товар = НайтиТоварПоКодуiSales(СокрЛП(ТЧстрокаТМЦ.SFA_ID));
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:54:23

				Количество = Число(ТЧстрокаТМЦ.QUANTITY);                                                   
				
				КодЕдИзм = СокрЛП(ТЧстрокаТМЦ.UOM_ID);


				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:20:32
				//				ЕдИзмДок = НайтиЕдИзмПоКодуОКЕИ(Номенклатура,КодЕдИзм);	
				ЕдИзмДок = НайтиЕдИзмПоКодуОКЕИ(Товар,КодЕдИзм);	
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:20:32

				Если ТипЗначенияСтр(ЕдИзмДок)="Число" Тогда

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:30:32
					//					Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Номенклатура+": не найдена единица измерения с кодом "+КодЕдИзм+"(или найдено несколько таких единиц)!");
					Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Товар+": не найдена единица измерения с кодом "+КодЕдИзм+"(или найдено несколько таких единиц)!");
					///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:30:32

					Искл = 0/0; // вызываем исключение   
				Иначе

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:37:32
					//					БазоваяЕдиницаИзмерения = Номенклатура.БазоваяЕдиница;
					БазоваяЕдиницаИзмерения = Товар.БазоваяЕдиницаИзмерения ;
					
					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					//БазовыйКоэф = БазоваяЕдиницаИзмерения.Коэффициент;
					БазовыйКоэф = ЕдиницаИзм.Коэффициент;
					
					///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:37:32

					
					Если БазовыйКоэф = 0 Тогда

						//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:50:31
						//						Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Номенклатура+": базовая единица измерения с коэффициентом 0! Документ будет пропущен!");
						Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Товар+": базовая единица измерения с коэффициентом 0! Документ будет пропущен!");
						///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:50:31

					КонецЕсли;

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 11:45:37
					//					Количество = (Количество*ЕдИзмДок.Коэффициент)/БазовыйКоэф;
				
					///Пашков К.В.@РегионПродОптТорг, 2016-09-09 11:45:37

				КонецЕсли;
				
				НовыйДокЗаявка.НоваяСтрока();
				//ТЧстрокаТМЦ.SFA_ID 	// код в iS
				//ТЧстрокаТМЦ.ACC_ID    // код в 1с

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:00:30
				//				НовыйДокЗаявка.Номенклатура = Номенклатура;                                                                                  
				НовыйДокЗаявка.Товар = Товар;                                                                                  
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:00:30

				
				//Промо может и не быть
				Попытка 

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 13:10:30
					//					НовыйДокЗаявка.НазваниеПромо = СокрЛП(ТЧстрокаТМЦ.DESC);
					НовыйДокЗаявка.АкцияТЧ = НайтиАкциюПоКодуiSales(ТЧстрокаТМЦ.DESC);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-09 13:10:30

					Сообщить(ТЧстрокаТМЦ.DESC);
				Исключение
				КонецПопытки;
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 21:27:03
				//				НовыйДокЗаявка.Единица = БазоваяЕдиницаИзмерения;
				//НовыйДокЗаявка.Единица = ЕдиницаИзм;
				НовыйДокЗаявка.Единица = ЕдИзмДок;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-08 21:27:03


				//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:00:21
				//				НовыйДокЗаявка.Коэффициент = БазоваяЕдиницаИзмерения.Коэффициент;//!!!!!!!!!!!!!!!!!!!!
				
//**005				/// Сделать как функцию!
			//	БазоваяЕдиницаИзмерения = Товар.БазоваяЕдиницаИзмерения ;
					

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 20:51:58
					//					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-08 20:51:58

					//БазовыйКоэф = БазоваяЕдиницаИзмерения.Коэффициент;
					
					БазовыйКоэф = ЕдиницаИзм.Коэффициент;
				//
				
				НовыйДокЗаявка.Коэффициент = БазовыйКоэф;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:00:21

				НовыйДокЗаявка.Количество = Количество;
				
				                   
				// из v8 =========================================
				СуммаПоСтрокеБезСкидки = 0;
				Скидка = 0;
				СетыЦен = ТЧстрокаТМЦ.SETS;
				Для СчетчикСетов = 1 По СетыЦен.КоличествоСтрок() Цикл // перебор трех сетов
					
					ТЗСет = СетыЦен.ПолучитьЗначение(СчетчикСетов,1);
					
					
					// Переписать на правильное формирование цены или узнать в каких единицах должен формироваться документ
					
					Если Число(ТЗСет.SET_TYPE) = 2 Тогда
                    	СуммаПоСтрокеБезСкидки = ПолучитьЧислоИзСтроки(ТЗСет.GROSS_SUM)+ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT) ;
						НовыйДокЗаявка.Цена = (ПолучитьЧислоИзСтроки(ТЗСет.GROSS_PR) - ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/Количество) ;
					    Если СуммаПоСтрокеБезСкидки=0 Тогда
						Иначе

							//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:58:39
							//							НовыйДокЗаявка.ПроцентСкидкиНаценки =  Окр(100*ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/СуммаПоСтрокеБезСкидки,2);	
					//		НовыйДокЗаявка.Наценка =  Окр(100*ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/СуммаПоСтрокеБезСкидки,2);	
							///Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:58:39

					    КонецЕсли;
						НовыйДокЗаявка.Сумма = ПолучитьЧислоИзСтроки(ТЗСет.GROSS_SUM);
					КонецЕсли;
				//	НовыйДокЗаявка.СуммаНДС  = ПолучитьЧислоИзСтроки(ТЗСет.VAT_SUM);//!!!!!!!!!
					
				КонецЦикла;
				// ========================================= из v8
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:55:44
				//				НовыйДокЗаявка.СтавкаНДС = НовыйДокЗаявка.Номенклатура.СтавкаНДС;
				//				НовыйДокЗаявка.СтавкаНП = НовыйДокЗаявка.Номенклатура.СтавкаНП;
				// -------- заменено на:
				НовыйДокЗаявка.НДС = НовыйДокЗаявка.Товар.СтавкаНДС;
				//НовыйДокЗаявка.СтавкаНП = НовыйДокЗаявка.Номенклатура.СтавкаНП;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:55:44

				
			КонецЦикла; 
            

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:04:46
			//			НовыйДокЗаявка.СуммаВзаиморасчетов = НовыйДокЗаявка.Итог("Сумма");
			
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:04:46

			
			НовыйДокЗаявка.Записать();
			Сообщить("> Создана новая заявка с номером "+НомерЗаявки,"i");
			
			ЗафиксироватьТранзакцию();
			
			Если флОтправлятьСтатусОбработкиЗаявки=1 Тогда
				// v8
				//НомерДокумента = SOAP.SOAP_ПолучитьПараметр(Заказ,"ISALES_ID");
				//Если SOAP_ПодтвердитьТранзакцию(сРазделУчета_Заявки, НомерДокумента)=0 тогда
				//	SOAP.iЛог("Документ не найден в iSales:" + НомерДокумента,1);
				//КонецЕсли;
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 16:32:19
				//				UID_Заявки = СокрЛП(НовыйДокЗаявка.is_Код);
				// -------- заменено на:
				UID_Заявки = СокрЛП(НовыйДокЗаявка.НомерДокументаКлиента);
				///Пашков К.В.@РегионПродОптТорг, 2016-09-09 16:32:19

				Если ПодтвердитьТранзакцию(_объект_Заявки, UID_Заявки)=0 Тогда
					Сообщить("Ошибка подтверждения заявки номер "+НомерЗаявки+", код в iSales:"+ UID_Заявки,"!");    
				КонецЕсли;
			КонецЕсли;
		Исключение  
			Сообщить(">>> Ошибка при создании документа-заявки номер ["+НомерЗаявки+"] | "+ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;	
		
	КонецЦикла;
   
	СообщитьОбычное("Конец импорта заказов." ,,ПотокВывода_ТаблоФайл);
 
КонецПроцедуры

Процедура ЗагрузитьЗаявки()
	
	СообщитьОбычное("Начало импорта заказов из iSales" ,,ПотокВывода_ТаблоФайл);
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение("username");
	Параметры.ДобавитьЗначение("password");
	Параметры.ДобавитьЗначение("dtFrom");
	Параметры.ДобавитьЗначение("dtTo");
	Параметры.ДобавитьЗначение("includeAlreadyProcessedItems");
	
	Значения = СоздатьОбъект("СписокЗначений");
	Значения.ДобавитьЗначение(сИмяПользователя);
	Значения.ДобавитьЗначение(сПароль);
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(НачДата));
	Значения.ДобавитьЗначение(ДатаВСтрокуПараметр(КонДата));
	
	Если флТолькоНовыеДоки = 1 Тогда
	   Значения.ДобавитьЗначение("0");
    Иначе 
	   Значения.ДобавитьЗначение("1");
    КонецЕсли;  
	
	_Контекст = СоздатьОбъект("ТаблицаЗначений");
	_Контекст.НоваяКолонка("Процедура");
	_Контекст.НоваяКолонка("Метод");
	_Контекст.НоваяКолонка("Параметры");
	_Контекст.НоваяКолонка("Значения");
	_Контекст.НоваяКолонка("ДанныеОтправки");
	_Контекст.НоваяКолонка("КешироватьСервисы");
	
	_Контекст.НоваяСтрока();
	_Контекст.Процедура         = "SOAP_Execute";
	_Контекст.Метод             = "OrdersTransfer";
	_Контекст.Параметры         = Параметры;
	_Контекст.Значения          = Значения;
	_Контекст.КешироватьСервисы = КешироватьСервисы;
	
	SOAP(_Контекст);
	ОтветОтСервера = _Контекст;
	
	СообщитьОбычное("Данные OrdersTransfer получены." ,,ПотокВывода_ТаблоФайл);
	
	
	Для СчетчикЗаказов = 1 По ОтветОтСервера.КоличествоСтрок() Цикл
	
		ДанныеЗаказа = ОтветОтСервера.ПолучитьЗначение(СчетчикЗаказов,"DOC"); // ТЗ с заказом
		        
        ДанныеЗаказа.ПолучитьСтрокуПоНомеру(1);
		
		Если ЕстьErrorMessage(ДанныеЗаказа)=1 Тогда
			Сообщить("ЕстьErrorMessage"); // отладка
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(ДанныеЗаказа.STATUS)="1" Тогда
			Продолжить; // со статусом отменен(1) НЕ ЗАГРУЖАЕМ  
		КонецЕсли;
		
		Если ВыбСкладПепси.Выбран()=1 Тогда 
		    Склад = СокрЛП(ДанныеЗаказа.WHS_SRC);
			Если Склад <> СокрЛП(ВыбСкладПепсиКод) Тогда 
				Сообщить("Не определен склад, склад по документам из iSales - " + Склад);
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		Сообщить("Загрузка документа заявки ("+ДанныеЗаказа.DOC_TP+")");
		
		  ВидСоздаваемогоДока = "ЗаявкаКлиента";
		
		Попытка
			НовыйДокЗаявка = СоздатьОбъект("Документ."+ВидСоздаваемогоДока);
		Исключение
			Сообщить(">>> "+ОписаниеОшибки(),"!!!");
			Продолжить;
		КонецПопытки;  
		
		НомерЗаявки = СокрЛП(ДанныеЗаказа.DOC_NO);
		
		Попытка 
			НачатьТранзакцию();
			//Создание документа
			// ** Шапка ** 			
			НовыйДокЗаявка.Новый(); 
			//**002
			// Разобрать куда
			НовыйДокЗаявка.НомерДокументаКлиента = СокрЛП(ДанныеЗаказа.ISALES_ID);
			//НовыйДокЗаявка.ЗагруженИзiSales = 1;
			////НовыйДокЗаявка.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
			
			НовыйДокЗаявка.НомерДок = НомерЗаявки;
			НовыйДокЗаявка.ДатаДок = РабочаяДата();
			// СокрЛП(ДанныеЗаказа.DOC_DT) // Дата заказа: ДД.ММ.ГГГГ
			
			//**003
			// Разобрать куда
			//НовыйДокЗаявка.ДатаВремяСоздания  = СокрЛП(ДанныеЗаказа.CREATE_DT);
			//НовыйДокЗаявка.ДатаВремяИзменения = СокрЛП(ДанныеЗаказа.EDIT_DT);
			
 			//+Пашков К.В.@РегионПродОптТорг, 2016-09-09 10:33:13
			НовыйДокЗаявка.ДатаПечати = СокрЛП(ДанныеЗаказа.INC_DT);
			НовыйДокЗаявка.Отдел      = ОтделПепси;
			//*********************************************************************************
			//текФормаРасчета = Перечисление.ЗначениеПоИдентификатору(СокрЛП(ДанныеЗаказа.atr1));
			//НовыйДокЗаявка.ФормыРасчета = текФормаРасчета;
			 
			
			//Попытка
				
			
			СписАтр = ДанныеЗаказа.ATTRS;
			
			

			
			СписАтр.ВыбратьСтроки();
			Пока СписАтр.ПолучитьСтроку()=1 Цикл 
				
				строкаСписАтр = СписАтр.ATTR;
				строкаСписАтр.ПолучитьСтрокуПоНомеру(1);
				
				
				
				ФормаРасчета = СокрЛП(строкаСписАтр.ATTR_NAME);
			
			
			Если ФормаРасчета = "ORD_GROUPCODE1" Тогда
				текФормаРасчета = ВернутьЗначениеПеречисленияПоПредаставлению(СокрЛП(строкаСписАтр.ATTR_VALUE));
			КонецЕсли;
			НовыйДокЗаявка.ФормыРасчета = текФормаРасчета;
			

		КонецЦикла;                               
	//Исключение
	//	Сообщить("Не найден Атрибут");
	//	КонецПопытки;
			//*********************************************************************************
			//-Пашков К.В.@РегионПродОптТорг, 2016-09-09 10:33:13

			// СокрЛП(ДанныеЗаказа.CREATE_DT) // Дата и время создания. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			// СокрЛП(ДанныеЗаказа.EDIT_DT) // Дата и время последнего изменения. Формат - ДД.ММ.ГГГГ ЧЧ.ММ.СС
			НовыйДокЗаявка.АвтоВремяТекущее();
			//НовыйДокЗаявка.КпкДатаСоздания = ""; дата
			//НовыйДокЗаявка.КпкВремяСоздания = ""; строка
			
			// iSales:
			// PAYER - контрагент
			// SHIP_TO - торговая точка грузополучатель
		
			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:13:15
			//			НовыйДокЗаявка.Контрагент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.SHIP_TO));

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-15 14:26:56
			//			НовыйДокЗаявка.Клиент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.SHIP_TO));
			текКлиент = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.PAYER));
			НовыйДокЗаявка.Клиент = текКлиент;
			//НовыйДокЗаявка.ТорговаяТочка = НайтиКонтрагентаПоКодуiSales(СокрЛП(ДанныеЗаказа.SHIP_TO));!!!!!!
			///Пашков К.В.@РегионПродОптТорг, 2016-09-15 14:26:56

			НовыйДокЗаявка.Фирма  = Константа.ОсновнаяФирма;
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:13:15
			
			ТорговыйАгентКод = СокрЛП(ДанныеЗаказа.SR_ID);
			ОфисАгентКод = СокрЛП(ДанныеЗаказа.AUTH_ID);
			
			
			
			Если ТорговыйАгентКод="" Тогда
				АгентКод = ОфисАгентКод;
			Иначе
				АгентКод = ТорговыйАгентКод;
			КонецЕсли;
			
			спрАгент = НайтиАгентаПоКоду(АгентКод);
			Если ТипЗначенияСтр(спрАгент)="Число" Тогда
				Сообщить("Не найден торговый агент с кодом:"+АгентКод+" | Заявка '"+НомерЗаявки+"' не загружена!");
				Искл = 0/0; // вызываем исключение   
			Иначе
				НовыйДокЗаявка.Агент = спрАгент;
			КонецЕсли;
	
			НовыйДокЗаявка.Склад = ВыбСкладПепси;

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 16:42:38
			//			НовыйДокЗаявка.ТипЦен = НовыйДокЗаявка.Договор.ТипЦен;
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 16:42:38

			НовыйДокЗаявка.Комментарий=СокрЛП(ДанныеЗаказа.COMMS); 
			
			Если Число(ДанныеЗаказа.ITEMS_AMOUNT) < 1 Тогда
				Сообщить("В документе-заявке нет номенклатуры!");
				Искл = 0/0; // вызываем исключение   
			КонецЕсли;
			
			//----------
   			// ТЧ_Заявки
			//----------
   			ТЧ_Заявки = ДанныеЗаказа.DOC_ITEMS;
			
			ТЧ_Заявки.ВыбратьСтроки();
			Пока ТЧ_Заявки.ПолучитьСтроку()=1 Цикл 
			    
				
	   			ТЧстрокаТМЦ = ТЧ_Заявки.DOC_ITEM;
				ТЧстрокаТМЦ.ПолучитьСтрокуПоНомеру(1);
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:54:23
				//				Номенклатура = НайтиТоварПоКодуiSales(СокрЛП(ТЧстрокаТМЦ.SFA_ID));
				Товар = НайтиТоварПоКодуiSales(СокрЛП(ТЧстрокаТМЦ.SFA_ID));
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:54:23

				Количество = Число(ТЧстрокаТМЦ.QUANTITY);                                                   
				
				КодЕдИзм = СокрЛП(ТЧстрокаТМЦ.UOM_ID);


				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:20:32
				//				ЕдИзмДок = НайтиЕдИзмПоКодуОКЕИ(Номенклатура,КодЕдИзм);	
				ЕдИзмДок = НайтиЕдИзмПоКодуОКЕИ(Товар,КодЕдИзм);	
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:20:32

				Если ТипЗначенияСтр(ЕдИзмДок)="Число" Тогда

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:30:32
					//					Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Номенклатура+": не найдена единица измерения с кодом "+КодЕдИзм+"(или найдено несколько таких единиц)!");
					Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Товар+": не найдена единица измерения с кодом "+КодЕдИзм+"(или найдено несколько таких единиц)!");
					///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:30:32

					Искл = 0/0; // вызываем исключение   
				Иначе

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:37:32
					//					БазоваяЕдиницаИзмерения = Номенклатура.БазоваяЕдиница;
					БазоваяЕдиницаИзмерения = Товар.БазоваяЕдиницаИзмерения ;
					
					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					//БазовыйКоэф = БазоваяЕдиницаИзмерения.Коэффициент;
					БазовыйКоэф = ЕдиницаИзм.Коэффициент;
					
					///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:37:32

					
					Если БазовыйКоэф = 0 Тогда

						//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:50:31
						//						Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Номенклатура+": базовая единица измерения с коэффициентом 0! Документ будет пропущен!");
						Сообщить("В документе-заявке ["+НомерЗаявки+"] номенклатура "+Товар+": базовая единица измерения с коэффициентом 0! Документ будет пропущен!");
						///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:50:31

					КонецЕсли;

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 11:45:37
					//					Количество = (Количество*ЕдИзмДок.Коэффициент)/БазовыйКоэф;
				
					///Пашков К.В.@РегионПродОптТорг, 2016-09-09 11:45:37

				КонецЕсли;
				
				НовыйДокЗаявка.НоваяСтрока();
				//ТЧстрокаТМЦ.SFA_ID 	// код в iS
				//ТЧстрокаТМЦ.ACC_ID    // код в 1с

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:00:30
				//				НовыйДокЗаявка.Номенклатура = Номенклатура;                                                                                  
				НовыйДокЗаявка.Товар = Товар;                                                                                  
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:00:30

				
				//Промо может и не быть
				Попытка 

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 13:10:30
					//					НовыйДокЗаявка.НазваниеПромо = СокрЛП(ТЧстрокаТМЦ.DESC);
					НовыйДокЗаявка.АкцияТЧ = НайтиАкциюПоКодуiSales(ТЧстрокаТМЦ.DESC);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-09 13:10:30

					Сообщить(ТЧстрокаТМЦ.DESC);
				Исключение
				КонецПопытки;
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 21:27:03
				//				НовыйДокЗаявка.Единица = БазоваяЕдиницаИзмерения;
				//НовыйДокЗаявка.Единица = ЕдиницаИзм;
				НовыйДокЗаявка.Единица = ЕдИзмДок;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-08 21:27:03


				//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:00:21
				//				НовыйДокЗаявка.Коэффициент = БазоваяЕдиницаИзмерения.Коэффициент;//!!!!!!!!!!!!!!!!!!!!
				
//**005				/// Сделать как функцию!
			//	БазоваяЕдиницаИзмерения = Товар.БазоваяЕдиницаИзмерения ;
					

					//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 20:51:58
					//					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					ЕдиницаИзм = глВернутьБазовуюЕдиницуТовара(Товар);
					///Пашков К.В.@РегионПродОптТорг, 2016-09-08 20:51:58

					//БазовыйКоэф = БазоваяЕдиницаИзмерения.Коэффициент;
					
				//	БазовыйКоэф = ЕдиницаИзм.Коэффициент;
				БазовыйКоэф = ЕдИзмДок.Коэффициент;
				
				//
				
				НовыйДокЗаявка.Коэффициент = БазовыйКоэф;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:00:21

				НовыйДокЗаявка.Количество = Количество;
				
				                   
				// из v8 =========================================
				СуммаПоСтрокеБезСкидки = 0;
				Скидка = 0;
				СетыЦен = ТЧстрокаТМЦ.SETS;
				Для СчетчикСетов = 1 По СетыЦен.КоличествоСтрок() Цикл // перебор трех сетов
					
					ТЗСет = СетыЦен.ПолучитьЗначение(СчетчикСетов,1);
					
					
					// Переписать на правильное формирование цены или узнать в каких единицах должен формироваться документ
					
					Если Число(ТЗСет.SET_TYPE) = 2 Тогда
                    	СуммаПоСтрокеБезСкидки = ПолучитьЧислоИзСтроки(ТЗСет.GROSS_SUM)+ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT) ;
						НовыйДокЗаявка.Цена = (ПолучитьЧислоИзСтроки(ТЗСет.GROSS_PR) - ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/Количество) ;
						//НовыйДокЗаявка.Цена = (ПолучитьЧислоИзСтроки(ТЗСет.GROSS_PR)) ;
					    Если СуммаПоСтрокеБезСкидки=0 Тогда
						Иначе

							//*Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:58:39
							//							НовыйДокЗаявка.ПроцентСкидкиНаценки =  Окр(100*ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/СуммаПоСтрокеБезСкидки,2);	
					//		НовыйДокЗаявка.Наценка =  Окр(100*ПолучитьЧислоИзСтроки(ТЗСет.DISC_GR_AMOUNT)/СуммаПоСтрокеБезСкидки,2);	
							///Пашков К.В.@РегионПродОптТорг, 2016-09-08 15:58:39

					    КонецЕсли;
						НовыйДокЗаявка.Сумма = ПолучитьЧислоИзСтроки(ТЗСет.GROSS_SUM);
					КонецЕсли;
				//	НовыйДокЗаявка.СуммаНДС  = ПолучитьЧислоИзСтроки(ТЗСет.VAT_SUM);//!!!!!!!!!
					
				КонецЦикла;
				// ========================================= из v8
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:55:44
				//				НовыйДокЗаявка.СтавкаНДС = НовыйДокЗаявка.Номенклатура.СтавкаНДС;
				//				НовыйДокЗаявка.СтавкаНП = НовыйДокЗаявка.Номенклатура.СтавкаНП;
				// -------- заменено на:
				НовыйДокЗаявка.НДС = НовыйДокЗаявка.Товар.СтавкаНДС;
				//НовыйДокЗаявка.СтавкаНП = НовыйДокЗаявка.Номенклатура.СтавкаНП;
				///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:55:44

				
			КонецЦикла; 
            

			//*Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:04:46
			//			НовыйДокЗаявка.СуммаВзаиморасчетов = НовыйДокЗаявка.Итог("Сумма");
			
			///Пашков К.В.@РегионПродОптТорг, 2016-09-07 14:04:46

			
			НовыйДокЗаявка.Записать();
			Сообщить("> Создана новая заявка с номером "+НомерЗаявки,"i");
			
			ЗафиксироватьТранзакцию();
			
			Если флОтправлятьСтатусОбработкиЗаявки=1 Тогда
				// v8
				//НомерДокумента = SOAP.SOAP_ПолучитьПараметр(Заказ,"ISALES_ID");
				//Если SOAP_ПодтвердитьТранзакцию(сРазделУчета_Заявки, НомерДокумента)=0 тогда
				//	SOAP.iЛог("Документ не найден в iSales:" + НомерДокумента,1);
				//КонецЕсли;
				

				//*Пашков К.В.@РегионПродОптТорг, 2016-09-09 16:32:19
				//				UID_Заявки = СокрЛП(НовыйДокЗаявка.is_Код);
				// -------- заменено на:
				UID_Заявки = СокрЛП(НовыйДокЗаявка.НомерДокументаКлиента);
				///Пашков К.В.@РегионПродОптТорг, 2016-09-09 16:32:19

				Если ПодтвердитьТранзакцию(_объект_Заявки, UID_Заявки)=0 Тогда
					Сообщить("Ошибка подтверждения заявки номер "+НомерЗаявки+", код в iSales:"+ UID_Заявки,"!");    
				КонецЕсли;
			КонецЕсли;
		Исключение  
			Сообщить(">>> Ошибка при создании документа-заявки номер ["+НомерЗаявки+"] | "+ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;	
		
	КонецЦикла;
   
	СообщитьОбычное("Конец импорта заказов." ,,ПотокВывода_ТаблоФайл);
 
КонецПроцедуры


//================================================================================================
Процедура ПриВыбореЗакладки(ном, зн)
	Если зн = "Номенклатура" Тогда
		Форма.ИспользоватьСлой("Общий,Номенклатура",2);
	ИначеЕсли зн = "Контрагенты" Тогда
		Форма.ИспользоватьСлой("Общий,Контрагенты",2);
	ИначеЕсли зн = "Прайс-листы" Тогда
		Форма.ИспользоватьСлой("Общий,Прайс_листы",2);
	ИначеЕсли зн = "Документы" Тогда
		Форма.ИспользоватьСлой("Общий,Документы",2);
	ИначеЕсли зн = "Остатки" Тогда
		Форма.ИспользоватьСлой("Общий,Остатки",2);	
	КонецЕсли;
КонецПроцедуры

//================================================================================================
Процедура УстановитьКонстантыПоУмолчанию()
	
	_ВыбГруппаНоменклатуры = СоздатьОбъект("Справочник.Номенклатура");
	Если _ВыбГруппаНоменклатуры.НайтиПоКоду("00011083",0) = 1 Тогда
		Константа.IS_ПапкаНоменклатура = _ВыбГруппаНоменклатуры.ТекущийЭлемент();
		Сообщить("Константа.IS_ПапкаНоменклатура успешно установлена!");
	КонецЕсли;
	Если ВыбГруппаНоменклатуры.Выбран()=0 Тогда
		ВыбГруппаНоменклатуры = Константа.IS_ПапкаНоменклатура;    
	КонецЕсли;
	
	
	_ВыбГруппаКонтрагентов = СоздатьОбъект("Справочник.Контрагенты");
	Если _ВыбГруппаКонтрагентов.НайтиПоКоду("00072769",0) = 1 Тогда
		Константа.IS_ПапкаКонтрагентов = _ВыбГруппаКонтрагентов.ТекущийЭлемент();
		Сообщить("Константа.IS_ПапкаКонтрагентов успешно установлена!");
	КонецЕсли;
	Если ВыбГруппаКонтрагентов.Выбран()=0 Тогда
		ВыбГруппаКонтрагентов = Константа.IS_ПапкаКонтрагентов;    
	КонецЕсли;

КонецПроцедуры

//================================================================================================
Процедура ПриОткрытии()
	Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда 
	    Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда 
           Предупреждение("Компонента v7plus.dll не найдена!"); 
		   СтатусВозврата(0);
		   Возврат;
        КонецЕсли; 
    КонецЕсли; 
    
	// Предопределенные
	//_ВыбСкладПепси = СоздатьОбъект("Справочник.Склады");
	//Если _ВыбСкладПепси.НайтиПоКоду("00004",0) = 1 Тогда
	//	ВыбСкладПепси = _ВыбСкладПепси.ТекущийЭлемент();	
	//КонецЕсли;
//	ВыбСкладПепси = Константа.IS_СкладПепси;
	
	//_ВыбСкладБракаПепси = СоздатьОбъект("Справочник.Склады");
	//Если _ВыбСкладБракаПепси.НайтиПоКоду("00011083",0) = 1 Тогда
	//	ВыбСкладБракаПепси = _ВыбСкладБракаПепси.ТекущийЭлемент();	
	//КонецЕсли;
	ВыбСкладБракаПепси = Константа.IS_СкладПепсиБрак;	
	
	//_ТипЦенДистриб = СоздатьОбъект("Справочник.ТипыЦен");
	//Если _ТипЦенДистриб.НайтиПоКоду("00004",0) = 1 Тогда
	//	ТипЦенДистриб = _ТипЦенДистриб.ТекущийЭлемент();	
	//КонецЕсли;
	ТипЦенДистриб = Константа.IS_ОсновнойТипЦенПепси;//_ТипЦенДистриб.ТекущийЭлемент();	

	//_ВыбГруппаНоменклатуры = СоздатьОбъект("Справочник.Номенклатура");
	//Если _ВыбГруппаНоменклатуры.НайтиПоКоду("00011083",0) = 1 Тогда
	//	ВыбГруппаНоменклатуры = _ВыбГруппаНоменклатуры.ТекущийЭлемент();	
	//КонецЕсли;
	ВыбГруппаНоменклатуры = Константа.IS_ПапкаНоменклатура;	
    
	ВыбГруппаКонтрагентов = Константа.IS_ПапкаКонтрагентов;
	
	
	_ВыбБазоваяЕдИзм = СоздатьОбъект("Справочник.ОКЕИ");
	Если _ВыбБазоваяЕдИзм.НайтиПоКоду(сИдЕдИзмШт,0) = 1 Тогда
		ВыбБазоваяЕдИзм = _ВыбБазоваяЕдИзм.ТекущийЭлемент();	
	КонецЕсли;

	_ВыбЕдИзмУпак = СоздатьОбъект("Справочник.ОКЕИ");
	Если _ВыбЕдИзмУпак.НайтиПоКоду(сИдЕдИзмУп,0) = 1 Тогда
		ВыбЕдИзмУпак = _ВыбЕдИзмУпак.ТекущийЭлемент();	
	КонецЕсли;
	//
	
    ОткрытьЛогФайл();	
	

    //*Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:39:58
    //    сИмяПользователя    = ""; 
    //    сПароль             = "";
    // -------- заменено на:
    сИмяПользователя    = "3-user_m_001"; 
    сПароль             = "Az192837";
    ///Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:39:58

	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Номенклатура");
	Форма.Закладки.ДобавитьЗначение("Контрагенты");
	Форма.Закладки.ДобавитьЗначение("Прайс-листы");
	Форма.Закладки.ДобавитьЗначение("Документы");
	Форма.Закладки.ДобавитьЗначение("Остатки");

	ПриВыбореЗакладки(1, "Номенклатура");
	
	Если ПустоеЗначение(НачДата) = 1 Тогда
		НачДата = РабочаяДата();
	КонецЕсли;

	Если ПустоеЗначение(КонДата) = 1 Тогда
		КонДата = РабочаяДата()+1;
	КонецЕсли;	
КонецПроцедуры  


//+Пашков К.В.@РегионПродОптТорг, 2016-09-12 14:31:04
Процедура РаботаСоСписком(ТСписок,ТДействие,ВидСпр)
	ТДействие=НРег(ТДействие);
	Если ТДействие="добавить" Тогда
		ТС=ТСписок.ТекущаяСтрока();
		ТЗ="";
		Если ТС>0 Тогда
			ТЗ=ТСписок.ПолучитьЗначение(ТС);
		КонецЕсли;
		КФ=0;
		ОткрытьПодбор("Справочник."+ВидСпр,,КФ,0,ТЗ);
		КФ.ВыборГруппы(1);
	ИначеЕсли ТДействие="добавитьнесколько" Тогда
		ТС=ТСписок.ТекущаяСтрока();
		ТЗ="";
		Если ТС>0 Тогда
			ТЗ=ТСписок.ПолучитьЗначение(ТС);
		КонецЕсли;
		КФ=0;
		ОткрытьПодбор("Справочник."+ВидСпр,,КФ,1,ТЗ);
		КФ.ВыборГруппы(1);
	ИначеЕсли ТДействие="удалить" Тогда
		ТС=ТСписок.ТекущаяСтрока();
		Если ТС>0 Тогда
			ТСписок.УдалитьЗначение(ТС);
			ТСписок.ТекущаяСтрока(ТСписок.РазмерСписка());
		КонецЕсли;
	ИначеЕсли ТДействие="удалитьвсе" Тогда
		ТСписок.УдалитьВсе();
	КонецЕсли;
КонецПроцедуры


Процедура ОбработкаПодбора(ВыбЗначение)
	//Если ВыбЗначение.Вид() = "Контрагенты" Тогда
	//	Если ВыбКлиенты.Принадлежит(ВыбЗначение) = 0 Тогда
	//		ВыбКлиенты.ДобавитьЗначение(ВыбЗначение);
	//		ВыбКлиенты.ТекущаяСтрока(ВыбКлиенты.РазмерСписка());
	//	КонецЕсли;
	//КонецЕсли;
	Если ВыбЗначение.Вид() = "МТМаршруты" Тогда
		Если ВыбТорговыеПредставители.Принадлежит(ВыбЗначение) = 0 Тогда
			ВыбТорговыеПредставители.ДобавитьЗначение(ВыбЗначение);
			ВыбТорговыеПредставители.ТекущаяСтрока(ВыбТорговыеПредставители.РазмерСписка());
		КонецЕсли;
	КонецЕсли;
	//Если ВыбЗначение.Вид() = "Номенклатура" Тогда
	//	Если ВыбТовары.Принадлежит(ВыбЗначение) = 0 Тогда
	//		ВыбТовары.ДобавитьЗначение(ВыбЗначение);
	//		ВыбТовары.ТекущаяСтрока(ВыбТовары.РазмерСписка());
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры



///Пашков К.В.@РегионПродОптТорг, 2016-09-12 14:31:04




//================================================================================================
// Ед.изм. Штука
сИдЕдИзмШт = "796"; // базовая ед.изм.
// упаковка
сИдЕдИзмУп = "778";
//  RCS - роккейс
сИдЕдИзмРк = "200"; //       
// кг и грамм
сИдЕдИзмКГ = "166";
сИдЕдИзмГР = "163";

флТолькоНовыеДоки = 1;

_объект_Заявки = "ORDS";
_объект_Документы = "DOCS";

СписокЕдиниц = СоздатьОбъект("СписокЗначений");
СписокЕдиниц.ДобавитьЗначение("796","шт.");
СписокЕдиниц.ДобавитьЗначение("778","уп.");
СписокЕдиниц.ДобавитьЗначение("200","Кейс.");
СписокЕдиниц.ДобавитьЗначение("166","кг");
СписокЕдиниц.ДобавитьЗначение("163","гр.");

// Настройка вывода сообщений
ПотокВывода_ТаблоФайл = 0;
ПотокВывода_Табло     = 1;
ПотокВывода_Файл      = 2;

КешироватьСервисы     = 0;

 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 10:02:46
 ВключитьЛогирование  = 1;



//*Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:25:44
//АдресБиблиотекиSOAP = "c:\_iSales\pivo_db\ExtForms\iSales\";
  АдресБиблиотекиSOAP = "E:\iSales\";
///Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:25:44


_ИмяЛогФайла        = АдресБиблиотекиSOAP + "log\" + СокрЛП(ИмяПользователя()) + "_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_1C.txt";


 //+Пашков К.В.@РегионПродОптТорг, 2016-09-01 16:06:56
 
 глОрганизацияiSales = "375";   
 
 
тзПрайсы = СоздатьОбъект("ТаблицаЗначений");
тзКонтрПрайс = СоздатьОбъект("ТаблицаЗначений");
тзДинамика = СоздатьОбъект("ТаблицаЗначений");

СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
спрОтделы = СоздатьОбъект("Справочник.ТорговыеОтделы");

ТабЗначДинамика = СоздатьОбъект("ТаблицаЗначений");
ТабЗначДинамика.НоваяКолонка("Номенклатура","Справочник.Номенклатура");

Если Число(Константа.КодФилиала) = 0 Тогда
	СпрКонтрагенты.НайтиПоКоду("НС08277");
	группаПокупатели = СпрКонтрагенты.ТекущийЭлемент();
ИначеЕсли Число(Константа.КодФилиала) = 1 Тогда
	СпрКонтрагенты.НайтиПоКоду("00002");
	группаПокупатели = СпрКонтрагенты.ТекущийЭлемент();
ИначеЕсли Число(Константа.КодФилиала) = 3 Тогда
	СпрКонтрагенты.НайтиПоКоду("0000001");
	группаПокупатели = СпрКонтрагенты.ТекущийЭлемент();
	спрОтделы.НайтиПоКоду("4");
	ОтделПепси = спрОтделы.ТекущийЭлемент();
ИначеЕсли Число(Константа.КодФилиала) = 4 Тогда 
	СпрКонтрагенты.НайтиПоКоду("Б0117");
	группаПокупатели = СпрКонтрагенты.ТекущийЭлемент();
	спрОтделы.НайтиПоКоду("10");
	ОтделПепси = спрОтделы.ТекущийЭлемент();
КонецЕсли;

тзТестПрайс = СоздатьОбъект("ТаблицаЗначений");
тзТестПрайс.НоваяКолонка("Номенклатура");
тзТестПрайс.НоваяКолонка("ИмяПрайса");

тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10064";
тзТестПрайс.ИмяПрайса = "11";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10211";
тзТестПрайс.ИмяПрайса = "13,2";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10268";
тзТестПрайс.ИмяПрайса = "22";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10413";
тзТестПрайс.ИмяПрайса = "22";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10543";
тзТестПрайс.ИмяПрайса = "22";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10680";
тзТестПрайс.ИмяПрайса = "118";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10845";
тзТестПрайс.ИмяПрайса = "17,7";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10880";
тзТестПрайс.ИмяПрайса = "29,5";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10896";
тзТестПрайс.ИмяПрайса = "17,7";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "10977";
тзТестПрайс.ИмяПрайса = "29,5";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "11003";
тзТестПрайс.ИмяПрайса = "22";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "11057";
тзТестПрайс.ИмяПрайса = "47,2";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "11058";
тзТестПрайс.ИмяПрайса = "47,2";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "11059";
тзТестПрайс.ИмяПрайса = "23,6";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "11914";
тзТестПрайс.ИмяПрайса = "38,5";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "12030";
тзТестПрайс.ИмяПрайса = "15";
тзТестПрайс.НоваяСтрока();
тзТестПрайс.Номенклатура = "12035";
тзТестПрайс.ИмяПрайса = "11,8";


тзТестПрайсРозница = СоздатьОбъект("ТаблицаЗначений");
тзТестПрайсРозница.НоваяКолонка("Номенклатура");
тзТестПрайсРозница.НоваяКолонка("ИмяПрайса");

тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10064";
тзТестПрайсРозница.ИмяПрайса = "16,5";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10211";
тзТестПрайсРозница.ИмяПрайса = "59,88";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10268";
тзТестПрайсРозница.ИмяПрайса = "20";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10413";
тзТестПрайсРозница.ИмяПрайса = "33";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10543";
тзТестПрайсРозница.ИмяПрайса = "22";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10680";
тзТестПрайсРозница.ИмяПрайса = "118";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10845";
тзТестПрайсРозница.ИмяПрайса = "13,2";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10880";
тзТестПрайсРозница.ИмяПрайса = "29,5";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10896";
тзТестПрайсРозница.ИмяПрайса = "17,7";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "10977";
тзТестПрайсРозница.ИмяПрайса = "29,5";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "11003";
тзТестПрайсРозница.ИмяПрайса = "37,93";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "11057";
тзТестПрайсРозница.ИмяПрайса = "47,2";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "11058";
тзТестПрайсРозница.ИмяПрайса = "12";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "11059";
тзТестПрайсРозница.ИмяПрайса = "23,6";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "11914";
тзТестПрайсРозница.ИмяПрайса = "38,5";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "12030";
тзТестПрайсРозница.ИмяПрайса = "15";
тзТестПрайсРозница.НоваяСтрока();
тзТестПрайсРозница.Номенклатура = "12035";
тзТестПрайсРозница.ИмяПрайса = "11,8";


КонтрСети = СоздатьОбъект("ТаблицаЗначений");
КонтрСети.НоваяКолонка("Код");
КонтрСети.НоваяСтрока();
КонтрСети.Код = "2737";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "01121";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "КР00382";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "КР00150";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "КР00341";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "КР00002";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "00218";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "2670";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "01156";
КонтрСети.НоваяСтрока();
КонтрСети.Код = "КР00371";


КонтрСетиРозница = СоздатьОбъект("ТаблицаЗначений");
КонтрСетиРозница.НоваяКолонка("Код");
КонтрСетиРозница.НоваяСтрока();
КонтрСетиРозница.Код = "ЭС6947";
КонтрСетиРозница.НоваяСтрока();
КонтрСетиРозница.Код = "КР00032";
КонтрСетиРозница.НоваяСтрока();
КонтрСетиРозница.Код = "00129";
КонтрСетиРозница.НоваяСтрока();
КонтрСетиРозница.Код = "КР00454";
КонтрСетиРозница.НоваяСтрока();
КонтрСетиРозница.Код = "КР00466";


ВыбСкладПепсиКод = Константа.КодФилиала;


//-Пашков К.В.@РегионПродОптТорг, 2016-09-01 16:32:57

