Перем СерверДанных;              
Перем ПутьДоWSDL;
Перем ПространствоИмен;
Перем КешироватьСервисы;
Перем КешироватьWSDL;
Перем ИспользоватьSSL;
Перем Протокол;
Перем ПолучатьСтатусыВТЗ;
Перем ИспользоватьГзипПриОтправке;

Перем S_сервер;
Перем S_пользователь;
Перем S_пароль;
Перем S_ntlm;

Перем _ЛогФайл;
Перем _ИмяЛогФайла;

Перем ПотокВывода_ТаблоФайл;
Перем ПотокВывода_Табло;
Перем ПотокВывода_Файл;

Перем _Сообщение;
Перем флагОтладка;
Перем АдресБиблиотекиSOAP;

Перем xml_текст;
Перем БезГзип;
Перем УдалятьВременныеФайлы;
Перем ВключитьЛогирование;

Перем Версия;

 //+Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:41:25
Перем ПутьДоЛогФайла,ЛогироватьВ_xml;
Перем ПутьЛогированияXML; 
//+Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:41:25

Процедура ПоказатьТЗ(Значение,Отступ)

    Если ТипЗначенияСтр(Значение)="ТаблицаЗначений" Тогда
        Для А = 1 По Значение.КоличествоСтрок() Цикл
            Для Т=1 по Значение.КоличествоКолонок() Цикл
                наим = Значение.ПолучитьПараметрыКолонки(Т);
                рез=Значение.ПолучитьЗначение(А,Т);
                Если ТипЗначенияСтр(рез)="ТаблицаЗначений" Тогда
                    Сообщить(Отступ+" "+наим+" >>> ");
                    ПоказатьТЗ(рез,Отступ+"     ");     
                Иначе               
                    Сообщить(Отступ+" "+наим+"="+Строка(рез));

                КонецЕсли;
            КонецЦикла;
        КонецЦикла;

    Иначе
        Сообщить(Значение);     
    КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьXMLфайлИзТекста(ИмяФайла,ТекстXML,Тип) Экспорт
	
	Если Тип = 1 Тогда
	
	Попытка
		ТекстXML.Записать(ИмяФайла);
	Исключение     
		Сообщить("Не удалось записать xml");
	КонецПопытки;
	
ИначеЕсли Тип = 2 Тогда
Stream = CreateObject("Adodb.Stream");
Stream.Charset="utf-8";
Stream.Type = 2;
Stream.Mode= 3;
Stream.Open();
Stream.WriteText(ТекстXML);
Stream.SaveToFile(ИмяФайла,2);
Stream.Close();	
	
	
	КонецЕсли;
////	ТФайл=СоздатьОбъект("Текст");
////ПутьКTФайлу = ИмяФайла;
////НазваниеФайла= ИмяФайла;
////Если ФС.СуществуетФайл(НазваниеФайла)=1  Тогда
////     ТФайл.Открыть(НазваниеФайла);
////Иначе
////     ТФайл.КодоваяСтраница();
////КонецЕсли;
////ТФайл.Очистить();
////ТФайл.ДобавитьСтроку(ТекстXML);
////ТФайл.Записать(НазваниеФайла);
//
	
КонецПроцедуры


// Функция генерирует уникальное имя для временных файлов
Функция СгенерироватьИмяФайла()
	a = 1664525; 
	m = 4294967296;
	СлучайноеЧисло = _getperformancecounter();
    СлучайноеЧисло = (a*СлучайноеЧисло)%m;
	Возврат СлучайноеЧисло;
КонецФункции

// Функция создает и сохраняет временные файлы на жестком диске
Функция СоздатьВремФайлНаДиске()

	//*Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:46:26
		ИмяФайла = КаталогВременныхФайлов() + СгенерироватьИмяФайла();
	//	ИмяФайла = "E:\iSales\" + СгенерироватьИмяФайла();
	///Пашков К.В.@РегионПродОптТорг, 2016-08-09 09:46:26


	
	Сообщить(ИмяФайла);
	Возврат ИмяФайла;
КонецФункции

// Функция добавляет строку в лог файл
Процедура ДобавитьСтрокуВЛогФайл(СтрокаСообщения)
	_ЛогФайл.ДобавитьСтроку(СтрокаСообщения);
	Попытка
		_ЛогФайл.Записать(_ИмяЛогФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВывестиСообщение(ТекстСообщения, МаркерСообщения, ПотокВывода)
	ИнфоПрефикс = Строка(ТекущаяДата())+"      " +Строка(ТекущееВремя())+ "     " + Строка(ИмяКомпьютера()) + "     " + 	Строка(ИмяПользователя()) + " >>> ";
	СтрокаСообщения = ИнфоПрефикс + ТекстСообщения;
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Табло) Тогда
		Сообщить(СтрокаСообщения, МаркерСообщения);
	КонецЕсли;
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Файл) Тогда
		ДобавитьСтрокуВЛогФайл(СтрокаСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура СообщитьОшибка(Ошибка, Комментарий = "", ПотокВывода = 0) 
	ТекстСообщения = Ошибка + "  " + Комментарий;
	ВывестиСообщение(ТекстСообщения, "!!!", ПотокВывода);
КонецПроцедуры

Процедура СообщитьОбычное(Сообщение, Комментарий = "", ПотокВывода = 0) 
	ТекстСообщения = Сообщение + "    " + Комментарий;
	ВывестиСообщение(ТекстСообщения, "Обычное", ПотокВывода);
КонецПроцедуры

Процедура СообщитьБезПрефикса(ТекстСообщения,МаркерСообщения,ПотокВывода = 0) 
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Табло) Тогда
		Сообщить(ТекстСообщения, МаркерСообщения);
	КонецЕсли;
	Если (ПотокВывода = ПотокВывода_ТаблоФайл) Или (ПотокВывода = ПотокВывода_Файл) Тогда
		ДобавитьСтрокуВЛогФайл(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

//======================================================================

Процедура СохранитьВФайл(Данные,ПутьФайла,Метод,ТипДанных)
	
	
	Если ПустоеЗначение(ПутьФайла) = 1 Тогда
		ПутьФайла = АдресБиблиотекиSOAP;
	КонецЕсли;	
      
   	ИмяФайла = ПутьФайла + Метод + ТипДанных + ".xml";
  
   	Файл = СоздатьОбъект("Текст");
   	Файл.ДобавитьСтроку(Данные);
   	Попытка
   		Файл.Записать(ИмяФайла); 
   	Исключение
   		СообщитьОшибка("Невозможно записать временный файл на диск!",,ПотокВывода_Табло);
   	КонецПопытки;	
	
КонецПроцедуры

// Функция возвращает таблицу значений с ответом от сервера
Функция ПолучитьТаблицуСРезультатами(_Таблица)
	ВремСтрока = "";
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("N");
	ТЗ.НоваяКолонка("Status");
	ТЗ.НоваяКолонка("Desc");

	_Таблица.ВыбратьСтроки();
	Пока _Таблица.ПолучитьСтроку() = 1 Цикл
		ВремСтрока = _Таблица.Status;
		ТЗ.НоваяСтрока();
		Счетчик  = 0;
		Позиция1 = 0;
		Для Й = 1 По СтрДлина(ВремСтрока) Цикл
			Если КодСимв(Сред(ВремСтрока,Й)) = 124  Тогда
				Если Счетчик = 0 Тогда
					ТЗ.N = Лев(ВремСтрока,Й-1);
					Если Найти(Прав(ВремСтрока,СтрДлина(ВремСтрока)-Й-1),"|") = 0 Тогда
						ТЗ.Status = Прав(ВремСтрока,СтрДлина(ВремСтрока)-Й); 
					КонецЕсли;	
					Позиция1 = Й+1;
				ИначеЕсли Счетчик = 1 Тогда
					ТЗ.Status = Сред(ВремСтрока,Позиция1,Й-Позиция1);
					ТЗ.Desc   = Прав(ВремСтрока,СтрДлина(ВремСтрока)-Й);	
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЕсли;	
	    КонецЦикла;
	КонецЦикла;
	//ТЗ.ВыбратьСтроку();		
	Возврат ТЗ;	
КонецФункции 

// Функция преобразует многострочный текст в таблицу значений
Функция ПолучитьТаблицуСоСтроками(_Строка)
	
	_Строка = СтрЗаменить(_Строка,Симв(13),""); // Удаляем из строки символы 0xD
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Status");
	Начало = 0;
	Для Й = 1 По СтрДлина(_Строка) Цикл
		Если КодСимв(Сред(_Строка,Й)) = 10 Тогда
			ТЗ.НоваяСтрока();
			ТЗ.Status = Сред(_Строка,Начало,Й-?(Начало=0,1,Начало));
			Начало = Й + 1;
		КонецЕсли;
	КонецЦикла;
	ТЗ.НоваяСтрока();
	ТЗ.Status = Сред(_Строка,Начало,Й-?(Начало=0,1,Начало));

	Возврат ТЗ;	
КонецФункции	

// Функция разбирает ответ от сервера в формате XML и возвращает его в виде таблицы значений
Функция xml_ОбходУзлов(узел)
	
	УровеньУзлов = узел.ВыбратьУзлы("./*");
	
	КолВо = УровеньУзлов.КоличествоУзлов();
	
	Если КолВо = 0 Тогда
		Если (ПолучатьСтатусыВТЗ = 1) и (Найти(узел.Значение,"|") <> 0) Тогда
			Возврат ПолучитьТаблицуСРезультатами(ПолучитьТаблицуСоСтроками(узел.Значение)); 		
		Иначе
		    Возврат узел.Значение;	
		КонецЕсли;
	КонецЕсли;
		
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяСтрока();
	
	Для Н = 1 По УровеньУзлов.КоличествоУзлов() Цикл
		ТекУзел = УровеньУзлов.ПолучитьУзел(Н-1);
				
		Попытка
			ТЗ.ПолучитьПараметрыКолонки(ТекУзел.Наименование); 
			ТЗ.НоваяСтрока();
		Исключение 
			ТЗ.НоваяКолонка(ТекУзел.Наименование); 
		КонецПопытки;	
		
		рез = xml_ОбходУзлов(ТекУзел);
		
		ТЗ.УстановитьЗначение(ТЗ.КоличествоСтрок(),ТекУзел.Наименование,рез);
	КонецЦикла;
		
	Возврат ТЗ;	
	
КонецФункции

// Функция выполненяет запрос к WEB сервису, получает ответ и возвращает его в виде таблицы значений
Функция SOAP_Execute(Процедура_, Параметры, Значения, ДанныеДляОтправки)
	
	Состояние("Идет обмен данными......");
	
    _Значения = "";
    Запрос    = "";
  	Префикс   = ":xsi";
  	
	ТочкаПодключения = ?(ИспользоватьSSL = 1,"https://","http://") + СерверДанных + ПутьДоWSDL;
	
	Если ФС.СуществуетФайл("C:\Program Files\7-Zip\7z.exe") = 1 Тогда
		ПутьДоАрхиватора = "C:\Program Files\7-Zip\";
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7z.exe") = 1 Тогда	
		ПутьДоАрхиватора = АдресБиблиотекиSOAP;
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7-Zip\7z.exe") = 1 Тогда	
        ПутьДоАрхиватора = АдресБиблиотекиSOAP+"7-Zip\";
	Иначе
	    СообщитьОбычное("Архиватор 7Zip не найден! Обмен с сервером будет выполняться без сжатия данных.",,ПотокВывода_ТаблоФайл);	
		БезГзип = 1;
	КонецЕсли; 
	Если ПустоеЗначение(ДанныеДляОтправки) = 0 Тогда
	Если ЛогироватьВ_xml = 1 тогда
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Data_"+Процедура_+"_"+Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_")+".xml",ДанныеДляОтправки,1);
	КонецЕсли;
	КонецЕсли;
	
    Скрипт = "Function  Execute";      
				
	Запрос = Запрос + "<s:Envelope xmlns:s=""""http://schemas.xmlsoap.org/soap/envelope/"""" xmlns"+?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,"")+"=""""http://tempuri.org/""""><s:Header/><s:Body>";
	Запрос = Запрос + "<"+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+" xmlns=""""http://tempuri.org/"""">";
		
	Колво  = Мин(Параметры.РазмерСписка(),Значения.РазмерСписка());
    
	Для К = 1 по Колво Цикл                                                              
        Тэг       = Параметры.ПолучитьЗначение(К);
	    Запрос    = Запрос + "<"+Тэг+">"+Значения.ПолучитьЗначение(К)+"</"+Тэг+">";
	    _значения = _значения + " " +Значения.ПолучитьЗначение(К);
    КонецЦикла;
    
	ВремФайлНаДиске = СоздатьВремФайлНаДиске();
    
	Если ПустоеЗначение(ДанныеДляОтправки) = 0 Тогда
		Если ИспользоватьГзипПриОтправке = 1 Тогда
			Stream_out = CreateObject("Adodb.Stream");
			Stream_out.Type = 2;
			Stream_out.charset = "utf-8";
			Stream_out.LineSeparator = -1;
			Stream_out.Open();
		КонецЕсли;	
		
   		Если ТипЗначения(ДанныеДляОтправки) = 2 Тогда
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
                Запрос = Запрос + ДанныеДляОтправки;
			Иначе
				Stream_out.WriteText(ДанныеДляОтправки);
				Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;	
		Иначе 
			ДанныеДляОтправки.Записать(ВремФайлНаДиске+".sxl");
		    запрос_текст = СоздатьОбъект("Текст");
            запрос_текст.КодоваяСтраница(0);
            запрос_текст.Открыть(ВремФайлНаДиске+".sxl");
			
			НомСтроки = 2;
			
			Если Найти(запрос_текст.ПолучитьСтроку(1),"<?xml version=""1.0"" encoding=""windows-1251""?>") = 1 Тогда
				запрос_текст.УдалитьСтроку(1);
				запрос_текст.Записать(ВремФайлНаДиске+".sxl");
				НомСтроки = 1;
			КонецЕсли;	
			
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
			    Запрос = Запрос + запрос_текст.ПолучитьСтроку(НомСтроки);
		        ФС.УдалитьФайл(ВремФайлНаДиске+".sxl");
			Иначе
				Stream_in = CreateObject("Adodb.Stream"); 
	            Stream_in.Type = 2;
				Stream_in.Charset="windows-1251";
	            Stream_in.Open();
			    Stream_in.LoadFromFile(ВремФайлНаДиске+".sxl");
                Байт = 255;
			    Size = Stream_in.Size;
                Пока Stream_in.EOS = 0 Цикл
                    Stream_out.WriteText(Stream_in.ReadText(Байт),?(Байт=-2,1,0));
                    Состояние("Кодирование данных :" + Формат(100 * Stream_in.position/Size,"Ч(0)5.2")+"%");
                КонецЦикла;
                Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;
		КонецЕсли;

		
		Если ИспользоватьГзипПриОтправке = 1 Тогда
			Base64Encoder = "textBase64=""""
			|Set WshShell = CreateObject(""WScript.Shell"")
			|WshShell.Run """""""+ПутьДоАрхиватора+"7z"""" a    """""+ВремФайлНаДиске+"_64.zip""""  """""+ВремФайлНаДиске+".sxl"""""",0,1
			|
			|Set inStream = CreateObject(""ADODB.Stream"") 
			|inStream.Type = 1 
			|inStream.Open()
			|inStream.LoadFromFile("""+ВремФайлНаДиске+"_64.zip"")
			|readBytes = inStream.Read()
			|
			|Set objXML = CreateObject(""MSXml2.DOMDocument"") 
			|objXML.loadXML ""<Base64Data />""
			|
			|Set objDocElem = objXML.documentElement
			|objDocElem.dataType = ""bin.base64""
			|objDocElem.NodeTypedValue = readBytes 
			|textBase64 = objDocElem.text
			|
			|inStream.Close()
			|
			|Set objStream = CreateObject(""ADODB.Stream"")
			|objStream.Type = 2 
			|objStream.Charset = ""iso-2022-kr""
			|objStream.Open() 
			|objStream.Writetext textBase64 
			|objStream.SaveToFile """+ВремФайлНаДиске+"_64.txt"",2 
			|objStream.Close()
			|";
			
			VBS = СоздатьОбъект("Текст");
	        VBS.ДобавитьСтроку(Base64Encoder);
	        VBS.Записать(ВремФайлНаДиске+"_64.vbs");
			Попытка
	           WshShell = СоздатьОбъект("WScript.Shell");
	           WshShell.Run("%comspec% /c"+ВремФайлНаДиске+"_64.vbs",0,1);
		    Исключение
			   СообщитьОшибка("ОШИБКА! : "+ОписаниеОшибки(),,0);
  	           ФС.УдалитьФайл(ВремФайлНаДиске+"_64.vbs");
		       Возврат "";
		    КонецПопытки;
		    
		    Запрос = Запрос +"<b64content>";
		
		    Base64Text = СоздатьОбъект("Текст");
			Base64Text.Открыть(ВремФайлНаДиске+"_64.txt");
		 	Для Й = 1 По Base64Text.КоличествоСтрок() Цикл
		 		Запрос = Запрос + СтрЗаменить(Base64Text.ПолучитьСтроку(Й),Симв(10),"");
			КонецЦикла;
			
			Запрос = Запрос +"</b64content>";
						
			Если УдалятьВременныеФайлы = 1 Тогда
				ФС.УдалитьФайл(ВремФайлНаДиске+"_64.txt");
		        ФС.УдалитьФайл(ВремФайлНаДиске+"_64.vbs");
		        ФС.УдалитьФайл(ВремФайлНаДиске+"_64.zip");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
	Запрос = Запрос + "</" + Процедура_ + ?(ИспользоватьГзипПриОтправке = 1,"B64","") + ">";
	Запрос = Запрос + "</s:Body></s:Envelope>";
		  
		//+Пашков К.В.@РегионПродОптТорг, 2016-09-06 18:20:43
	Если ЛогироватьВ_xml = 1 тогда
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Request_"+Процедура_+"_"+ Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_") +".xml",Запрос,2);
	КонецЕсли;
	///Пашков К.В.@РегионПродОптТорг, 2016-09-06 18:20:43

	
	Скрипт = Скрипт + "
	         |Dim sEndPoint
             |sEndPoint="""+ТочкаПодключения+"""
			 |Dim sNameSpace
			 |sNameSpace = """+ПространствоИмен+"""
			 |Dim sProcedure
             |sProcedure="""+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+"""
			 |Dim oHTTP 
             |set oHTTP = CreateObject(""WinHttp.WinHttpRequest.5.1"")
             |oHTTP.Open ""POST"", sEndPoint, false 
             |oHTTP.SetTimeouts 10000,1500000, 3000000, 3000000";
			 
	Если ПустоеЗначение(S_пользователь) = 0 Тогда
		Скрипт = Скрипт + "
		     |oHTTP.SetCredentials """+S_пользователь+""","""+S_пароль+""",HTTPREQUEST_SETCREDENTIALS_FOR_PROXY";		
	КонецЕсли;	
				 
	Если ПустоеЗначение(S_сервер) = 0 Тогда
	    Скрипт = Скрипт + "
		     |oHTTP.SetProxy HTTPREQUEST_PROXYSETTING_PROXY,"""+S_сервер+""""; 
    КонецЕсли;

	Если БезГзип = 0 Тогда
	
		Скрипт = Скрипт + "
		         |
		         |
		         |sRequest = """+Запрос+"""	
				 |
	             |oHTTP.SetRequestHeader ""User-Agent"", ""1C Soap toolkit""
	             |oHTTP.SetRequestHeader ""Content-Type"", ""text/xml;charset=UTF-8""
	             |oHTTP.SetRequestHeader ""SOAPAction"", sNameSpace & sProcedure
		         |oHTTP.SetRequestHeader ""Content-Length"", Len(sRequest)
				 |oHTTP.SetRequestHeader ""Accept-Encoding"", ""gzip,deflate""
				 |
				 |On Error Resume Next
				 |
	             |oHTTP.Send sRequest
				 |oHTTP.WaitForResponse
				 |
				 |Dim fso
	             |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |
				 |If Err.Number <> 0 Then
				 |    Set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |    tf.WriteLine(""<err><Status>1000</Status><Text>""+ Trim(Err.description) + ""</Text></err>"")
		    	 |    tf.Close()
				 |    Exit Function
				 |    On Error Goto 0 
				 |End If
				 |    On Error Goto 0
				 |
				 |Headers = "" ""+oHTTP.GetAllResponseHeaders
				 |Extension = """"
				 |
				 |If inStr(headers,""Content-Encoding"")>0 then
				 |   extension = "".zip""
				 |End if
				 |
				 |
				 |
				 |Dim tf
				 |
				 |if oHTTP.status = 200 Then 
				 |     Dim oStream
				 |     set oStream=CreateObject(""ADODB.Stream"")
				 |     oStream.Mode = 3
				 |     oStream.Type = 1
				 |     oStream.Open
				 |     oStream.Write oHTTP.responseBody
				 |     oStream.SaveToFile """+ВремФайлНаДиске+"""+extension , 2
				 |     oStream.Close
				 |else
				 |    set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
	             |    tf.WriteLine(""<err><Status>""& oHTTP.status &""</Status><Text>http err  ""& oHTTP.status &"" : ""& oHTTP.StatusText & ""</Text></err>"")
	             |    tf.WriteBlankLines(3) 
	             |    tf.Close()
				 |
				 |end if
				 |
				 |if inStr(headers,""Content-Encoding"")>0 then
				 |
				 |Dim WshShell
				 |
				 |Set WshShell = CreateObject(""WScript.Shell"")
				 |
				 |WshShell.Run """""""+ПутьДоАрхиватора+"7z"""" x  -aoa  """""+ВремФайлНаДиске+".zip"""" -o"""""+КаталогВременныхФайлов()+""""""",0,1
				 |
				 |End If
				 |
				 |End Function
				 |
				 |Execute
				 |
		    	 |";
	Иначе
		Скрипт = Скрипт + "
		         |
		         |
		         |sRequest = """+Запрос+"""	
				 |
	             |oHTTP.SetRequestHeader ""User-Agent"", ""1C Soap toolkit""
	             |oHTTP.SetRequestHeader ""Content-Type"", ""text/xml;charset=UTF-8""
	             |oHTTP.SetRequestHeader ""SOAPAction"", sNameSpace & sProcedure
		         |oHTTP.SetRequestHeader ""Content-Length"", Len(sRequest)
				 |
				 |On Error Resume Next
				 |
				 |oHTTP.Send sRequest
				 |
				 |Dim fso
	             |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |
				 |If Err.Number <> 0 Then
				 |    Set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |    tf.WriteLine(""<err><Status>1000</Status><Text>""+ Trim(Err.description) + ""</Text></err>"")
		    	 |    tf.Close()
				 |    Exit Function
				 |    On Error Goto 0 
				 |End If
				 |    On Error Goto 0
				 |
				 |
	             |Execute=oHTTP.ResponseText
				 |if oHTTP.status = 200 Then 
	             |  if oHTTP.ResponseText = """" then
	             |      Execute = ""Empty Response from Server"" 
	             |  else
	             |      Execute = oHTTP.ResponseText
	             |  end if
	             |else
				 |  Execute = ""<err><Status>""& oHTTP.status &""</Status><Text>http err  ""& oHTTP.status &"" : ""& oHTTP.StatusText & ""</Text></err>""
				 |end if
				 |End Function
				 |
				 |
				 |Execute
				 |
				 |
				 |Dim fso
				 |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |Dim tf
				 |set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |Data = Replace(Execute,""<?xml version=""""1.0"""" encoding=""""utf-8""""?>"",""<?xml version=""""1.0"""" encoding=""""windows-1251""""?>"")
	             |tf.WriteLine(Data)
				 |tf.WriteBlankLines(3) 
				 |tf.Close()
				 |";
		
	КонецЕсли;	
	
	Если ВключитьЛогирование  = 1 Тогда
		СообщитьБезПрефикса("",,2);
		СообщитьОбычное("Соединение "+?(ИспользоватьSSL = 1,"c SSL","без SSL"),,2);
		СообщитьОбычное("Запрос на: " + Строка(ТочкаПодключения),,2);
		СообщитьОбычное("Сжатие данных при отправке "+?(ИспользоватьГзипПриОтправке = 1,"включено.","выключено."),,2);
		СообщитьОбычное("Сжатие данных при получении "+?(БезГзип = 0,"включено.","выключено."),,2);
		СообщитьОбычное(Строка(Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64",""))+" "+_значения,,2);
		СообщитьБезПрефикса(Запрос,,2);
	КонецЕсли;	
	
	// Создаем файл с VBS скриптом на диске 
	VBS = СоздатьОбъект("Текст");
	VBS.ДобавитьСтроку(Скрипт);
	VBS.Записать(ВремФайлНаДиске+".vbs");
	
    Состояние("Отправка запроса...");
	//
	Попытка
		WshShell = СоздатьОбъект("WScript.Shell");
		WshShell.Run("%comspec% /c"+ВремФайлНаДиске+".vbs",0,1);
 	Исключение
		СообщитьОшибка("ОШИБКА! : "+ОписаниеОшибки(),,0);
  	    ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
		Возврат "";
	КонецПопытки;	
	
	Состояние("Получение ответа от сервера...");
	
	ФС.ПереименоватьФайл(ВремФайлНаДиске,ВремФайлНаДиске+".txt",1);
	
	xml = СоздатьОбъект("AddIn.XMLParser");
	XML_Документ = xml.СоздатьДокумент();
	Попытка
		XML_Документ.Загрузить(ВремФайлНаДиске+".txt");
	Исключение
		Текст = СоздатьОбъект("Текст");
		Текст.Открыть(ВремФайлНаДиске+".txt");
		Для С = 0 По Текст.КоличествоСтрок() Цикл
			Если Найти(Текст.ПолучитьСтроку(С),"DOCTYPE html PUBLIC") = 1 Тогда
				СообщитьОшибка("Соединение закрыто по таймауту. Сервер не отвечает.",,ПотокВывода_ТаблоФайл);
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Возврат "";
	КонецПопытки;		
	ПервыйУровень    = XML_Документ.ВыбратьУзлы("./*");
	ПервыйТег        = ПервыйУровень.ПолучитьУзел(0);
	Если ПервыйТег.Наименование = "err" Тогда
		УровеньДанных = ПервыйТег.ВыбратьУзлы("./*");
		СообщитьОшибка(?(СокрЛП(УровеньДанных.ПолучитьУзел(0).Значение) = "1000","Ошибка соединения: ","Ошибка сервера: ") + УровеньДанных.ПолучитьУзел(1).Значение,,ПотокВывода_ТаблоФайл);
		Возврат "";
	Иначе 
	    Корень = XML_Документ.ВыбратьУзел("./*/*/*//*");
	КонецЕсли;	
	
	Если ЛогироватьВ_xml = 1 Тогда
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Response_"+Процедура_+"_"+ Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_") +".xml",XML_Документ,1);
	КонецЕсли;
	
	xml_объект = xml_ОбходУзлов(Корень);
        
	Если УдалятьВременныеФайлы = 1 Тогда
		ФС.УдалитьФайл(ВремФайлНаДиске+".txt");
		ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
		ФС.УдалитьФайл(ВремФайлНаДиске+".zip");
	КонецЕсли;	
	
	Возврат xml_объект;	
	
КонецФункции 


Функция SOAP_Execute_(Процедура_, Параметры, Значения, ДанныеДляОтправки)
	
	Состояние("Идет обмен данными......");
	
    _Значения = "";
    Запрос    = "";
  	Префикс   = ":xsi";
  	
  
  	
	ТочкаПодключения = ?(ИспользоватьSSL = 1,"https://","http://") + СерверДанных + ПутьДоWSDL;
	
	Если ФС.СуществуетФайл("C:\Program Files (x86)\7-Zip\7z.exe") = 1 Тогда
		ПутьДоАрхиватора = "C:\Program Files (x86)\7-Zip\";
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7z.exe") = 1 Тогда	
		ПутьДоАрхиватора = АдресБиблиотекиSOAP;
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7-Zip\7z.exe") = 1 Тогда	
        ПутьДоАрхиватора = АдресБиблиотекиSOAP+"7-Zip\";
	Иначе
	    СообщитьОбычное("Архиватор 7Zip не найден! Обмен с сервером будет выполняться без сжатия данных.",,ПотокВывода_ТаблоФайл);	
		БезГзип = 1;
	КонецЕсли;
	   	
	Если ЛогироватьВ_xml = 1 тогда
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Request_"+Процедура_+"_"+ Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_") +".xml",ДанныеДляОтправки,1);
	КонецЕсли;
	
    Скрипт = "Function  Execute";      
				
	Запрос = Запрос + "<s:Envelope xmlns:s=""""http://schemas.xmlsoap.org/soap/envelope/"""" xmlns"+?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,"")+"=""""http://tempuri.org/""""><s:Header/><s:Body>";
	Запрос = Запрос + "<"+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+" xmlns=""""http://tempuri.org/"""">";
		
	Колво  = Мин(Параметры.РазмерСписка(),Значения.РазмерСписка());
    
	Для К = 1 по Колво Цикл                                                              
        Тэг       = Параметры.ПолучитьЗначение(К);
	    Запрос    = Запрос + "<"+Тэг+">"+Значения.ПолучитьЗначение(К)+"</"+Тэг+">";
	    _значения = _значения + " " +Значения.ПолучитьЗначение(К);
    КонецЦикла;
    
	//БезГзип = 1;
	
	ВремФайлНаДиске = СоздатьВремФайлНаДиске();
    Сообщить(ВремФайлНаДиске);
	Если ПустоеЗначение(ДанныеДляОтправки) = 0 Тогда
		Если ИспользоватьГзипПриОтправке = 1 Тогда
			Stream_out = CreateObject("Adodb.Stream");
			Stream_out.Type = 2;
			Stream_out.charset = "utf-8";
			Stream_out.LineSeparator = -1;
			Stream_out.Open();
		КонецЕсли;	
		
   		Если ТипЗначения(ДанныеДляОтправки) = 2 Тогда
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
                Запрос = Запрос + ДанныеДляОтправки;
			Иначе
				Stream_out.WriteText(ДанныеДляОтправки);
				Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;	
		Иначе 
			ДанныеДляОтправки.Записать(ВремФайлНаДиске+".sxl");
		    запрос_текст = СоздатьОбъект("Текст");
            запрос_текст.КодоваяСтраница(0);
            запрос_текст.Открыть(ВремФайлНаДиске+".sxl");
			
			НомСтроки = 2;
			
			Если Найти(запрос_текст.ПолучитьСтроку(1),"<?xml version=""1.0"" encoding=""windows-1251""?>") = 1 Тогда
				запрос_текст.УдалитьСтроку(1);
				запрос_текст.Записать(ВремФайлНаДиске+".sxl");
				НомСтроки = 1;
			КонецЕсли;	
			
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
			    Запрос = Запрос + запрос_текст.ПолучитьСтроку(НомСтроки);
		        ФС.УдалитьФайл(ВремФайлНаДиске+".sxl");
			Иначе
				Stream_in = CreateObject("Adodb.Stream"); 
	            Stream_in.Type = 2;
				Stream_in.Charset="windows-1251";
	            Stream_in.Open();
			    Stream_in.LoadFromFile(ВремФайлНаДиске+".sxl");
                Байт = 255;
			    Size = Stream_in.Size;
                Пока Stream_in.EOS = 0 Цикл
                    Stream_out.WriteText(Stream_in.ReadText(Байт),?(Байт=-2,1,0));
                    Состояние("Кодирование данных :" + Формат(100 * Stream_in.position/Size,"Ч(0)5.2")+"%");
                КонецЦикла;
                Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;
		КонецЕсли;
		
		Состояние("Отправка запроса...");
			

		
		Если ИспользоватьГзипПриОтправке = 1 Тогда
			Base64Encoder = "textBase64=""""
			|Set WshShell = CreateObject(""WScript.Shell"")
			|WshShell.Run """""""+ПутьДоАрхиватора+"7z"""" a    """""+ВремФайлНаДиске+"_64.zip""""  """""+ВремФайлНаДиске+".sxl"""""",0,1
			|
			|Set inStream = CreateObject(""ADODB.Stream"") 
			|inStream.Type = 1 
			|inStream.Open()
			|inStream.LoadFromFile("""+ВремФайлНаДиске+"_64.zip"")
			|readBytes = inStream.Read()
			|
			|Set objXML = CreateObject(""MSXml2.DOMDocument"") 
			|objXML.loadXML ""<Base64Data />""
			|
			|Set objDocElem = objXML.documentElement
			|objDocElem.dataType = ""bin.base64""
			|objDocElem.NodeTypedValue = readBytes 
			|textBase64 = objDocElem.text
			|
			|inStream.Close()
			|
			|Set objStream = CreateObject(""ADODB.Stream"")
			|objStream.Type = 2 
			|objStream.Charset = ""iso-2022-kr""
			|objStream.Open() 
			|objStream.Writetext textBase64 
			|objStream.SaveToFile """+ВремФайлНаДиске+"_64.txt"",2 
			|objStream.Close()
			|";
			
			VBS = СоздатьОбъект("Текст");
	        VBS.ДобавитьСтроку(Base64Encoder);
	        VBS.Записать(ВремФайлНаДиске+"_64.vbs");
						
			Попытка
	           WshShell = СоздатьОбъект("WScript.Shell");
	           WshShell.Run("%comspec% /c"+ВремФайлНаДиске+"_64.vbs",0,1);
		    Исключение
			   СообщитьОшибка("ОШИБКА! : "+ОписаниеОшибки(),,0);
  	           ФС.УдалитьФайл(ВремФайлНаДиске+"_64.vbs");
		       Возврат "";
		КонецПопытки;
		    
		    Запрос = Запрос +"<b64content>";
		
		    Base64Text = СоздатьОбъект("Текст");
			Base64Text.Открыть(ВремФайлНаДиске+"_64.txt");
		 	Для Й = 1 По Base64Text.КоличествоСтрок() Цикл
		 		Запрос = Запрос + СтрЗаменить(Base64Text.ПолучитьСтроку(Й),Симв(10),"");
			КонецЦикла;
			
			Запрос = Запрос +"</b64content>";
						
			Если УдалятьВременныеФайлы = 1 Тогда
				ФС.УдалитьФайл(ВремФайлНаДиске+"_64.txt");
		        ФС.УдалитьФайл(ВремФайлНаДиске+"_64.vbs");
		        ФС.УдалитьФайл(ВремФайлНаДиске+"_64.zip");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
	Запрос = Запрос + "</" + Процедура_ + ?(ИспользоватьГзипПриОтправке = 1,"B64","") + ">";
	Запрос = Запрос + "</s:Body></s:Envelope>";
		  
	
	
	
	Скрипт = Скрипт + "
	         |Dim sEndPoint
             |sEndPoint="""+ТочкаПодключения+"""
			 |Dim sNameSpace
			 |sNameSpace = """+ПространствоИмен+"""
			 |Dim sProcedure
             |sProcedure="""+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+"""
			 |Dim oHTTP 
             |set oHTTP = CreateObject(""WinHttp.WinHttpRequest.5.1"")
             |oHTTP.Open ""POST"", sEndPoint, false 
             |oHTTP.SetTimeouts 10000, 1500000, 1500000, 1500000";
			 
	Если ПустоеЗначение(S_пользователь) = 0 Тогда
		Скрипт = Скрипт + "
		     |oHTTP.SetCredentials """+S_пользователь+""","""+S_пароль+""",HTTPREQUEST_SETCREDENTIALS_FOR_PROXY";		
	КонецЕсли;	
				 
	Если ПустоеЗначение(S_сервер) = 0 Тогда
	    Скрипт = Скрипт + "
		     |oHTTP.SetProxy HTTPREQUEST_PROXYSETTING_PROXY,"""+S_сервер+""""; 
    КонецЕсли;

	Если БезГзип = 0 Тогда
	
		Скрипт = Скрипт + "
		         |
		         |
		         |sRequest = """+Запрос+"""	
				 |
	             |oHTTP.SetRequestHeader ""User-Agent"", ""1C Soap toolkit""
	             |oHTTP.SetRequestHeader ""Content-Type"", ""text/xml;charset=UTF-8""
	             |oHTTP.SetRequestHeader ""SOAPAction"", sNameSpace & sProcedure
		         |oHTTP.SetRequestHeader ""Content-Length"", Len(sRequest)
				 |oHTTP.SetRequestHeader ""Accept-Encoding"", ""gzip,deflate""
				 |
				 |On Error Resume Next
				 |
	             |oHTTP.Send sRequest
				 |oHTTP.WaitForResponse
				 |
				 |Dim fso
	             |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |
				 |If Err.Number <> 0 Then
				 |    Set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |    tf.WriteLine(""<err><Status>1000</Status><Text>""+ Trim(Err.description) + ""</Text></err>"")
		    	 |    tf.Close()
				 |    Exit Function
				 |    On Error Goto 0 
				 |End If
				 |    On Error Goto 0
				 |
				 |Headers = "" ""+oHTTP.GetAllResponseHeaders
				 |Extension = """"
				 |
				 |If inStr(headers,""Content-Encoding"")>0 then
				 |   extension = "".zip""
				 |End if
				 |
				 |Dim tf
				 |
				 |if oHTTP.status = 200 Then 
				 |     Dim oStream
				 |     set oStream=CreateObject(""ADODB.Stream"")
				 |     oStream.Mode = 3
				 |     oStream.Type = 1
				 |     oStream.Open
				 |     oStream.Write oHTTP.responseBody
				 |     oStream.SaveToFile """+ВремФайлНаДиске+"""+extension , 2
				 |     oStream.Close
				 |else
				 |    set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
	             |    tf.WriteLine(""<err><Status>""& oHTTP.status &""</Status><Text>http err  ""& oHTTP.status &"" : ""& oHTTP.StatusText & ""</Text></err>"")
	             |    tf.WriteBlankLines(3) 
	             |    tf.Close()
				 |
				 |end if
				 |
				 |if inStr(headers,""Content-Encoding"")>0 then
				 |
				 |Dim WshShell
				 |
				 |Set WshShell = CreateObject(""WScript.Shell"")
				 |
				 |WshShell.Run """""""+ПутьДоАрхиватора+"7z"""" x  -aoa  """""+ВремФайлНаДиске+".zip"""" -o"""""+КаталогВременныхФайлов()+""""""",0,1
				 |
				 |End If
				 |
				 |End Function
				 |
				 |Execute
				 |
		    	 |";
	Иначе
		Скрипт = Скрипт + "
		         |
		         |
		         |sRequest = """+Запрос+"""	
				 |
	             |oHTTP.SetRequestHeader ""User-Agent"", ""1C Soap toolkit""
	             |oHTTP.SetRequestHeader ""Content-Type"", ""text/xml;charset=UTF-8""
	             |oHTTP.SetRequestHeader ""SOAPAction"", sNameSpace & sProcedure
		         |oHTTP.SetRequestHeader ""Content-Length"", Len(sRequest)
				 |
				 |On Error Resume Next
				 |
				 |oHTTP.Send sRequest
				 |
				 |Dim fso
	             |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |
				 |If Err.Number <> 0 Then
				 |    Set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |    tf.WriteLine(""<err><Status>1000</Status><Text>""+ Trim(Err.description) + ""</Text></err>"")
		    	 |    tf.Close()
				 |    Exit Function
				 |    On Error Goto 0 
				 |End If
				 |    On Error Goto 0
				 |
				 |
	             |Execute=oHTTP.ResponseText
				 |if oHTTP.status = 200 Then 
	             |  if oHTTP.ResponseText = """" then
	             |      Execute = ""Empty Response from Server"" 
	             |  else
	             |      Execute = oHTTP.ResponseText
	             |  end if
	             |else
				 |  Execute = ""<err><Status>""& oHTTP.status &""</Status><Text>http err  ""& oHTTP.status &"" : ""& oHTTP.StatusText & ""</Text></err>""
				 |end if
				 |End Function
				 |
				 |
				 |Execute
				 |
				 |
				 |Dim fso
				 |set fso = CreateObject(""Scripting.FileSystemObject"")
				 |Dim tf
				 |set tf = fso.CreateTextFile("""+ВремФайлНаДиске+""", true)
				 |Data = Replace(Execute,""<?xml version=""""1.0"""" encoding=""""utf-8""""?>"",""<?xml version=""""1.0"""" encoding=""""windows-1251""""?>"")
				 |On Error Resume Next
	             |tf.WriteLine(Data)
				 |tf.WriteBlankLines(3) 
				 |tf.Close()
				 |";
		
	КонецЕсли;	
	
	Если ВключитьЛогирование  = 1 Тогда
		СообщитьБезПрефикса("",,2);
		СообщитьОбычное("Соединение "+?(ИспользоватьSSL = 1,"c SSL","без SSL"),,2);
		СообщитьОбычное("Запрос на: " + Строка(ТочкаПодключения),,2);
		СообщитьОбычное("Сжатие данных при отправке "+?(ИспользоватьГзипПриОтправке = 1,"включено.","выключено."),,2);
		СообщитьОбычное("Сжатие данных при получении "+?(БезГзип = 0,"включено.","выключено."),,2);
		СообщитьОбычное(Строка(Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64",""))+" "+_значения,,2);
		СообщитьБезПрефикса(Запрос,,2);
	КонецЕсли;	
	
	// Создаем файл с VBS скриптом на диске 
	VBS = СоздатьОбъект("Текст");
	VBS.ДобавитьСтроку(Скрипт);
	
	VBS.Записать(ВремФайлНаДиске+".vbs");
	
	
	
	Попытка
		WshShell = СоздатьОбъект("WScript.Shell");
		WshShell.Run("%comspec% /c"+ВремФайлНаДиске+".vbs",0,1);
 	Исключение
		СообщитьОшибка("ОШИБКА! : "+ОписаниеОшибки(),,0);
  	    ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
		Возврат "";
	КонецПопытки;	
	
	Состояние("Получение ответа от сервера...");
	
	ФС.ПереименоватьФайл(ВремФайлНаДиске,ВремФайлНаДиске+".txt",1);
	
	xml = СоздатьОбъект("AddIn.XMLParser");
	XML_Документ = xml.СоздатьДокумент();
	Попытка
	XML_Документ.Загрузить(СокрЛП(ВремФайлНаДиске)+".txt");
	Исключение
		Текст = СоздатьОбъект("Текст");
		Текст.Открыть(ВремФайлНаДиске+".txt");
		Для С = 0 По Текст.КоличествоСтрок() Цикл
			Если Найти(Текст.ПолучитьСтроку(С),"DOCTYPE html PUBLIC") = 1 Тогда
				СообщитьОшибка("Соединение закрыто по таймауту. Сервер не отвечает.",,ПотокВывода_ТаблоФайл);
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		Возврат "";
	КонецПопытки;		
			
	ПервыйУровень    = XML_Документ.ВыбратьУзлы("./*");
	ПервыйТег        = ПервыйУровень.ПолучитьУзел(0);
	Если ПервыйТег.Наименование = "err" Тогда
		УровеньДанных = ПервыйТег.ВыбратьУзлы("./*");
		СообщитьОшибка(?(СокрЛП(УровеньДанных.ПолучитьУзел(0).Значение) = "1000","Ошибка соединения: ","Ошибка сервера: ") + УровеньДанных.ПолучитьУзел(1).Значение,,ПотокВывода_ТаблоФайл);
		Возврат "SYS_ERR|"+УровеньДанных.ПолучитьУзел(1).Значение;
	Иначе
		Корень = XML_Документ.ВыбратьУзел("./*/*/*//*");
	КонецЕсли;	
	
	Состояние("Отправка запроса...");
			Если ЛогироватьВ_xml = 1 тогда
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Request_"+Процедура_+"_"+ Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_") +".xml",XML_Документ,1);
	КонецЕсли;
	
	xml_объект = xml_ОбходУзлов(Корень);
	
		
	Если ВключитьЛогирование = 1 Тогда
		Стр = "";
		
		СообщитьОбычное("Ответ: ",,2);
		Stream = CreateObject("Adodb.Stream"); 
        Stream.Charset="utf-8"; 
        Stream.Open(); 
		Stream.LoadFromFile(ВремФайлНаДиске+".txt");
        Стр = Stream.ReadText();
        СообщитьБезПрефикса(Стр,,2); 
	КонецЕсли;

    	
	Если УдалятьВременныеФайлы = 1 Тогда
		ФС.УдалитьФайл(ВремФайлНаДиске+".txt");
		ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
		ФС.УдалитьФайл(ВремФайлНаДиске+".zip");
	КонецЕсли;	
	
	Возврат xml_объект;	
	
КонецФункции 


Функция SOAP_Execute_Main(Процедура_, Параметры, Значения, ДанныеДляОтправки)


	Результат="";   

	
	Состояние("Идет обмен данными......");
	
    _Значения = "";
    Запрос    = "";
  	Префикс   = ":xsi";
  	Данные    = ""; 
  	Сжатие 	  = "";
  	sRequest  = "";
  	ИспользоватьГзипПриОтправке = 0;
	ТочкаПодключения = ?(ИспользоватьSSL = 1,"https://","http://") + СерверДанных + ПутьДоWSDL;
	
	Если ФС.СуществуетФайл("C:\Program Files (x86)\7-Zip\7z.exe") = 1 Тогда
		ПутьДоАрхиватора = "C:\Program Files (x86)\7-Zip\";
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7z.exe") = 1 Тогда	
		ПутьДоАрхиватора = АдресБиблиотекиSOAP;
	ИначеЕсли ФС.СуществуетФайл(АдресБиблиотекиSOAP+"7-Zip\7z.exe") = 1 Тогда	
        ПутьДоАрхиватора = АдресБиблиотекиSOAP+"7-Zip\";
	Иначе
	    СообщитьОбычное("Архиватор 7Zip не найден! Обмен с сервером будет выполняться без сжатия данных.",,ПотокВывода_ТаблоФайл);	
		БезГзип = 1;
	КонецЕсли;
	   	
	БезГзип                     = 1;
	
////sRequest = sRequest + "<s:Envelope xmlns:s=""""http://schemas.xmlsoap.org/soap/envelope/"""" xmlns"+?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,"")+"=""""http://tempuri.org/""""><s:Header/><s:Body>";
////	sRequest = sRequest + "<"+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+" xmlns=""""http://tempuri.org/"""">";
//	
////sRequest = "<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns=""http://tempuri.org/""><s:Header/><s:Body><SetAsync";				
//	sRequest = sRequest + "<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns=""http://tempuri.org/""><s:Header/><s:Body>";
//	sRequest = sRequest + "<"+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+" xmlns=""http://tempuri.org/"">";
//	//sRequest = sRequest +?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,Данные)+ "</"+Процедура_+ ">"+"</s:Body></s:Envelope>";	
//	sRequest = sRequest +?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,Данные)+ "</"+Процедура_+ ">"+"</s:Body></s:Envelope>";	
sRequest = sRequest + "<s:Envelope xmlns:s=""""http://schemas.xmlsoap.org/soap/envelope/"""" xmlns"+?(ПустоеЗначение(ДанныеДляОтправки) = 0,Префикс,"")+"=""""http://tempuri.org/""""><s:Header/><s:Body>";
	sRequest = sRequest + "<"+Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64","")+" xmlns=""""http://tempuri.org/"""">";
	Колво  = Мин(Параметры.РазмерСписка(),Значения.РазмерСписка());
    
	//Для К = 1 по Колво Цикл                                                              
    //    Тэг       = Параметры.ПолучитьЗначение(К);
	//    Данные    = Данные + "<"+Тэг+">"+Значения.ПолучитьЗначение(К)+"</"+Тэг+">";
	//    _значения = _значения + " " +Значения.ПолучитьЗначение(К);
	//	//Запрос = Запрос + РазделительСтрок;
    //КонецЦикла;
	
   Для К = 1 по Колво Цикл                                                              
        Тэг       = Параметры.ПолучитьЗначение(К);
	    sRequest    = sRequest + "<"+Тэг+">"+Значения.ПолучитьЗначение(К)+"</"+Тэг+">";
	    _значения = _значения + " " +Значения.ПолучитьЗначение(К);
    КонецЦикла;
	
   
	
		ВремФайлНаДиске = СоздатьВремФайлНаДиске();
    Сообщить(ВремФайлНаДиске);
	Если ПустоеЗначение(ДанныеДляОтправки) = 0 Тогда
		Если ИспользоватьГзипПриОтправке = 1 Тогда
			Stream_out = CreateObject("Adodb.Stream");
			Stream_out.Type = 2;
			Stream_out.charset = "utf-8";
			Stream_out.LineSeparator = -1;
			Stream_out.Open();
		КонецЕсли;	
		
   		Если ТипЗначения(ДанныеДляОтправки) = 2 Тогда
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
                sRequest = sRequest + ДанныеДляОтправки;
				sRequest = sRequest + "</" + Процедура_ + ">";//Не вписывает!!!!!!!!!!!!
				sRequest = sRequest + "</s:Body></s:Envelope>";
			Иначе
				Stream_out.WriteText(ДанныеДляОтправки);
				Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;	
		Иначе 
			ДанныеДляОтправки.Записать(ВремФайлНаДиске+".sxl");
		    запрос_текст = СоздатьОбъект("Текст");
            запрос_текст.КодоваяСтраница(0);
            запрос_текст.Открыть(ВремФайлНаДиске+".sxl");
			
			НомСтроки = 2;
			
			Если Найти(запрос_текст.ПолучитьСтроку(1),"<?xml version=""1.0"" encoding=""windows-1251""?>") = 1 Тогда
				запрос_текст.УдалитьСтроку(1);
				запрос_текст.Записать(ВремФайлНаДиске+".sxl");
				НомСтроки = 1;
			КонецЕсли;	
			
			Если ИспользоватьГзипПриОтправке <> 1 Тогда
			    sRequest = sRequest + запрос_текст.ПолучитьСтроку(НомСтроки);
		        ФС.УдалитьФайл(ВремФайлНаДиске+".sxl");
			Иначе
				Stream_in = CreateObject("Adodb.Stream"); 
	            Stream_in.Type = 2;
				Stream_in.Charset="windows-1251";
	            Stream_in.Open();
			    Stream_in.LoadFromFile(ВремФайлНаДиске+".sxl");
                Байт = 255;
			    Size = Stream_in.Size;
                Пока Stream_in.EOS = 0 Цикл
                    Stream_out.WriteText(Stream_in.ReadText(Байт),?(Байт=-2,1,0));
                    Состояние("Кодирование данных :" + Формат(100 * Stream_in.position/Size,"Ч(0)5.2")+"%");
                КонецЦикла;
                Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		sRequest = sRequest + "</" + Процедура_ + ">";//Не вписывает!!!!!!!!!!!!
				sRequest = sRequest + "</s:Body></s:Envelope>";
		КонецЕсли;
		
		Состояние("Отправка запроса...");
		
		Если ЛогироватьВ_xml = 1 тогда
			sRequestFile = СтрЗаменить(sRequest,"""""","""" );
		ЗаписатьXMLфайлИзТекста(ПутьЛогированияXML+"Request_"+Процедура_+"_"+ Формат(ТекущаяДата(),"ДФ=ггММдд")+ СтрЗаменить(ТекущееВремя(),":","_") +"_test"+".xml",sRequestFile,2);
	
	КонецЕсли;
		
	//sRequest = sRequest + "</" + Процедура_ + ?(ИспользоватьГзипПриОтправке = 1,"B64","") + ">";
		
	ВремФайлНаДиске = СоздатьВремФайлНаДиске();
   // Сообщить(ВремФайлНаДиске);
	
	//sEndPoint="https://www.isales.pepsico.com/isales/ws/accountingtransfer.asmx?wsdl";
	//sEndPoint=СерверДанных+ПутьДоWSDL;
	sEndPoint="https://www.drp.isales.pepsico.com/isalestest/ws/accountingtransfer.asmx?WSDL";
	sNameSpace = "http://tempuri.org/";
	
	oHTTP = CreateObject("WinHttp.WinHttpRequest.5.1");
	oHTTP.Open ("POST", sEndPoint, 0); 
	oHTTP.SetTimeouts (10000,1500000, 3000000, 3000000);
	
	oHTTP.SetRequestHeader ("User-Agent", "1C Soap toolkit");
	oHTTP.SetRequestHeader ("Content-Type", "text/xml;charset=UTF-8");
	oHTTP.SetRequestHeader ("SOAPAction", sNameSpace + Процедура_);
	oHTTP.SetRequestHeader ("Content-Length", СтрДлина(sRequest));   
	//oHTTP.SetRequestHeader ("Accept-Encoding", "gzip,deflate");
	
	//Сообщить(sRequest);
	ИмяФайлаЗапрос = "E:\iSales\" +"request" +"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд_ЧЧммсс")+".xml";
	Stream = CreateObject("Adodb.Stream");
Stream.Charset="utf-8";
Stream.Type = 2;
Stream.Mode= 3;
Stream.Open();
Stream.WriteText(sRequest);
Stream.SaveToFile(ИмяФайлаЗапрос,2);
Stream.Close();	
	
	Ошибка="";
	Попытка
		oHTTP.Send (sRequest);
	Исключение
		Ошибка=ОписаниеОшибки();
		Сообщить(Ошибка);
	КонецПопытки;

	Если Ошибка <> "" Тогда
		ФормРезультат="<err><Status>1000</Status><Text>"+ Ошибка + "</Text></err>";
    	Возврат Результат;
	КонецЕсли;
	
	Headers = "" ""+oHTTP.GetAllResponseHeaders;

//	Execute=oHTTP.ResponseText;
	
	//|if inStr(headers,""Content-Encoding"")>0 then
	
	Если Найти(Headers,"Content-Encoding") = 0 Тогда
		ИмяФайла = "E:\iSales\test_1.xml";
	Иначе
		ИмяФайла = "E:\iSales\test_1.zip";
	КонецЕсли;
	
	
	Результат= "";
	Если oHTTP.status = 200 Тогда
  		Если oHTTP.ResponseText = "" Тогда
      		Результат = "Empty Response from Server" ;
  		Иначе
      		Результат = Строка(oHTTP.ResponseText);//ResponseStream;//ResponseBody;ResponseText
  		КонецЕсли;
	Иначе
  		Результат = "<err><Status>" + oHTTP.status + "</Status><Text>http err  " + oHTTP.status + " : " + oHTTP.StatusText + "</Text></err>";
КонецЕсли;
  	

//ТФайл=СоздатьОбъект("Текст");
//ПутьКTФайлу = СокрЛП(ПутьДоЛогФайла+"\");
//НазваниеФайла= СокрЛП("test.xml");
//Если ФС.СуществуетФайл(НазваниеФайла)=1  Тогда
//     ТФайл.Открыть(НазваниеФайла);
//Иначе
//     ТФайл.КодоваяСтраница();
//КонецЕсли;
//ТФайл.ДобавитьСтроку(Результат);
//ТФайл.Записать(НазваниеФайла);
  	
//fso = СоздатьОбъект("Scripting.FileSystemObject");

//file = fso.OpenTextFile(ИмяФайла, 
//        2, //1=Чтение, 2=Запись, 8=Добавление 
//        -1 //-1 (True) = Создавать файл если его нет на диске, 0 (False)=не создавать 
//       );
//    file.Write(Результат);
//file.Close();

Stream = CreateObject("Adodb.Stream");
Stream.Charset="utf-8";
Stream.Type = 2;
Stream.Mode= 3;
Stream.Open();
Stream.WriteText(Результат);
Stream.SaveToFile(ИмяФайла,2);
Stream.Close();	
	
//	Если ПустоеЗначение(ДанныеДляОтправки) = 0 Тогда
//		Если ИспользоватьГзипПриОтправке = 1 Тогда
//			Stream_out = CreateObject("Adodb.Stream");
//			Stream_out.Type = 2;
//			Stream_out.charset = "utf-8";
//			Stream_out.LineSeparator = -1;
//			Stream_out.Open();
//		КонецЕсли;	
//		
//   		Если ТипЗначения(ДанныеДляОтправки) = 2 Тогда
//			Если ИспользоватьГзипПриОтправке <> 1 Тогда
//                Запрос = Запрос + ДанныеДляОтправки;
//			Иначе
//				Stream_out.WriteText(ДанныеДляОтправки);
//				Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
//			КонецЕсли;	
//		Иначе 
//			ДанныеДляОтправки.Записать(ВремФайлНаДиске+".sxl");
//		    запрос_текст = СоздатьОбъект("Текст");
//            запрос_текст.КодоваяСтраница(0);
//            запрос_текст.Открыть(ВремФайлНаДиске+".sxl");
//			
//			НомСтроки = 2;
//			
//			Если Найти(запрос_текст.ПолучитьСтроку(1),"<?xml version=""1.0"" encoding=""windows-1251""?>") = 1 Тогда
//				запрос_текст.УдалитьСтроку(1);
//				запрос_текст.Записать(ВремФайлНаДиске+".sxl");
//				НомСтроки = 1;
//			КонецЕсли;	
//			
//			Если ИспользоватьГзипПриОтправке <> 1 Тогда
//			    Запрос = Запрос + запрос_текст.ПолучитьСтроку(НомСтроки);
//		        ФС.УдалитьФайл(ВремФайлНаДиске+".sxl");
//			Иначе
//				Stream_in = CreateObject("Adodb.Stream"); 
//	            Stream_in.Type = 2;
//				Stream_in.Charset="windows-1251";
//	            Stream_in.Open();
//			    Stream_in.LoadFromFile(ВремФайлНаДиске+".sxl");
//                Байт = 255;
//			    Size = Stream_in.Size;
//                Пока Stream_in.EOS = 0 Цикл
//                    Stream_out.WriteText(Stream_in.ReadText(Байт),?(Байт=-2,1,0));
//                    Состояние("Кодирование данных :" + Формат(100 * Stream_in.position/Size,"Ч(0)5.2")+"%");
//                КонецЦикла;
//                Stream_out.SaveToFile(ВремФайлНаДиске+".sxl",2);
//			КонецЕсли;
//		КонецЕсли;
//КонецЕсли;		
//		Состояние("Отправка запроса...");
//	
//	Если ВключитьЛогирование  = 1 Тогда
//		СообщитьБезПрефикса("",,2);
//		СообщитьОбычное("Соединение "+?(ИспользоватьSSL = 1,"c SSL","без SSL"),,2);
//		СообщитьОбычное("Запрос на: " + Строка(ТочкаПодключения),,2);
//		СообщитьОбычное("Сжатие данных при отправке "+?(ИспользоватьГзипПриОтправке = 1,"включено.","выключено."),,2);
//		СообщитьОбычное("Сжатие данных при получении "+?(БезГзип = 0,"включено.","выключено."),,2);
//		СообщитьОбычное(Строка(Процедура_+?(ИспользоватьГзипПриОтправке = 1,"B64",""))+" "+_значения,,2);
//		СообщитьБезПрефикса(Запрос,,2);
//	КонецЕсли;	
//	
	// Создаем файл с VBS скриптом на диске 
	//VBS = СоздатьОбъект("Текст");
	//VBS.ДобавитьСтроку(Скрипт);
	//
	//VBS.Записать(ВремФайлНаДиске+".vbs");
	//
	//
	//
	//Попытка
	//	WshShell = СоздатьОбъект("WScript.Shell");
	//	WshShell.Run("%comspec% /c"+ВремФайлНаДиске+".vbs",0,1);
 	//Исключение
	//	СообщитьОшибка("ОШИБКА! : "+ОписаниеОшибки(),,0);
  	//    ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
	//	Возврат "";
	//КонецПопытки;	
	//
	//Состояние("Получение ответа от сервера...");
	
//ФС.ПереименоватьФайл(ВремФайлНаДиске,ВремФайлНаДиске+".txt",1);
//
xml = СоздатьОбъект("AddIn.XMLParser");
XML_Документ = xml.СоздатьДокумент();
XML_Документ.Загрузить(ИмяФайла);

		
ПервыйУровень    = XML_Документ.ВыбратьУзлы("./*");
ПервыйТег        = ПервыйУровень.ПолучитьУзел(0);
Если ПервыйТег.Наименование = "err" Тогда
	УровеньДанных = ПервыйТег.ВыбратьУзлы("./*");
	СообщитьОшибка(?(СокрЛП(УровеньДанных.ПолучитьУзел(0).Значение) = "1000","Ошибка соединения: ","Ошибка сервера: ") + УровеньДанных.ПолучитьУзел(1).Значение,,ПотокВывода_ТаблоФайл);
	Возврат "SYS_ERR|"+УровеньДанных.ПолучитьУзел(1).Значение;
Иначе
	Корень = XML_Документ.ВыбратьУзел("./*/*/*//*");
КонецЕсли;	
		
xml_объект = xml_ОбходУзлов(Корень);
//
//	
//Если ВключитьЛогирование = 1 Тогда
//	Стр = "";
//	
//	СообщитьОбычное("Ответ: ",,2);
//	Stream = CreateObject("Adodb.Stream"); 
//    Stream.Charset="utf-8"; 
//    Stream.Open(); 
//	Stream.LoadFromFile(ВремФайлНаДиске+".txt");
//    Стр = Stream.ReadText();
//    СообщитьБезПрефикса(Стр,,2); 
//КонецЕсли;
//
//	
//Если УдалятьВременныеФайлы = 1 Тогда
//	ФС.УдалитьФайл(ВремФайлНаДиске+".txt");
//	ФС.УдалитьФайл(ВремФайлНаДиске+".vbs");
//	ФС.УдалитьФайл(ВремФайлНаДиске+".zip");
//КонецЕсли;	
//
Возврат xml_объект;	
//
КонецФункции 


Процедура CurlSoap()
//	
//	ФайлСЗапросом = "test" + ".xml";
//	
//	команда = РабочийКаталог +"curl.exe -d @"+КаталогДляЗапросов+ ФайлСЗапросом+" --output "+РабочийКаталог+
//	ФайлДляОтвета+" -k -H ""Content-Type: text/xml; charset=utf-8"" "+АдресЗапроса+"";
////	Сообщить(команда);
//	
//	РезультатВыполнения = КомандаСистемы(команда);	
//	
//	Возврат РезультатВыполнения;	
	
КонецПроцедуры

Процедура ОткрытьЛогФайл()
	_ЛогФайл = СоздатьОбъект("Текст");
	_ЛогФайл.ДобавитьСтроку("1С SOAP Tollkit "+Версия);
	_ЛогФайл.ДобавитьСтроку("___________________________________________________________");
	Попытка
		_ЛогФайл.Открыть(_ИмяЛогФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры


Процедура ПриОткрытии()
	
	Протокол = ?(ИспользоватьSSL = 1,"https://","http://");
	
	Сообщить("Запуск при открытии");
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		
		xml_текст = "";
		
	   
		  		
		тзПараметров  = СоздатьОбъект("ТаблицаЗначений");
		тзПараметров.Загрузить(Форма.Параметр);
		тзПараметров.ПолучитьСтрокуПоНомеру(1);
		
		КешироватьСервисы = тзПараметров.КешироватьСервисы;
		
		Попытка
			ИспользоватьSSL = тзПараметров.ИспользоватьSSL;
		Исключение
		КонецПопытки;	
		
		Попытка
			СерверДанных = тзПараметров.СерверДанных;
		Исключение
		КонецПопытки;
		
		Попытка
			ПутьДоWSDL = тзПараметров.ПутьДоWSDL;
		Исключение
		КонецПопытки;
		
		Попытка
			ПолучатьСтатусыВТЗ = тзПараметров.ПолучатьСтатусыВТЗ;
		Исключение
		КонецПопытки;
		
		Попытка
			ИспользоватьГзипПриОтправке = тзПараметров.ИспользоватьГзипПриОтправке;
		Исключение
		КонецПопытки;
		
		Попытка
			ПутьДоЛогФайла = тзПараметров.ПутьДоЛогФайла;
		Исключение
		КонецПопытки;
		
		_ИмяЛогФайла        = ПутьДоЛогФайла + СокрЛП(ИмяПользователя()) + "_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + ".txt";
		
		ОткрытьЛогФайл();
		
		Если тзПараметров.Процедура = "SOAP_Execute" Тогда
		   	//*Пашков К.В.@РегионПродОптТорг, 2016-08-10 09:00:42
		   			   	Форма.Параметр = SOAP_execute(тзПараметров.Метод,тзПараметров.Параметры,тзПараметров.Значения,тзПараметров.ДанныеОтправки);
		  // 	Форма.Параметр = SOAP_Execute_Main(тзПараметров.Метод,тзПараметров.Параметры,тзПараметров.Значения,тзПараметров.ДанныеОтправки);
		   	//Пашков К.В.@РегионПродОптТорг, 2016-08-10 09:00:42
		КонецЕсли;
					
		Форма.Закрыть(0)
		
	Иначе
		
		_Сообщение = "1C Soap Toolkit" + Версия;   
		
	КонецЕсли; 
		
КонецПроцедуры 


// Настройки web-сервиса

//*Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:11:11
//СерверДанных                = "www.isales.pepsico.com";
//ПространствоИмен            = "http://tempuri.org/";
//ПутьДоWSDL                  = "/isales/ws/accountingtransfer.asmx";
// -------- заменено на:
СерверДанных                = "www.drp.isales.pepsico.com"; // "30.207.40.43";
ПространствоИмен            = "http://tempuri.org/";
ПутьДоWSDL                  = "/isalestest/ws/accountingtransfer.asmx?WSDL";
///Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:11:11


//*Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:15:42
//ИспользоватьSSL             = 0; // Флаг управления типом соединения с сервером (0 - без SSL, 1 - с SSL)
ИспользоватьSSL             = 1; // Флаг управления типом соединения с сервером (0 - без SSL, 1 - с SSL)
///Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:15:42


//*Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:39:11
//ПолучатьСтатусыВТЗ          = 0; // Флаг управления форматом ответа от сервера (0 - в виде многострочного текста, 1 - в виде таблицы значений с колонками "N" - номер документа, "Status" - статус сообщения, "Desc" - расшифровка ошибок)
ПолучатьСтатусыВТЗ          = 1; // Флаг управления форматом ответа от сервера (0 - в виде многострочного текста, 1 - в виде таблицы значений с колонками "N" - номер документа, "Status" - статус сообщения, "Desc" - расшифровка ошибок)
///Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:39:11


//*Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:10:12
//БезГзип                     = 1; // Флаг управления сжатием данных при приеме их с сервера (0 - GZip включен, 1 - сжатие данных  не используется)
  БезГзип                     = 0; // Флаг управления сжатием данных при приеме их с сервера (0 - GZip включен, 1 - сжатие данных  не используется)
///Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:10:12


//*Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:56:42
//УдалятьВременныеФайлы       = 1; // Флаг управления хранением веременных файлов обмена данными с сервером (0 - оставлять файлы, 1 - удалять)
УдалятьВременныеФайлы       = 0; // Флаг управления хранением веременных файлов обмена данными с сервером (0 - оставлять файлы, 1 - удалять)
///Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:56:42

ВключитьЛогирование         = 1; // Флаг управления логированием процессов (0 - выкл, 1 - вкл)
ИспользоватьГзипПриОтправке = 0; // Флаг управления сжатием данных при отправке их на сервер

// Настройка вывода сообщений
ПотокВывода_ТаблоФайл = 0;
ПотокВывода_Табло     = 1;
ПотокВывода_Файл      = 2;


//Настройка прокси-сервера
S_сервер       = "";
S_пользователь = "";
S_пароль       = "";
s_ntlm         = "1";

//Установка путей кеширования и логирования

//*Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:41:41
////АдресБиблиотекиSOAP = "C:\";
////ПутьДоЛогФайла      = "C:\";
// 
// -------- заменено на:
АдресБиблиотекиSOAP = "E:\iSales";
ПутьДоЛогФайла      = "E:\iSales";
 
///Пашков К.В.@РегионПродОптТорг, 2016-08-10 14:41:41

ЛогироватьВ_xml = 1;


//*Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:02:13
//Версия = "v6.25";
ПутьЛогированияXML  = АдресБиблиотекиSOAP +"\LogXML\";
Версия = "v6.2";
///Пашков К.В.@РегионПродОптТорг, 2016-08-23 16:02:13


